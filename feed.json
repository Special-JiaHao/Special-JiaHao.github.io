{
    "version": "https://jsonfeed.org/version/1",
    "title": "繁華落盡 似水流年",
    "description": "编程日记 & 随笔",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/value/daily/2025/202403",
            "url": "http://example.com/value/daily/2025/202403",
            "title": "202403",
            "date_published": "2024-03-09T07:10:57.034Z",
            "content_html": "",
            "tags": [
                "日常"
            ]
        },
        {
            "id": "http://example.com/value/daily/2024/202403",
            "url": "http://example.com/value/daily/2024/202403",
            "title": "202403",
            "date_published": "2024-03-09T06:59:52.210Z",
            "content_html": "",
            "tags": [
                "日常"
            ]
        },
        {
            "id": "http://example.com/value/C++%E9%9D%A2%E8%AF%95%E9%A2%98",
            "url": "http://example.com/value/C++%E9%9D%A2%E8%AF%95%E9%A2%98",
            "title": "C++面试题",
            "date_published": "2024-03-08T13:53:12.049Z",
            "content_html": "<h2 id=\"程序编译过程\"><a class=\"anchor\" href=\"#程序编译过程\">#</a> 程序编译过程</h2>\n<ul>\n<li>预处理：把 <code>#include</code>  文件内容复制到 <code>.cpp</code>  文件中，同时还会完成宏定义 <code>#define</code>  内容替换</li>\n<li>编译：转化为汇编代码，主要工作是检查一些语法规则，不检查逻辑</li>\n<li>汇编：将汇编代码转化为二进制格式的文件（机器码）</li>\n<li>链接：将多个目标文件以及库文件链接成最终的可执行文件\n<ol>\n<li>静态链接：将</li>\n<li>动态链接：</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"cc内存空间\"><a class=\"anchor\" href=\"#cc内存空间\">#</a> C/C++ 内存空间</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4C.jpg\" alt=\"\" width=\"200px\" /><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4.png\" alt=\"\" width=\"200px\" /></p>\n<ul>\n<li>栈：用于存储局部变量，由编译器自动管理分配与释放，效率很高，但是内存有限</li>\n<li>堆：动态内存空间，由应用程序去控制。如若程序结束没有释放，则会由操作系统自动回收.</li>\n<li>代码区：存放函数体二进制代码</li>\n<li>全局 / 静态存储区：用于存储全局变量和静态变量。在以前 C 语言中，这部分分为初始化的 <code>.data</code>  和未初始化 <code>.bss</code> . 现在 C++ 中则没有这样的划分，区域内的变量会被默认初始化为 0.</li>\n<li>常量存储区：用于存储常量，不允许修改</li>\n</ul>\n<h2 id=\"堆与栈\"><a class=\"anchor\" href=\"#堆与栈\">#</a> 堆与栈</h2>\n<ul>\n<li>栈内存是由编译器自动管理的，堆可由程序员控制，对于开辟的内存需要主动释放，否则容易产生内存泄漏</li>\n<li>栈的内存增长方向是向着地址空间减小的方向，堆内存的增长方向是朝着地址空间增大的方向.</li>\n<li>栈分配的内存都是连续空间，同时是一个先进后出的数据结构，其不存在内存碎片的问题。堆所分配的内存空间不一定连续，会存在内存碎片的问题</li>\n<li>栈的分配效率要高于堆的分配效率。操作系统内有专门的寄存器用于存储栈的地址和栈顶指针地址。堆的内存分配是调用 C/C++ 的库函数，分配空间时还需要按照不同的算法去搜索足够大的空间进行分配。同时由于内存碎片问题，操作系统会进行内存紧缩的操作，需要额外的系统开销.</li>\n</ul>\n<h2 id=\"static\"><a class=\"anchor\" href=\"#static\">#</a> static</h2>\n<ul>\n<li>在函数中申明变量时，被 <code>static</code>  修饰的变量只会被初始化一次，改变了变量的存储位置（原来存储在栈区，现在存储在静态 / 全局存储区），延长了变量的生命周期</li>\n<li>被 <code>static</code>  修饰的变量默认初始化为 0</li>\n<li><code>static</code>  修饰全局变量\n<ol>\n<li>全局变量：既可以在源文件中使用，也可以在其他文件中使用（使用 <code>extern</code>  修饰）</li>\n<li>静态全局变量：只能在源文件中使用，使得全局变量的作用域变小</li>\n</ol>\n</li>\n<li><code>static</code>  所修饰的成员变量为所以对象共享，不占用具体实例的空间.</li>\n<li>静态成员变量必须在类外定义，定义时不加 <code>static</code>  关键字</li>\n<li>静态成员函数没有隐藏的 <code>this</code>  指针，不能访问非静态成员</li>\n<li>访问静态成员变量的方法：\n<ol>\n<li>静态成员变量为 <code>public</code> （对象，类，匿名对象）</li>\n<li>静态成员变量为 <code>private</code> （对象的静态成员函数，类的静态成员函数，匿名对象的静态成员函数）</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"const\"><a class=\"anchor\" href=\"#const\">#</a> const</h2>\n<ul>\n<li><code>const</code>  修饰变量时表示其为一个常量或想阻止一个变量被改变</li>\n<li><code>const</code>  在类外定义变量时，必须初始化，并之后无法更改</li>\n<li><code>const</code>  成员变量：不能在类外初始化，只能通过构造函数初始化列表进行初始化</li>\n<li><code>const</code>  对象不能调用非 <code>const</code>  成员函数</li>\n<li><code>const</code>  修饰的函数为常函数，不能改变类的成员变量</li>\n</ul>\n<h2 id=\"mutable\"><a class=\"anchor\" href=\"#mutable\">#</a> mutable</h2>\n<ul>\n<li><code>mutable</code>  与 <code>const</code>  是相对的，表示一个变量的易变的；被 <code>mutable</code>  修饰是成员变量可以再 <code>const</code>  修饰的函数内被修改（也可以被常对象进行直接修改）</li>\n</ul>\n<h2 id=\"explicit\"><a class=\"anchor\" href=\"#explicit\">#</a> explicit</h2>\n<ul>\n<li>用于修饰类的构造函数，被修饰的构造函数的类不能发生隐式的类型转化，只能以显示的类型转化</li>\n</ul>\n<h2 id=\"volatile\"><a class=\"anchor\" href=\"#volatile\">#</a> volatile</h2>\n<ul>\n<li>用于修饰变量，表示其值随时可能发送变化，编译器不会对访问该变量的代码进行优化，可以保证访问变量的稳定（从内存中读取）</li>\n<li><code>volatile</code>  指针</li>\n<li>多线程下的 <code>volatile</code> ：当多个线程都需要用到某一个变量时，应该用 <code>volatile</code> ，防止编译器把变量从内存装入 CPU 寄存器中</li>\n</ul>\n<h2 id=\"c三大特性\"><a class=\"anchor\" href=\"#c三大特性\">#</a> C++ 三大特性</h2>\n<ul>\n<li>封装、继承、多态（封装和继承可以实现 <code>代码的重用</code> ，多态可以实现 <code>接口的重用</code> ）\n<ol>\n<li>封装：将数据和实现过程包裹起来，隐藏代码的实现细节，通过定义的接口来访问数据成员，使代码模块化. (直接体现面向对象，代码重用，权限控制)\n<ul>\n<li><code>public</code> ：公有权限，类内可以访问，类外也可以访问</li>\n<li><code>protected</code> ：保护权限，类内可以访问，类外不可以访问</li>\n<li><code>private</code> ：私有权限，类内可以访问，类外不可以访问</li>\n</ul>\n</li>\n<li>继承：无需重新编写代码而可以直接使用现有类的所以功能，同时可以对现有类进行功能上的扩展，是一个从一般到特殊的过程.\n<ul>\n<li>权限继承：表示基类在子类中的最高权限（破坏继承： <code>friend</code> ，  <code>using</code> ）</li>\n<li>多继承</li>\n</ul>\n</li>\n<li>多态：一个接口有多种形态；多态是在不同继承关系的类对象，可以通过父类指针去指向子类对象，通过父类指针调用同一函数，可以产生了不同的行为.（父类的指针可以具有多种形态，称之为多态）（用父类型别的指针指向其子类的实例，然后通过父类指针调用实际的子类的成员函数）\n<ul>\n<li>虚函数（函数地址在运行阶段确定）（每个包含虚函数的类实例化出的对象除了成员变量之外，最前面会存储虚函数指针；当发生继承时，派生类的虚表和父类一致，若子类中自身包含虚函数，则会添加到后面，若子类虚函数重写了父类的虚函数，则虚表中的地址也会发生响应的改变）</li>\n<li>编译器在编译阶段会为类（含义虚函数的类）生成虚函数表</li>\n<li>协变：基类和派生类虚函数的返回值不同（基类返回基类对象的指针或引用，派生类返回派生类对象的指针或引用）</li>\n<li>虚析构函数：基类中析构函数前使用 <code>virtual</code>  修饰。当基类指针指向派生类对象时，使用基类指针去释放空间时，则会去先调用派生类的析构函数，再去调用基类的析构函数；若不加 <code>virtual</code>  则不会触发动态绑定（多态），只会调用基类的析构函数，导致内存泄漏. (虽然虚构函数名不一样，其实也是一种重写，系统内部对析构函数做了特殊处理，将析构函数名称都改成了 <code>destructor</code> )</li>\n<li>虚函数地址在运行时绑定，使用了虚函数表的机制，所以在调用的时候会增加一次内存开销.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"为什么c默认析构函数不是虚函数\"><a class=\"anchor\" href=\"#为什么c默认析构函数不是虚函数\">#</a> 为什么 C++ 默认析构函数不是虚函数</h2>\n<ul>\n<li>虚函数需要虚函数表和虚函数表指针，会占用内存空间。如果一个类没有子类，那么就没有必要讲析构函数设置为虚函数</li>\n</ul>\n<h2 id=\"重载-重写-重定义\"><a class=\"anchor\" href=\"#重载-重写-重定义\">#</a> 重载、重写、重定义</h2>\n<ul>\n<li>重载：多个同名函数，他们的参数个数或者参数类型不同；（编译器根据函数不同的参数表，对同名函数的名称做修饰，然后这些同名函数就变成了不同的函数），也可以称之为静态多态，函数地址在编译器就已经确定了</li>\n<li>重定义：继承中的同名隐藏，当派生类中有一个函数与基类的函数名相同，不管参数是否相同，只要该函数不为虚函数，发生了重定义.</li>\n<li>重写：派生类中重写了基类的虚函数，其中函数名、参数列表和返回值都相同</li>\n</ul>\n<h2 id=\"final和override\"><a class=\"anchor\" href=\"#final和override\">#</a> final 和 override</h2>\n<ul>\n<li><code>final</code> ：修饰虚函数，表示该虚函数不能再被重写</li>\n<li><code>override</code> ：检查派生类虚函数是否重写了基类的某个虚函数，如果没有则编译器报错；</li>\n</ul>\n<h2 id=\"struct-与class\"><a class=\"anchor\" href=\"#struct-与class\">#</a> struct 与 class</h2>\n<ul>\n<li>C++ 中的 <code>struct</code>  默认 <code>public</code>  共有权限， <code>class</code>  默认 <code>private</code>  私有权限</li>\n<li>C 语言中的 <code>struct</code>  只是一个变量的集合体，只可以用于封装数据</li>\n</ul>\n<h2 id=\"new-和-malloc的区别\"><a class=\"anchor\" href=\"#new-和-malloc的区别\">#</a> new 和 malloc 的区别</h2>\n<p><code>new</code>  和 <code>malloc</code>  都是用于分配内存的，其中 <code>new</code>  是 C++ 中的操作符，可以被重载， <code>malloc</code>  是 C 语言中的库函数，不可以被重载</p>\n<ol>\n<li>参数不同；new 可以自动计算所分配的对象的内存大小，同时返回值为指向该对象的指针. malloc 则需要传入需要分配的内存的字节数，返回一个 <code>void *</code>  指针</li>\n<li>new 分配失败会抛出异常 <code>bac_alloc</code> ，malloc 分配失败会返回 <code>NULL</code></li>\n<li>new 分配的内存在 <code>free store</code> （自由存储区）上，malloc 分配的内存在堆上（其中自由存储区是 C++ 中的一个抽象的概念，new 的底层调用的逻辑是先调用 <code>operator new</code>  分配内存，由系统决定或者用户重载 <code>operator new</code>  决定，其次是调用对象的构造函数，初始化成员变量）</li>\n<li><code>malloc</code>  分配的内存是虚拟内存，而 <code>new</code>  分配的内存是物理内存。因为 new 调用了对象的构造函数，对对象成员进行了初始化（发生了缺页中断，使得虚拟内存映射到了物理内存）</li>\n</ol>\n<h2 id=\"delete-与-free\"><a class=\"anchor\" href=\"#delete-与-free\">#</a> delete 与 free</h2>\n<p><code>delete</code>  和 <code>free</code>  都是用于释放内存的，其中 <code>delete</code>  是 C++ 中的操作符，可以被重载，free 是 C 语言中的库函数，不可以被重载</p>\n<ol>\n<li>参数不同；delete 需要给出释放的对象的类型指针，free 可以是 <code>void *</code>  类型的指针（delete 底层调用的逻辑是先调用对象的析构函数，再调用 <code>operator delete</code>  释放对象所占内存）（free 只需要提供 <code>void *</code>  就可以释放申请的所以内存： <code>malloc</code>  在分配内存时，不仅仅是分配了用户所需要的内存空间的大小，还会在该空间上部分配额外的一部分空间用于存储此次分配的内存的描述信息）</li>\n</ol>\n<blockquote>\n<p>注意： <code>delete</code>  和 <code>free</code>  被调用后，指针也不会指向空，如果没有其他用途，需要把它设置为 <code>nullptr</code> ，否则会出现野指针.</p>\n</blockquote>\n<h2 id=\"free回收的内存是立即返回给操作系统吗\"><a class=\"anchor\" href=\"#free回收的内存是立即返回给操作系统吗\">#</a> free 回收的内存是立即返回给操作系统吗？</h2>\n<ul>\n<li>不是的。被 <code>free</code>  回收的内存会被 <code>ptmalloc</code>  使用双链表保存起来，当用户下一次申请内存空间的时候，会尝试先从这些内存中寻找合适的返回.</li>\n<li>可以避免频繁的系统调用，提高程序效率.</li>\n<li><code>ptmalloc</code>  也会尝试对小块进行合并，避免过多的内存碎片</li>\n</ul>\n<blockquote>\n<p><strong>C++11</strong> is the second major version of C++ and the most important update since C<ins>98. A large number of changes were introduced to both standardize existing practices and improve the abstractions available to the C</ins> programmers.</p>\n</blockquote>\n<h2 id=\"new与delete\"><a class=\"anchor\" href=\"#new与delete\">#</a> new [] 与 delete []</h2>\n<ul>\n<li><code>new[]</code>  会先调用 <code>operateor new[]</code>  分配内存，然后再分配的内存的前几个字节写入数组的大小，然后进行 n 次构造函数</li>\n</ul>\n<h2 id=\"malloc与free实现原理\"><a class=\"anchor\" href=\"#malloc与free实现原理\">#</a> malloc 与 free 实现原理</h2>\n<h2 id=\"c中的几种new\"><a class=\"anchor\" href=\"#c中的几种new\">#</a> C++ 中的几种 new</h2>\n<ul>\n<li><code>new</code> ： <code>plain new</code> ，分配内存失败会抛出异常</li>\n<li><code>nothrow new</code> ：分配内存失败不抛出异常，而是返回 <code>nullptr</code></li>\n<li><code>placement new</code> ：不会分配内存，在已有的内存空间上重新构造对象</li>\n</ul>\n<h2 id=\"c强制类型转换\"><a class=\"anchor\" href=\"#c强制类型转换\">#</a> C++ 强制类型转换</h2>\n<ul>\n<li>\n<p><code>static_cast&lt;T&gt;()</code></p>\n<ol>\n<li>\n<p>用于层次结构中基类与派生类间指针的转换</p>\n<p>a. 上行转换（派生类指针转化为基类指针），安全</p>\n<p>b. 下行转化（基类指针转化为派生类指针），不安全</p>\n</li>\n<li>\n<p>基本数据类型的转化</p>\n</li>\n</ol>\n</li>\n<li>\n<p><code>dynamic_cast</code> ：运行时处理（动态类型转换），只能针对指针或引用，专门用于派生类与基类之间的转换，会进行类型的检查，较安全（转换失败，指针为 <code>nullptr</code> ，和多态一起使用）</p>\n</li>\n<li>\n<p><code>reinterpret_cast</code> ：转化过程仅仅是简单的比特位拷贝，不安全</p>\n</li>\n<li>\n<p><code>const_cast&lt;T&gt;()</code> ：用于修改变量的 <code>const</code>  或 <code>volatile</code>  属性，变量类型与转换后的类型一致</p>\n</li>\n</ul>\n<h2 id=\"指针与引用\"><a class=\"anchor\" href=\"#指针与引用\">#</a> 指针与引用</h2>\n<ul>\n<li>指针是一个对象，占用内存空间，存储的是一个地址；而引用只是变量的别名，不占用内存空间.</li>\n<li>指针可不进行初始化，也可以指向空，并且指向可以改变；引用必须初始化，且只可绑定一个变量。这也导致了在使用指针时，往往需要判空操作，而引用是一种安全的指针，一定不为空（引用的底层是通过指针来实现）.</li>\n<li><code>sizeof</code>  指针得到的是指针的大小， <code>sizeof</code>  引用得到的是引用绑定对象的大小</li>\n<li>指针可以是多级的，引用只有一级</li>\n</ul>\n<h2 id=\"常引用\"><a class=\"anchor\" href=\"#常引用\">#</a> 常引用</h2>\n<ul>\n<li>\n<p>保护传递给函数的数据在函数内不背改变.  <code>const 类型&amp; 引用名</code></p>\n</li>\n<li>\n<p>在 C++ 中，临时对象都是 <code>const</code>  类型的，const 类型的对象转换为非 const 类型是非法的.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t    <span class=\"token comment\">//  非法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 非法</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"将引用作为函数返回值\"><a class=\"anchor\" href=\"#将引用作为函数返回值\">#</a> 将引用作为函数返回值</h2>\n<ul>\n<li>好处：在内存中不会产生返回值副本</li>\n</ul>\n<blockquote>\n<p>注意：不能返回局部变量的引用，不能返回函数内部 new 的内存空间的引用（无法释放）</p>\n</blockquote>\n<h2 id=\"野指针\"><a class=\"anchor\" href=\"#野指针\">#</a> 野指针</h2>\n<ul>\n<li>野指针：指向已被释放的内存空间或者指向没有访问权限的内存空间</li>\n<li>指针未被初始化、内存释放后未将指针设置为 <code>nullptr</code> 、指针超过了变量的作用范围（越界）都可能导致野指针的产生</li>\n</ul>\n<h2 id=\"c中的顶层const与底层const\"><a class=\"anchor\" href=\"#c中的顶层const与底层const\">#</a> C++ 中的顶层 const 与底层 const</h2>\n<ul>\n<li><code>顶层const</code> ： <code>const</code>  修饰的变量本身是一个常量，无法修改；（指的是指针，出现在 <code>*</code>  的右边）</li>\n<li><code>底层const</code> ： <code>const</code>  修饰的变量所指向的对象是一个常量（出现在 <code>*</code>  左边）</li>\n</ul>\n<blockquote>\n<p>使用 <code>const_cast</code>  时，只能改变运算对象的 <code>底层const</code></p>\n</blockquote>\n<h2 id=\"常量指针与指针常量\"><a class=\"anchor\" href=\"#常量指针与指针常量\">#</a> 常量指针与指针常量</h2>\n<ul>\n<li>常量指针： <code>int const* p = a</code> ，指针的指向可以改变，而不能通过该指针去改变所指向的内容</li>\n<li>指针常量： <code>int *const p = a</code> ，指针的指向不可改变，可以通过指针去改变指向的内容.</li>\n</ul>\n<h2 id=\"数组指针与指针数组\"><a class=\"anchor\" href=\"#数组指针与指针数组\">#</a> 数组指针与指针数组</h2>\n<ul>\n<li>\n<p>数组指针： <code>int (*p)[n]</code> ，指向一个整形的一维数组，这个数组的长度是 n，在执行 <code>p+1</code>  操作时， <code>p</code>  要跨越 n 个整形数据长度</p>\n</li>\n<li>\n<p>指针数组： <code>int *p[n]</code> ， <code>[]</code>  优先级高于 <code>*</code> ，是一个具有 n 个指针类型的数组.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//a 理解成一个一维数组，元素为 a [0], a [1], a [2]， 其中 a [0] 的类型为 (int *), a 与 & amp;a [0] 等价，类型为 int (*p)[4]</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"函数申明与函数指针\"><a class=\"anchor\" href=\"#函数申明与函数指针\">#</a> 函数申明与函数指针</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 函数声明，函数名为 p，返回值为 int*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//  函数指针，函数返回值类型为 int</span></pre></td></tr></table></figure><h2 id=\"宏定义与typedef\"><a class=\"anchor\" href=\"#宏定义与typedef\">#</a> 宏定义与 typedef</h2>\n<ul>\n<li>宏定义主要用于定义常量或者一些书写复杂的内容， <code>typedef</code>  主要用于定义类型的别名</li>\n<li>宏定义在预处理阶段完成，只会进行文本的替换，不进行类型的检查； <code>typedef</code>  在编译阶段完成，会进行类型的检查</li>\n</ul>\n<h2 id=\"const与define\"><a class=\"anchor\" href=\"#const与define\">#</a> const 与 define</h2>\n<h2 id=\"inline内联函数\"><a class=\"anchor\" href=\"#inline内联函数\">#</a> inline 内联函数</h2>\n<ul>\n<li>把 inline 函数体复制到函数调用处（避免了函数调用所需要的压栈和出栈操作，提高了程序运行效率）</li>\n<li>特性类似于宏定义，但 inline 会做类型的检查</li>\n<li>不能包含循环、递归复杂操作</li>\n<li><code>inline</code>  函数有多个返回点，会使用 <code>goto</code>  跳转</li>\n<li>在类中定义的成员函数，除了虚函数，往往会自动转化为内联函数</li>\n<li>缺点：\n<ol>\n<li>代码膨胀，占用代码区的内存空间</li>\n<li>是否内敛由编译器决定，不可控.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"this指针\"><a class=\"anchor\" href=\"#this指针\">#</a> this 指针</h2>\n<ul>\n<li>this 是一个隐含于每一个非静态成员函数中的特殊指针，指向被实例化的对象。当调用对象成员函数时，会将对象的地址赋值给 <code>this</code>  指针，并会隐式的将 <code>this</code>  指针传入</li>\n<li><code>tihs</code>  为一个右值，并由 <code>const</code>  修饰</li>\n</ul>\n<h2 id=\"初始化列表c11\"><a class=\"anchor\" href=\"#初始化列表c11\">#</a> 初始化列表（C++11）</h2>\n<ul>\n<li>通过花括号来进行初始化。直接在变量名后面跟上初始化列表来进行对象的初始化</li>\n</ul>\n<h2 id=\"类成员函数初始化方法\"><a class=\"anchor\" href=\"#类成员函数初始化方法\">#</a> 类成员函数初始化方法</h2>\n<ul>\n<li><code>赋值初始化</code> ：在函数体内进行赋值. (其是在所有成员被分配内存之后才进行的，同时赋值往往会产生临时对象)</li>\n<li><code>列表初始化</code> ：在冒号后使用初始化列表进行初始化.（给数据成员分配内存空间时进行的，在函数体执行之前）</li>\n</ul>\n<h2 id=\"using定义别名\"><a class=\"anchor\" href=\"#using定义别名\">#</a> using 定义别名</h2>\n<h2 id=\"autoc11\"><a class=\"anchor\" href=\"#autoc11\">#</a> auto（C++11）</h2>\n<ul>\n<li>类型推导，通过变量值编译器自动的进行类型的推导，相当于一个占位符（使用 <code>auto</code>  时，必须进行变量的初始化）</li>\n<li>不能在函数的参数中使用，不能用于定义数组，不能用于类的非静态成员</li>\n</ul>\n<h2 id=\"decltypec11\"><a class=\"anchor\" href=\"#decltypec11\">#</a> decltype（C++11）</h2>\n<ul>\n<li>推断表达式类型作为变量的定义类型</li>\n<li>推断函数返回值（实际不会调用，仅推断）</li>\n</ul>\n<h2 id=\"范围for循环c11\"><a class=\"anchor\" href=\"#范围for循环c11\">#</a> 范围 for 循环（C++11）</h2>\n<h2 id=\"nullptr\"><a class=\"anchor\" href=\"#nullptr\">#</a> nullptr</h2>\n<ul>\n<li>代替了 <code>NULL</code> ,  <code>NULL</code>  有时存在二义性.</li>\n</ul>\n<h2 id=\"lambda表达式\"><a class=\"anchor\" href=\"#lambda表达式\">#</a> lambda 表达式</h2>\n<ul>\n<li>匿名函数。一个 <code>lambda</code>  表达式具有一个返回值、一个参数列表和一个函数体。与函数不同的是， <code>lambda</code>  表达式可以定义在函数体内部，格式为： <code>[capture list](parameter list)-&gt;return type &#123;function body&#125;</code> ，不能用默认参数.</li>\n<li><code>capture list</code> ：捕获列表\n<ol>\n<li><code>[]</code> ：不捕获任何变量</li>\n<li><code>[&amp;]</code> ：捕获外部作用域中的所有变量，并作为引用在函数体内使用（按引用捕获）</li>\n<li><code>[=]</code> ：捕获外部作用域中的所有变量，并作为副本在函数体内使用（按值捕获）</li>\n<li></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"左值引用与右值引用\"><a class=\"anchor\" href=\"#左值引用与右值引用\">#</a> 左值引用与右值引用</h2>\n<ul>\n<li>左值引用：对左值的引用（可以出现在等式的左边，也可以出现在等式的右边，是具名的，同时可以取地址， <code>const左值引用</code> 可以引用右值）; 避免对象的拷贝，在一定程度上让程序脱离了危险的指针</li>\n<li>右值引用：右值（只能出现在等式的右边，不能取地址，纯右值 [字面值，返回的非引用的函数调用，后置自增 / 减，算术表达式，逻辑表达式，比较表达式], 将亡值 [C++11 引入，会触发移动构造或者移动赋值，并进行资源转移]）往往是没有名称，在实际开发中我们可能需要对右值进行修改，需要借助右值引用（ <code>类型&amp;&amp; 变量名=右值</code> ）\n<ol>\n<li>移动语义：将一个临时对象（将亡值）的资源转移到另外一个对象中去，可以减少不必要的资源的销毁和开辟，提高运行效率</li>\n<li><code>move()</code> ：将左值强制转化为右值引用，通过右值引用来使用，实现移动语义.</li>\n<li>完美转发</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"大小端存储\"><a class=\"anchor\" href=\"#大小端存储\">#</a> 大小端存储</h2>\n<ul>\n<li>大端存储：高位存储在低字节中</li>\n<li>小端存储：低位存储在低字节中</li>\n</ul>\n<blockquote>\n<p>在 <code>Socket网络编程</code> 中，有主机字节序和网络字节序</p>\n</blockquote>\n<h2 id=\"stl六大组件\"><a class=\"anchor\" href=\"#stl六大组件\">#</a> STL 六大组件</h2>\n<ul>\n<li>容器、算法、迭代器、适配器、仿函数、空间分配器</li>\n</ul>\n<h2 id=\"为什么stack的pop和top要分离\"><a class=\"anchor\" href=\"#为什么stack的pop和top要分离\">#</a> 为什么 stack 的 pop () 和 top () 要分离</h2>\n<ul>\n<li>通过 <code>pop()</code>  来弹出并返回栈顶值这种方式不安全，可能导致原始数据丢失；pop () 在函数返回时，会发生对象的拷贝，如果弹出对象比较大，同时堆内内存比较紧张，可能无法分配住够的内存会抛出异常，无法正确的返回栈顶元素，但是此时栈顶元素已经弹出.</li>\n<li>通过引用或者指针可以解决这个问题</li>\n</ul>\n<h2 id=\"map-set-multimap-multiset关联容器\"><a class=\"anchor\" href=\"#map-set-multimap-multiset关联容器\">#</a> map、set、multimap、multiset（关联容器）</h2>\n<ul>\n<li>底层实现是 <code>红黑树</code></li>\n<li><code>set</code>  和 <code>multiset</code>  会对元素进行排序， <code>set</code>  不存储重复元素， <code>multiset</code>  可以存储重复元素</li>\n<li><code>map</code>  和 <code>multimap</code>  存储的元素为 k-v 键值对，会更加 key 进行排序， <code>map</code>  中不允许重复 key， <code>multimap</code>  可以重复 key</li>\n</ul>\n<h2 id=\"unordered_set与set\"><a class=\"anchor\" href=\"#unordered_set与set\">#</a> unordered_set 与 set</h2>\n<ul>\n<li><code>unordered_set</code>  内部无序，通过哈希来实现，对于非标准类型需要提供判等函数，插入，查询，删除的时间复杂度都是 <code>O(1)</code> ，但是不稳定，当数据量大冲突大时，时间复杂度最坏退化为 <code>O(n)</code> ； <code>set</code>  内部有序，通过红黑树来实现，对于非标准类型需要提供比较函数，插入，查询，删除的时间复杂度比较稳定 <code>log2(n)</code> .</li>\n</ul>\n<h2 id=\"哈希函数\"><a class=\"anchor\" href=\"#哈希函数\">#</a> 哈希函数</h2>\n<ul>\n<li>平方取中发：去关键字的平方值的中间几位作为哈希地址</li>\n</ul>\n<h2 id=\"哈希冲突\"><a class=\"anchor\" href=\"#哈希冲突\">#</a> 哈希冲突</h2>\n<ul>\n<li>开放地址法（再散列）：线性探测，再平方探测、伪随机探测</li>\n<li>拉链法</li>\n<li>再哈希</li>\n</ul>\n<h2 id=\"vector的扩容机制\"><a class=\"anchor\" href=\"#vector的扩容机制\">#</a> vector 的扩容机制</h2>\n<ul>\n<li><code>vector</code>  是一个动态数组，当插入元素使，若 <code>capacity</code>  和 <code>size</code>  相等，则会发生扩容； <code>vector</code>  扩容并不是在原有空间进行扩充，而是在堆内申请一块更大空间的区域，将原来的数据复制过去，同时释放原有空间。至于这个扩容系数，得看具体的实现，得看取舍（内存和效率的取舍）， <code>GCC</code>  下的扩容系数是 2</li>\n</ul>\n<h2 id=\"vectorclear-swap-shrink_to_fitresizereserve\"><a class=\"anchor\" href=\"#vectorclear-swap-shrink_to_fitresizereserve\">#</a> vector（clear(), swap(), shrink_to_fit(),resize(),reserve()）</h2>\n<ul>\n<li><code>clear()</code> ：清空内容，不释放内存（capacity 不变，size 变成 0）</li>\n<li><code>swap()</code> ：清空内容，释放内存 (capacity，size 均变成 0)</li>\n<li><code>shrink_to_fit()</code> ：可能会释放内存，使 capacity 与 size 适配（capacity 与 size 相等）</li>\n<li><code>resize(n)</code> ：会改变 <code>vector</code>  的 size</li>\n<li><code>reserve()</code> ：不会改变 size，但是可能会改变 capacity. 主要目的是为了优化性能，避免在添加元素时频繁进行内存分配</li>\n</ul>\n<h2 id=\"vector与list\"><a class=\"anchor\" href=\"#vector与list\">#</a> vector 与 list</h2>\n<ul>\n<li><code>vector</code>  的内存空间是连续的，可以在 <code>o(1)</code>  内实现随机存取，但是需要再内部进行插入和删除时，需要 <code>O(n)</code> .</li>\n<li><code>list</code>  是双向链表，内存空间不一定连续，往往是离散的， <code>O(n)</code>  完成随机存取，但是可以 <code>O(1)</code>  实现删除和插入操作</li>\n</ul>\n<h2 id=\"clear的时间复杂度\"><a class=\"anchor\" href=\"#clear的时间复杂度\">#</a> clear 的时间复杂度</h2>\n<ul>\n<li>无论是顺序容器还是关联容器在使用 <code>clear()</code>  时，时间复杂度都是 <code>O(n)</code> ；因为执行 <code>clear()</code>  需要调用元素的析构函数，这个析构函数会逐个进行。不过当存储的数据类型是基本数据类型的时候，不需要虚构，系统可能会做一些优化， <code>vector</code>  容器可以使得复杂度降为常数级.</li>\n</ul>\n<h2 id=\"c智能指针c11\"><a class=\"anchor\" href=\"#c智能指针c11\">#</a> C<ins> 智能指针（C</ins>11）</h2>\n<ul>\n<li>\n<p>更加安全且容易的管理动态内存，防止内存泄漏</p>\n</li>\n<li>\n<p><code>auto_ptr</code> ：C<ins>98 引入，由于其不够安全，被 <code>unique_ptr</code>  取代，C</ins>11 废弃；</p>\n</li>\n<li>\n<p><code>unique_ptr</code> ：与 <code>auto_ptr</code>  一样采用所有权模式，同一时间只能有一个指针可以指向某个对象，但是 <code>unique_ptr</code>  禁止了拷贝操作， <code>unique_ptr</code>  采用了移动赋值 <code>move()</code>  函数来进行控制权转移.</p>\n</li>\n<li>\n<p><code>share_ptr</code> ：共享所有权的一个智能指针。允许多个指针指针指向同一个对象，并使用引用计数来管理指向对象的指针（成员函数 <code>use_count()</code>  可获得引用计数），该对象和相关资源会在最后一个引用被销毁时释放</p>\n<ul>\n<li>\n<p><code>shared_ptr</code>  循环计数问题：创建了两个 <code>shared_ptr</code>  分别指向两个对象，而这两个对象内的一个共享指针分别又指向了对方，造成了循环计数，使得两个对象的空间都无法被释放.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> _data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>ListNode<span class=\"token operator\">></span> ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~ListNode()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>ListNode<span class=\"token operator\">></span> <span class=\"token function\">node1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>ListNode<span class=\"token operator\">></span> <span class=\"token function\">node2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> node1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> node2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tnode1<span class=\"token operator\">-></span>ptr <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tnode2<span class=\"token operator\">-></span>ptr <span class=\"token operator\">=</span> node1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> node1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> node2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 常用的解决方案是讲成员函数内的 shared_pre 改成弱指针 weak_ptr</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><code>weak_ptr</code> ：一种不控制对象生命周期的智能指针，不会影响 <code>share_ptr</code>  的引用计数，只是提供一种访问其管理对象的方式</p>\n</li>\n</ul>\n<h2 id=\"内存泄漏\"><a class=\"anchor\" href=\"#内存泄漏\">#</a> 内存泄漏</h2>\n<ul>\n<li>堆内存泄漏（ <code>Heap leak</code> ）</li>\n<li>在释放对象数组时没有使用 <code>delete []</code>  而使用 <code>delete</code></li>\n<li>没有将基类的析构函数定义为虚函数</li>\n<li>缺少拷贝构造函数和重载赋值运算法</li>\n</ul>\n<h2 id=\"深拷贝与浅拷贝\"><a class=\"anchor\" href=\"#深拷贝与浅拷贝\">#</a> 深拷贝与浅拷贝</h2>\n<ul>\n<li>浅拷贝：C++ 默认的方式（如果程序员不主动编写拷贝构造函数和赋值构造，编译器将以浅拷贝的方式生成缺省的函数），简单的将成员函数值进行复制. （当成员变量出现指针时，则会导致多个指针指向同一片内存空间，新旧对象共享内存，当其中一个对象释放内存，再调释放其他对象时就会出现问题，同一片内存空间被释放了多次）</li>\n<li>深拷贝：必须显示的提供拷贝构造函数和赋值构造，新旧对象不共享内存</li>\n</ul>\n<h2 id=\"c类默认生成的函数\"><a class=\"anchor\" href=\"#c类默认生成的函数\">#</a> C++ 类默认生成的函数</h2>\n<ul>\n<li>无参构造函数、拷贝构造函数、析构函数、重载赋值运算符、重载取地址符，均是 <code>public</code></li>\n</ul>\n<h2 id=\"stl内存优化\"><a class=\"anchor\" href=\"#stl内存优化\">#</a> STL 内存优化</h2>\n<h2 id=\"const-2\"><a class=\"anchor\" href=\"#const-2\">#</a>  <code>const</code></h2>\n<ul>\n<li>\n<p>当以编译初始化的方式定义了一个 <code>const</code>  对象时，例如 <code>const int bufsize=512</code> ，编译器将在编译过程中把用到该变量的地方都替换成对应的值。</p>\n</li>\n<li>\n<p><code>const</code>  对象被设定为仅在文件内有效，当多个文件中出现了同名的 <code>const</code>  变量时，其实等同于在不同文件下分别定义了独立的变量；当某一个 <code>const</code>  对象需要再多个文件间共享时，我们需要对于 <code>const</code>  变量不管是声明还是定义都添加 <code>extern</code>  关键字。</p>\n</li>\n</ul>\n<h3 id=\"对常量的引用\"><a class=\"anchor\" href=\"#对常量的引用\">#</a> 对常量的引用</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> dval <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>r <span class=\"token operator\">=</span> dval<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>等价于</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> dval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>r <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>系统在内部会将对常数的引用绑定在一个临时对象上，实际并未绑定 <code>dval</code> ；通过这种设计可以防止非法的操作。</p>\n<h2 id=\"顺序容器\"><a class=\"anchor\" href=\"#顺序容器\">#</a> 顺序容器</h2>\n<ul>\n<li><code>vector</code> ：可变长数组。支持快速随机访问。在尾部之外的其他位置插入或者删除元素可能比较慢</li>\n<li><code>deque</code> ：双端队列。支持快速随机访问。在头部或者尾部插入、删除元素速度很快</li>\n<li><code>list</code> ：双向列表。</li>\n<li><code>forward_list</code> ：单向列表。</li>\n<li><code>array</code> ：固定大小数组。支持快速随机访问。不能添加或者删除元素。</li>\n<li><code>string</code> ：与 <code>vector</code>  类似，但专门用于存储字符</li>\n</ul>\n<h2 id=\"原始字面量\"><a class=\"anchor\" href=\"#原始字面量\">#</a> 原始字面量</h2>\n<p><strong>定义方式</strong>：<em>R×××(原始字符串)×××</em></p>\n<p>其中 <code>()</code>  两侧的字符串 <code>×××</code>  可以省略，原始字面量 <code>R</code>  可以直接表示字符串的实际含义（不进行转义）</p>\n<h2 id=\"指针空值类型\"><a class=\"anchor\" href=\"#指针空值类型\">#</a> 指针空值类型</h2>\n<p>C 与 C<ins> 内定义的 <code>NULL</code>  含义不同；C</ins> 内定义： <code>#define NULL 0</code> , 而 C 内的定义： <code>#define NULL ((void *)0)</code> .C 与 C<ins> 都是强类型语言，从 C 到 C</ins> 语言的类型定义变的更加严格，C++ 内不允许 <code>void( *)</code>  类型的变量隐式转化为其他类型。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 宏定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\"><span class=\"token constant\">NULL</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NULL</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NULL</span>  <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p><code>nullptr</code>  无法隐式的转化为整形，但是可以隐式匹配指针类型</p>\n<h2 id=\"constexpr\"><a class=\"anchor\" href=\"#constexpr\">#</a> constexpr</h2>\n<p>const 的双重语义：<em>变量只读</em>和<em>修饰常量</em></p>\n<p>c++ 程序从编写完成到执行分为四个阶段：<em>预处理</em>、<em>编译</em>、<em>汇编</em>和<em>链接</em>。非常量表达式只能在运行阶段计算出结果，但常量表达式计算发生程序编译阶段，这可以大大提高程序的执行效率。</p>\n<p>为了提高 C++ 程序的执行效率，我们可以将程序中值不需要发生变化的变量定义为常量，也可以使用 <code>constexpr</code>  修饰函数返回值，这种函数被称作常量表达式函数，这写函数主要包括一下几种：普通函数、类成员函数、类构造函数、模版函数。</p>\n<ol>\n<li>函数必须要用返回值，并且 <code>return</code>  返回的表达式必须是常量表达式</li>\n<li>函数在使用之前，必须有对应的定义语句</li>\n<li>整个函数的函数体中，不能出现非常量表达式之外的语句（ <code>using, typedef, static_assert, return</code>  语句除外）</li>\n</ol>\n<p>C++11 语法中， <code>constexpr</code>  可以修饰模版函数，但由于模版中类型的不确定性，因此模版函数实例化后的函数是否符合常量表达式函数的要求也是不确定的。如果 <code>constexpr</code>  修饰的模版函数实例化结果不满足常量表达式函数的要求，则 <code>constexpr</code>  会被自动忽略，即该函数就等同于一个普通函数</p>\n<h2 id=\"auto\"><a class=\"anchor\" href=\"#auto\">#</a> auto</h2>\n<p><code>auto</code>  可以自动推导变量类型；使用 <code>auto</code>  声明的变量必须要进行初始化，以让编译器推导出它的实际类型，在编译阶段将 <code>auto</code>  占位符替换成其真正的类型。</p>\n<ul>\n<li>当变量不是指针或者引用类型时，推导的结果中不会保留 <code>const和、volatile</code>  关键字</li>\n<li>当变量是指针或者引用类型时，推导的结果中会保留 <code>const和、volatile</code>  关键字</li>\n</ul>\n<h3 id=\"auto的限制\"><a class=\"anchor\" href=\"#auto的限制\">#</a> auto 的限制</h3>\n<ul>\n<li>不能作为函数参数使用。因为只有在函数被调用的时候才会给函数参数传递实参， <code>auto</code>  要求必须给修饰的变量赋值。</li>\n<li>不能用于类的非静态成员变量的初始化（类的非静态成员不属于类，而属于对象，只有对象被创建出来之后，才能给非静态成员变量赋值）</li>\n<li>不能使用 <code>auto</code>  关键字定义数组</li>\n<li>无法使用 <code>auto</code>  推导出模版</li>\n</ul>\n<h2 id=\"使用结构化绑定来解包绑定的返回值\"><a class=\"anchor\" href=\"#使用结构化绑定来解包绑定的返回值\">#</a> 使用结构化绑定来解包绑定的返回值</h2>\n<p>结构化绑定是 C++17 新特性，其可以结合语法糖自动推导类型，并可以从组对、元祖和结构体中提取单独的变量（解包）</p>\n<ol>\n<li>\n<p>使用结构化绑定是为了能过更加简单的为绑定的多个变量进行赋值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//  对 pair 的结构化绑定</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">divide_remainder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dividend<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> divisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">divide_remainder</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//  对 tuple 进行结构化绑定</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>tuple<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>system_clock<span class=\"token double-colon punctuation\">::</span>time_point<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> valid_time<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">stock_info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INTC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//  对自定义结构体进行结构化绑定</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">employee</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    string name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    string role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>employee<span class=\"token operator\">></span> employees<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/* 注意：在适当时候使用引用，尽量减少不必要的复制 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> employees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Name: \"</span> <span class=\"token operator\">&lt;&lt;</span> name</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Role: \"</span> <span class=\"token operator\">&lt;&lt;</span> role</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Salary: \"</span> <span class=\"token operator\">&lt;&lt;</span> salary <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>STL</code>  中的基础数据结构都能通过结构化绑定来直接进行访问</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">></span> animal_population<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>species<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> animal_population<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"There are \"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> species</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" on this planet.\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>Node：与 C 的语法特征不同，将复杂结构体作为返回值传回会耗费大量的时间，因为对象需要在返回函数中进行初始化，之后将这个对象拷贝到相应容器中返回给调用端。现代编译器支持<a href=\"https://zh.wikipedia.org/wiki/%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%98%E5%8C%96\"><strong>返回值优化</strong></a> (RVO, <em>return value optimization</em>) 技术，这项技术可以省略中间副本的拷贝。</p>\n</blockquote>\n<h2 id=\"带初始化的if和switch\"><a class=\"anchor\" href=\"#带初始化的if和switch\">#</a> 带初始化的 if 和 switch</h2>\n<h2 id=\"括号初始化\"><a class=\"anchor\" href=\"#括号初始化\">#</a> 括号初始化</h2>\n<p><code>C++11</code>  引入了新的括号初始化语法 <code>&#123;&#125;</code> ，其不仅允许集合式的初始化，而且还是对常规构造函数的调用。遗憾的是，当与 <code>auto</code>  类型变量结合使用时，这种方式很容易出现错误， <code>c++17</code>  增强了这一系列初始化规则。</p>\n",
            "tags": [
                "面试题"
            ]
        },
        {
            "id": "http://example.com/value/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98",
            "url": "http://example.com/value/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98",
            "title": "计算机网络面试题",
            "date_published": "2024-03-07T09:23:50.257Z",
            "content_html": "<h2 id=\"tcpip四层模型osi七层模型\"><a class=\"anchor\" href=\"#tcpip四层模型osi七层模型\">#</a> TCP/IP 四层模型，OSI 七层模型</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.png\" alt=\"\" /></p>\n<h2 id=\"tcp连接建立三次握手\"><a class=\"anchor\" href=\"#tcp连接建立三次握手\">#</a> TCP 连接建立（三次握手）</h2>\n<ol>\n<li>客户端（client）建立连接， <code>SYN=1</code> ，发送后状态变成 <code>SYN_SEND</code></li>\n<li>服务端（server）收到后，同意建立连接， <code>ACK=1, SYN=1</code> ，发送完成后状态变成 <code>SYN_RCVD</code></li>\n<li>客户端（client）收到后，状态变成 <code>ESTABLISHED</code> ，返回 <code>ACK=1</code>  给服务端；服务端（server）收到后，状态也变成 <code>ESTABLISHED</code> ，连接建立成功.</li>\n</ol>\n<blockquote>\n<p>TCP 连接建立为什么是 3 次，不是两次或者四次？</p>\n<ul>\n<li>TCP 是全双工传输模式，它们双方即是客户端也是服务端，需要建立双向的连接；如果只有两次，无法做到双向连接，而建立连接时，服务端发送确定的同时将 <code>SYN=1</code> ，确认和建立连接的请求合并了，所以也不需要 4 次.</li>\n</ul>\n</blockquote>\n<h2 id=\"tcp连接释放四次挥手\"><a class=\"anchor\" href=\"#tcp连接释放四次挥手\">#</a> TCP 连接释放（四次挥手）</h2>\n<ul>\n<li>客户端（client）连接释放，向服务端发送释放连接请求， <code>FIN=1</code> ，此时客户端没有数据需要发送，状态变成 <code>FIN_WAIT_1</code></li>\n<li>服务端（server）收到后，返回一个确认报文 <code>ACK=1</code> ，服务端状态变成 <code>CLOSE_WAIT</code> （服务端可能还没有发送完数据）</li>\n<li>等到服务端（server）发送完所以数据后，向客户端发送连接释放请求， <code>FIN=1</code> ，服务端状态变成 <code>LAST_ACK</code></li>\n<li>客户端收到 <code>ACK=1</code>  确认之后，状态变成 <code>FIN_WAIT_2</code> ；客户端收到服务端释放连接请求后，向服务端发送 <code>ACK=1</code> ，此时客户端状态变成 <code>TIME_WAIT</code> , 等待 2MSL（报文最大生命周期）的时间，才会进入 <code>CLOSED</code>  状态</li>\n</ul>\n<blockquote>\n<p>为什么 TCP 连接释放不能 3 次？</p>\n<ul>\n<li>因为 <code>FIN=1</code>  和 <code>ACK=1</code>  不能同时发送，服务端在收到客户端 <code>FIN=1</code>  后，数据可能没有发送完成.</li>\n</ul>\n<p>为什么要等待 2MSL？</p>\n<ul>\n<li>保证服务端连接的可靠关闭。如若最后一个 <code>ACK=1</code>  报文丢失，在 2MSL 内客户端必定察觉，可以重发</li>\n</ul>\n</blockquote>\n<h2 id=\"tcp如何保证传输的可靠性\"><a class=\"anchor\" href=\"#tcp如何保证传输的可靠性\">#</a> TCP 如何保证传输的可靠性</h2>\n<ul>\n<li>校验和：发送放在发送数据时会计算校验和，接收方在接受到数据后同样会检查校验和，如果不一致，那么传输发送了差错</li>\n<li>确认应答、序列号：TCP 对数据报进行了编号，同时接收方在接受了到了后会发送 <code>ack</code>  的确认</li>\n<li>超时重传：如果发送方一段时间没有收到某个报文的 <code>ACK</code>  确认，则会重新发送数据</li>\n<li>连接管理：三次握手和四次挥手保证连接的建立和释放的可靠性</li>\n<li>流量控制：TCP 协议报文包含 16 位的窗口大小，接收方在发送确认的同时会将自身窗口填入，发送方就根据报文中的窗口大小来控制发送速度</li>\n<li>拥塞控制：</li>\n</ul>\n<h2 id=\"tcp的流量控制\"><a class=\"anchor\" href=\"#tcp的流量控制\">#</a> TCP 的流量控制</h2>\n<ul>\n<li>TCP 中的流量控制是通过一个可变的滑动窗口来实现的. TCP 报文段中的窗口大小表示从被确认的字节算起还可以发送的字节数</li>\n<li>发送方的发送窗口内的字节都允许发送，当左部字节已发送并收到确认则窗口右移.</li>\n<li>接受方的接收串口内的字节都允许被接收。当左部字节已经发送确认并收到发送方确认，则窗口右移.</li>\n</ul>\n<blockquote>\n<p>TCP 流量控制是一个控制发送方发送速度，防止发送方发送速度过快导致接收方无法正确接受（缓存满），是一个局部的控制算法</p>\n</blockquote>\n<h2 id=\"tcp-拥塞控制\"><a class=\"anchor\" href=\"#tcp-拥塞控制\">#</a> TCP 拥塞控制</h2>\n<ul>\n<li>拥塞控制的方法：慢开始，拥塞避免，快重传，快恢复</li>\n<li>慢开始：不确定当前的网络状况，从 1 开始按指数逐渐增大拥塞窗口的大小，以此来探测当前网络的状况.</li>\n<li>拥塞避免：拥塞窗口达到阈值时所采用的策略，拥塞窗口的大小线性增大</li>\n<li>当出现了报文超时，当前拥塞窗口变成 1，重新执行慢开始，同时阈值减半</li>\n<li></li>\n</ul>\n<blockquote>\n<p>TCP 拥塞控制同样也是用于控制发送方发送速度，但是出发点是为了缓解整个网络的拥塞，是一个全局的控制算法.</p>\n</blockquote>\n<h2 id=\"tcp与udp的区别\"><a class=\"anchor\" href=\"#tcp与udp的区别\">#</a> TCP 与 UDP 的区别</h2>\n<ul>\n<li>TCP 是面向连接的，提供可靠的数据流传输；UDP 是非面向连接的，数据传输不可靠</li>\n<li>TCP 是面向字节流的，UDP 面向报文</li>\n<li>TCP 提供了流量控制和拥塞控制，而 UDP 没有</li>\n<li>TCP 一般只支持点到点的通信，UDP 支持一对一，一对多的通信</li>\n</ul>\n<blockquote>\n<p>运行在 TCP 之上的协议： <code>HTTP</code> ， <code>HTTPS</code> ， <code>FTP</code> ， <code>SSH</code> <br />\n 运行在 UDP 之上的协议：DNS</p>\n</blockquote>\n<h2 id=\"浏览器请求一个网址的过程\"><a class=\"anchor\" href=\"#浏览器请求一个网址的过程\">#</a> 浏览器请求一个网址的过程</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B.png\" alt=\"\" /></p>\n<ul>\n<li>首先通过 <code>DNS</code>  将域名解析为 <code>IP地址</code></li>\n<li>应用层构造 <code>http</code>  报文，传输层添加 <code>TCP头部</code> ，网络层添加 <code>IP</code>  头部，数据链路层添加 <code>以太网头部</code></li>\n<li>数据流进过路由器，交换机最终到达目标服务器，目标服务器同样进过层层解包来获取 <code>http</code>  报文，然后发送确认报文.</li>\n</ul>\n<h2 id=\"http协议中请求的方式\"><a class=\"anchor\" href=\"#http协议中请求的方式\">#</a> http 协议中请求的方式</h2>\n<ul>\n<li><code>GET</code> 、 <code>POST</code> 、 <code>HEAD</code> 、 <code>PUT</code> 、 <code>DELETE</code></li>\n</ul>\n<h2 id=\"get与post的区别\"><a class=\"anchor\" href=\"#get与post的区别\">#</a> GET 与 POST 的区别</h2>\n<ul>\n<li>安全性： <code>GET</code>  提交的数据会出现在 URL 内，相对不安全； <code>POST</code>  提交的数据会在报文体内，相对安全</li>\n<li>数据流： <code>GET</code>  传输的数据受限与 URL 的长度，而 <code>POST</code>  没有这种限制</li>\n<li>一般而言 <code>GET</code>  从服务器上获取资源，而 <code>POST</code>  更新服务器上的资源</li>\n</ul>\n<h2 id=\"http响应码\"><a class=\"anchor\" href=\"#http响应码\">#</a> http 响应码</h2>\n<ul>\n<li><code>200</code> ：</li>\n<li><code>404</code> ：</li>\n<li><code>500</code> ：</li>\n</ul>\n<h2 id=\"http与https的区别\"><a class=\"anchor\" href=\"#http与https的区别\">#</a> http 与 https 的区别</h2>\n<ul>\n<li></li>\n</ul>\n<h2 id=\"session与cookie\"><a class=\"anchor\" href=\"#session与cookie\">#</a> session 与 cookie</h2>\n<h2 id=\"arp协议\"><a class=\"anchor\" href=\"#arp协议\">#</a> ARP 协议</h2>\n<blockquote>\n<p>网络层的 IP 报文向下需要封装成帧，需要添加以太网头部，这就需要知道节点的 MAC 地址；ARP 的作用就是完成 IP 地址到 MAC 地址的转化协议</p>\n</blockquote>\n<ul>\n<li>首先每个主机都会维护一张 ARP 列表，用于存储 IP 地址到 MAC 地址的映射</li>\n<li>源主机发送数据时，首先检查 ARP 列表内是否有目的地址的 MAC 地址，如果有，则写入以太网头部，并发送帧。如果没有，主机以广播的形式发送 ARP 数据报，数据报内源主机 IP 地址，源主机 MAC 地址，目的主机的 IP 地址</li>\n<li>当网络中的主机收到 ARP 数据包时，首先检查报文中的 IP 地址是否是自己，如果不是则丢弃该报文；否则将自己的 MAC 地址写入 ARP 响应报文中，同时将源主机的 IP 地址和 MAC 地址键值对写入自己的 ARP 列表中.</li>\n<li>源主机收到 ARP 响应报文后，将目的主机的 IP 地址和 MAC 地址写入自身的 APR 列表中，并写入以太网头部，发送该帧.</li>\n</ul>\n",
            "tags": [
                "面试题"
            ]
        },
        {
            "id": "http://example.com/value/VMware%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98",
            "url": "http://example.com/value/VMware%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98",
            "title": "VMware Workstation遇到的一些问题",
            "date_published": "2023-12-20T06:35:18.919Z",
            "content_html": "<h1 id=\"vmware-workstation遇到的一些问题\"><a class=\"anchor\" href=\"#vmware-workstation遇到的一些问题\">#</a> VMware Workstation 遇到的一些问题</h1>\n<h2 id=\"ens33网卡不见了\"><a class=\"anchor\" href=\"#ens33网卡不见了\">#</a>  <code>ens33网卡不见了</code></h2>\n<blockquote>\n<p>出现原因：</p>\n<ol>\n<li>未正常关闭虚拟机而笔记本长时间待机可能导致</li>\n</ol>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/ens33%E6%B6%88%E5%A4%B1.png\" alt=\"ens33消失\" /></p>\n<p>​\t解决方案：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">sudo</span> systemctl start NetworkManager</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">></span> <span class=\"token function\">sudo</span> dhclient ens33</pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%8A%A8%E6%80%81ip%E5%88%86%E9%85%8D.png\" alt=\"动态ip分配\" /></p>\n<p>此时可以正常访问，但是当虚拟机重启之后，可能又回到原来 <code>ens33</code>  消失的状况，此时需要将网卡加入托管</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> nmcli n on</pre></td></tr></table></figure>",
            "tags": [
                "VMware"
            ]
        },
        {
            "id": "http://example.com/value/cmake",
            "url": "http://example.com/value/cmake",
            "title": "cmake",
            "date_published": "2023-12-19T08:01:14.989Z",
            "content_html": "<h1 id=\"cmake\"><a class=\"anchor\" href=\"#cmake\">#</a>  <code>Cmake</code></h1>\n<h2 id=\"cmake的使用\"><a class=\"anchor\" href=\"#cmake的使用\">#</a>  <code>cmake</code>  的使用</h2>\n<p><code>cmake</code>  是一个项目构建工具，并且是跨平台的。</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># CMake 使用 #来进行注释， 使用 #[[]] 来注释一整块代码</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>cmake_minimum_required(VERSION 3.0)</code> ：指定最低版本（非必要，推荐）</p>\n</li>\n<li>\n<p><code>project</code> ：定义工程文件名，（可指定工程版本，工程描述、web 主页，支持的语言）</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>add_executable</code></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>可执行程序名 源文件名称<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 源文件名称可能是一个个可能是多个，如果有多个可以用空格或；间隔</span></pre></td></tr></table></figure></li>\n<li>\n<p>执行 <code>cmake</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake CMakeLists.txt文件所在路径</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用 set 来定义一个变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>var value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 使用 $&#123;变量名&#125; 来取变量值</span></pre></td></tr></table></figure><ul>\n<li>\n<p>指定使用的 C++ 标准</p>\n<ul>\n<li>\n<p>方法一： <code>CMakeLists.txt</code>  中指定</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>方法二：执行 <code>cmake</code>  命令值指定</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake CMakeLists.txt文件路径 <span class=\"token parameter variable\">-DCMAKE_CXX_STANDARD</span><span class=\"token operator\">=</span><span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  cmake CMakeLists.txt文件路径 <span class=\"token parameter variable\">-DCMAKE_CXX_STANDARD</span><span class=\"token operator\">=</span><span class=\"token number\">14</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  cmake CMakeLists.txt文件路径 <span class=\"token parameter variable\">-DCMAKE_CXX_STANDARD</span><span class=\"token operator\">=</span><span class=\"token number\">17</span></pre></td></tr></table></figure></li>\n<li>\n<p>指定输出路径</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>home /home/robin/linux/sort<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">EXECUTABLE_OUTPUT_PATH</span> <span class=\"token punctuation\">$&#123;</span>home<span class=\"token punctuation\">&#125;</span>/bin<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"搜索文件\"><a class=\"anchor\" href=\"#搜索文件\">#</a> 搜索文件</h2>\n<ul>\n<li><code>aux_source_directory(dir var)</code> ：查找某个路径下的所以源文件</li>\n<li><code>file(GLOB/GLOB_RECURSE var 要搜索的文件路径和文件类型)</code></li>\n</ul>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 两个宏定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">PROJECT_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span> \t\t<span class=\"token comment\"># CMakeLists.txt 所在的路径</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_CURRENT_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\"># CMakeLists.txt 所在的路径</span></pre></td></tr></table></figure><h2 id=\"包含头文件\"><a class=\"anchor\" href=\"#包含头文件\">#</a> 包含头文件</h2>\n<ul>\n<li><code>include_directories(header_path)</code></li>\n</ul>\n<h2 id=\"制作静态库与动态库\"><a class=\"anchor\" href=\"#制作静态库与动态库\">#</a> 制作静态库与动态库</h2>\n<ul>\n<li>\n<p>制作静态库： <code>add_libray(库名称 STATIC 源文件1 源文件2 )</code></p>\n</li>\n<li>\n<p>制作动态库： <code>add_libray(库文件 SHARED 源文件1 源文件2)</code></p>\n<p><code>LIBRARY_OUTPUT_PATH</code>  ：用于指定生成的动态库 / 静态库的存放路径，动态库也可以使用 <code>EXECUTABLE_OUTPUT_PATH</code></p>\n</li>\n</ul>\n<h2 id=\"包含库文件静态库文件与动态库文件\"><a class=\"anchor\" href=\"#包含库文件静态库文件与动态库文件\">#</a> 包含库文件（静态库文件与动态库文件）</h2>\n<ul>\n<li>\n<p>链接静态库： <code>link_libraries(静态库名称)</code></p>\n<p>静态库名称可以是全称，例如 <code>libxxx.a</code> ；也可以是掐头去尾之后的名称 <code>xxx</code></p>\n</li>\n<li>\n<p>链接动态库： <code>target_link_libraries(目标文件 动态库文件)</code></p>\n</li>\n</ul>\n<blockquote>\n<p>如果静态库或动态库不是系统提供的，需要指定静态库 / 动态库的路径；</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">link_directories</span><span class=\"token punctuation\">(</span>对应的路径<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"日志\"><a class=\"anchor\" href=\"#日志\">#</a> 日志</h2>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">message</span><span class=\"token punctuation\">(</span>[STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR] 输出的消息<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>消息类型：</p>\n<ul>\n<li><code>（无）</code> ：重要消息</li>\n<li><code>STATUS</code> ：主要消息</li>\n<li><code>WARNING</code> ： <code>CMake</code>  警告</li>\n<li><code>AUTHOR_WARNING</code> ： <code>CMake</code>  警告</li>\n<li><code>SEND_ERROR</code> ： <code>CMake</code>  错误，跳过生成过程</li>\n<li><code>FATAL_ERROR</code> ： <code>CMake</code>  错误，终止所以处理过程</li>\n</ul>\n<h2 id=\"变量操作\"><a class=\"anchor\" href=\"#变量操作\">#</a> 变量操作</h2>\n<h3 id=\"字符串拼接\"><a class=\"anchor\" href=\"#字符串拼接\">#</a> 字符串拼接</h3>\n<ul>\n<li>\n<p>使用 <code>set</code></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>res <span class=\"token punctuation\">$&#123;</span>var1<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">$&#123;</span>var2<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 <code>list</code></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>APPEND 变量名 需要追加的字符串<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"字符串移除\"><a class=\"anchor\" href=\"#字符串移除\">#</a> 字符串移除</h3>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>REMOVE_ITEM 变量名 移除的元素值<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"获取列表的长度\"><a class=\"anchor\" href=\"#获取列表的长度\">#</a> 获取列表的长度</h3>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 获取列表内元素个数，而非字符串长度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>LENGTH 变量名 outputVar<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"获取列表指定索引值\"><a class=\"anchor\" href=\"#获取列表指定索引值\">#</a> 获取列表指定索引值</h3>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>GET 变量名 &lt;element index<span class=\"token punctuation\">></span> ... &lt;output variable<span class=\"token punctuation\">></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>索引从 0 开始编号，索引也可以是负数，比如 <code>-1</code>  表示最后一个元素；超过列表长度则会报错</p>\n<h3 id=\"指定连接符拼接\"><a class=\"anchor\" href=\"#指定连接符拼接\">#</a> 指定连接符拼接</h3>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>JOIN 变量名<span class=\"token number\">1</span> 变量名<span class=\"token number\">2</span> ... 连接符 &lt;output variable<span class=\"token punctuation\">></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"查找指定元素\"><a class=\"anchor\" href=\"#查找指定元素\">#</a> 查找指定元素</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"在列表指定位置插入元素\"><a class=\"anchor\" href=\"#在列表指定位置插入元素\">#</a> 在列表指定位置插入元素</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"在列表头部插入元素\"><a class=\"anchor\" href=\"#在列表头部插入元素\">#</a> 在列表头部插入元素</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"在列表尾部元素删除\"><a class=\"anchor\" href=\"#在列表尾部元素删除\">#</a> 在列表尾部元素删除</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"移除列表头部元素\"><a class=\"anchor\" href=\"#移除列表头部元素\">#</a> 移除列表头部元素</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"移除指定索引的元素\"><a class=\"anchor\" href=\"#移除指定索引的元素\">#</a> 移除指定索引的元素</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"移除列表中的重复元素\"><a class=\"anchor\" href=\"#移除列表中的重复元素\">#</a> 移除列表中的重复元素</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"列表翻转\"><a class=\"anchor\" href=\"#列表翻转\">#</a> 列表翻转</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"列表排序\"><a class=\"anchor\" href=\"#列表排序\">#</a> 列表排序</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h2 id=\"宏定义\"><a class=\"anchor\" href=\"#宏定义\">#</a> 宏定义</h2>\n<h3 id=\"内置宏\"><a class=\"anchor\" href=\"#内置宏\">#</a> 内置宏</h3>\n<ul>\n<li><code>VERSION</code> ： <code>CMake</code>  版本号</li>\n<li><code>CMAKE_CXX_STANDARD</code> ： <code>C++</code>  标准</li>\n<li><code>EXECUTABLE_OUTPUT_PATH</code> ：可执行文件的输出路径</li>\n</ul>\n",
            "tags": [
                "项目构建工具"
            ]
        },
        {
            "id": "http://example.com/value/%E9%87%91%E5%B1%B1%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F",
            "url": "http://example.com/value/%E9%87%91%E5%B1%B1%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F",
            "title": "金山会议室预约系统",
            "date_published": "2023-12-15T07:40:37.498Z",
            "content_html": "<h1 id=\"金山会议室预约系统\"><a class=\"anchor\" href=\"#金山会议室预约系统\">#</a> 金山会议室预约系统</h1>\n<h2 id=\"操作系统\"><a class=\"anchor\" href=\"#操作系统\">#</a> 操作系统</h2>\n<p><strong>Linux Ubuntu20.04</strong></p>\n<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<ul>\n<li><a href=\"#%E9%9C%80%E6%B1%82%E8%AF%B4%E6%98%8E\">需求说明</a></li>\n<li><a href=\"#Mysql%E9%85%8D%E7%BD%AE\">Mysql 配置</a></li>\n<li><a href=\"#%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C\">系统运行</a></li>\n<li><a href=\"#%E7%B3%BB%E7%BB%9F%E6%BC%94%E7%A4%BA\">系统演示</a></li>\n<li><a href=\"#%E8%AE%BE%E8%AE%A1%E9%80%BB%E8%BE%91(%E7%8A%B6%E6%80%81%E6%9C%BA%E6%A8%A1%E5%9E%8B)\">设计逻辑 (状态机模型)</a></li>\n</ul>\n<h2 id=\"需求说明\"><a class=\"anchor\" href=\"#需求说明\">#</a> 需求说明</h2>\n<ul>\n<li>首先进入登录界面，可选登录身份有：\n<ul>\n<li>业务人员</li>\n<li>行政人员</li>\n<li>系统管理员</li>\n<li>退出</li>\n</ul>\n</li>\n<li>选择上述自己身份后，进入子菜单，每个身份都需要进行验证后，输入下列信息：\n<ul>\n<li>账号</li>\n<li>密码</li>\n</ul>\n</li>\n<li>验证通过后，根据自己不同的身份，进入对应二级子菜单\n<ul>\n<li>业务人员\n<ul>\n<li>申请预约 —— 预约会议室</li>\n<li>查看所有预约 —— 查看全部预约信息以及预约状态</li>\n<li>查看自己预约 —— 查看自己的预约状态</li>\n<li>取消预约 —— 取消会议室的预约</li>\n<li>退出 —— 退出登录</li>\n</ul>\n</li>\n<li>行政人员\n<ul>\n<li>查看所有预约 —— 查看全部预约信息以及预约状态</li>\n<li>审批预约 —— 对职员的预约进行审批</li>\n<li>退出 —— 退出登录</li>\n</ul>\n</li>\n<li>管理员具体功能\n<ul>\n<li>添加账户 —— 添加业务人员或行政的账户，账户名具有唯一性。\n<ul>\n<li>添加信息 —— 工号、姓名、用户名、密码</li>\n</ul>\n</li>\n<li>查看账户\n<ul>\n<li>查看业务人员账户</li>\n<li>查看行政人员账户</li>\n</ul>\n</li>\n<li>查看会议室信息 —— 可以查看所有会议室的名称、容量、预约信息</li>\n<li>清空预约 —— 清空所有预约记录</li>\n<li>退出 —— 退出登录</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://github.com/Special-JiaHao/images/blob/main/%E9%9C%80%E6%B1%82%E8%AF%B4%E6%98%8E.png?raw=true\" alt=\"需求说明\" /></p>\n<h2 id=\"mysql配置\"><a class=\"anchor\" href=\"#mysql配置\">#</a> Mysql 配置</h2>\n<p>mysql 数据库需要预先生成 <code>administrator</code>  (管理员身份表),  <code>business_user</code>  (业务人员身份表),  <code>staff</code>  (行政人员身份表) 以及 <code>records</code>  (预约记录表), sql 命令如下:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> administrator<span class=\"token punctuation\">(</span><span class=\"token keyword\">user</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> password <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> business_user<span class=\"token punctuation\">(</span>jid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> password <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> staff<span class=\"token punctuation\">(</span>jid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> password <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> records<span class=\"token punctuation\">(</span>rid <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span> jid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> period <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">status</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> room_id <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>数据库配置文件在 <code>s1.cpp</code>  中进行相应的修改，修改内容如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 数据库配置参数 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> HOST<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* IP 127.0.0.1 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> USER<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* User root */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> PASSWORD<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* password root */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> DATABASE<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"reservation_system\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* database reservation_system */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> PORT <span class=\"token operator\">=</span> <span class=\"token number\">3306</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* port 3306 */</span></pre></td></tr></table></figure><h2 id=\"系统运行\"><a class=\"anchor\" href=\"#系统运行\">#</a> 系统运行</h2>\n<ul>\n<li>编译</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">make</span></pre></td></tr></table></figure><ul>\n<li>运行服务端</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token builtin class-name\">cd</span> bin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> ./app_server</pre></td></tr></table></figure><ul>\n<li>运行客户端</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token builtin class-name\">cd</span> bin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> ./app_client1     <span class=\"token comment\"># 运行客户端 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> ./app_client2     <span class=\"token comment\"># 运行客户端 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> ./app_client3     <span class=\"token comment\"># 运行客户端 3</span></pre></td></tr></table></figure><h2 id=\"系统演示\"><a class=\"anchor\" href=\"#系统演示\">#</a> 系统演示</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1NwZWNpYWwtSmlhSGFvL2ltYWdlcy9tYWluLyVFOSU4NyU5MSVFNSVCMSVCMSVFOSVBMiU4NCVFNyVCQSVBNiVFNyVCMyVCQiVFNyVCQiU5RiVFNiU5RSVCNiVFNiU5RSU4NC5wbmc=\">【Bilibili 金山预约系统演示】</span></p>\n<h2 id=\"系统架构cs\"><a class=\"anchor\" href=\"#系统架构cs\">#</a> 系统架构 C/S</h2>\n<ul>\n<li>系统采用 C/S 架构，服务端开启监听端口，用于接收客户端的访问请求，使用多线程去分别处理用户请求，同时服务端与 Mysql 数据库进行数据传输；客户端通过服务端开启的端口与服务端建立连接，同时接收用户输入发送响应的请求.<br />\n<img data-src=\"https://github.com/Special-JiaHao/images/blob/main/%E9%87%91%E5%B1%B1%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84.png?raw=true\" alt=\"系统架构\" /></li>\n</ul>\n<h2 id=\"设计逻辑状态机模型\"><a class=\"anchor\" href=\"#设计逻辑状态机模型\">#</a> 设计逻辑（状态机模型）</h2>\n<p><img data-src=\"https://github.com/Special-JiaHao/images/blob/main/%E9%87%91%E5%B1%B1%E7%B3%BB%E7%BB%9F%E9%80%BB%E8%BE%91.png?raw=true\" alt=\"状态机模型\" /></p>\n",
            "tags": [
                "Project"
            ]
        },
        {
            "id": "http://example.com/value/redis",
            "url": "http://example.com/value/redis",
            "title": "redis",
            "date_published": "2023-10-03T08:18:31.023Z",
            "content_html": "<h1 id=\"redis\"><a class=\"anchor\" href=\"#redis\">#</a> Redis</h1>\n<p>redis（Remote dictionary server）是一个开源的基于内存的数据存储系统。它可以用于数据库缓存，消息队列等各种场景，是一种 NoSQL 数据库。早期的互联网公司系统大多是通过 Mysql 这种传统的关系型数据库对外提供服务。随着互联网的快速发展，应用系统的访问量原来远大，数据库的性能瓶颈越来越明显，主要是由于磁盘 IO 所导致的，磁盘 IO 的读写速度与内存相比是非常慢的，如果能把数据存储在内存中，则可以大大数据存储的性能。于是便出现了 redis，这种基于内存的数据存储系统。</p>\n<p>redis 支持多种数据结构，包括五种基本数据类型和五种高级数据类型。</p>\n<p>五种基本数据类型：</p>\n<ul>\n<li>字符串 String</li>\n<li>列表 List</li>\n<li>集合 Set</li>\n<li>有序集合 SortedSet</li>\n<li>哈希 Hash</li>\n</ul>\n<p>五种高级数据类型：</p>\n<ul>\n<li>消息队列</li>\n<li>地理空间</li>\n<li>HyperLogLog</li>\n<li>位图 Bitmap</li>\n<li>位域 Bitfiled</li>\n</ul>\n<p>redis 的使用方式有三种：</p>\n<ul>\n<li>CLI，命令行界面（Command Line Interface）；通过 Redis-CLI 命令行工具来使用</li>\n<li>API，应用程序接口（Application Programing Interface）；</li>\n<li>GUI，图形用户界面（Graphical User Interface）；通过图形化工具来使用 Redis</li>\n</ul>\n<p>redis 中的数据是以键值对的形式存储的</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 字符串 String</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">set</span> key value      \t\t<span class=\"token comment\"># 设置键值对（key, value）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>get key \t        \t<span class=\"token comment\"># 获取 key 对应的 value 值，大小写敏感</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># redis 内默认都是使用字符串来存储数据的，而且是二进制安全的（redis-cli --raw）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>del key\t\t\t   \t    <span class=\"token comment\"># 删除 key 对应的（key，value）键值对</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>exists key\t\t    \t<span class=\"token comment\"># 判断是否存在 key 对应的键值对</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>keys pattern\t\t\t<span class=\"token comment\"># 查看与 pattern 匹配的键，* 表示所以 key</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>flushall\t\t    \t<span class=\"token comment\"># 清空数据库，即删除所以的键值对</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">clear</span>\t\t\t    \t<span class=\"token comment\"># 清空屏幕</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 设置一个带过期时间的键值对</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>TTL key\t\t\t   \t\t<span class=\"token comment\"># 查看 key 的过期时间，返回 - 1 表示没有设置过期时间，返回 - 2 表示设置了过期时间同时该键值对已经过期，返回正数表示过期时间</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>expire key seconds\t\t<span class=\"token comment\"># 为 key 对应的键值对设置过期时间 seconds</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>setex key seconds value  <span class=\"token comment\"># 设置（key，value）键值对的过期时间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>setnx key value\t\t\t<span class=\"token comment\"># 当键 key 不存在时，插入（key, value）, 否则不插入</span></pre></td></tr></table></figure><p>list 也叫列表，一般用来存储和操作一组有顺序的数据，和数组的概念比较类似</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># lish 操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lpush key value \t\t<span class=\"token comment\"># 往列表 key 的左边插入一个 value 的元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rpush key value\t\t\t<span class=\"token comment\"># 往列表 key 的右边插入一个 value 的元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>lpush key value1 value2 value3 <span class=\"token punctuation\">..</span>.  <span class=\"token comment\"># 一次性添加多个元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lrange key start stop\t<span class=\"token comment\"># 获取列表 key 左边 [start, stop] 的所以元素索引 0 开始</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>lpop key \t\t\t   <span class=\"token comment\"># 删除列表 key 最左边的元素，返回删除的元素值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>lpop key count\t\t   <span class=\"token comment\"># 删除列表 key 最左边的 count 个元素（版本 >=6.0.2），返回删除的元素值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>llen key\t\t\t   <span class=\"token comment\"># 获取列表 key 的长度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ltrim key start stop    <span class=\"token comment\"># 保留列表 key 从左开始 [stop, stop] 内的元素，范围之外的元素均会被删除（索引均是从 0 开始）</span></pre></td></tr></table></figure><p>set 是一种无序集合，它和列表的区别是列表中的元素都是可以重复的，而 set 中的元素不可以重复，而且 set 中的元素并不像列表中的元素那样都是具有顺序的。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># set 操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sadd key member\t\t\t<span class=\"token comment\"># 往无序集合 key 内添加 member 元素，若无序集合 key 内已经存在该 member，则添加失败</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sadd key memeber1 member2 <span class=\"token punctuation\">..</span>.   <span class=\"token comment\"># 往无序集合 key 内添加多个元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>smembers key\t\t\t<span class=\"token comment\"># 查看无序集合 key 的元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sismember key member\t <span class=\"token comment\"># 查看 member 是否是无序集合 key 内的元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>srem key memeber\t\t<span class=\"token comment\"># 删除无序集合 key 内的 member</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>srem key member1 member2 <span class=\"token punctuation\">..</span>.   <span class=\"token comment\"># 删除无序集合 key 内的多个元素</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 集合运算操作</span></pre></td></tr></table></figure><p>sortedset 是一种有序集合，又名 zset，其和集合的区别在于有序集合的每个元素都会关联一个浮点类型的分数，然后按照这个分数来对集合中的元素进行从小到大的顺序排序，有序集合的成员是唯一的，但是分数是可以重复的。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># sortedset 操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>zadd key score1 member1 score2 member2 <span class=\"token punctuation\">..</span>.  <span class=\"token comment\"># 往有序集合 key 中插入 member1,member2，其对应的分数为 score1, scores2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>zrange key start stop\t\t\t\t<span class=\"token comment\"># 查看有序集合 key 内 [start, stop] 内的元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>zrange key start stop withscores     <span class=\"token comment\"># 查看有序集合 key 内 [start, stop] 内的元素和其对应的分数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>zscore key member\t\t\t\t    <span class=\"token comment\"># 获取有序集合 key 内 member 的分数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>zrank key member\t\t\t\t    <span class=\"token comment\"># 获取有序集合 key 内 member 的排名（从小到大排序，分数越小排名越高）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>zrevrank key member\t\t\t\t    <span class=\"token comment\"># 获取有序集合 key 内 member 的排名（从大到小排序，分数越高排名越高）</span></pre></td></tr></table></figure><p>哈希 hash 是一个字符类型的字段和值的映射表，简单来说就是一个键值对的集合，特别适合用来存储对象。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># hash 操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hset key field value\t\t<span class=\"token comment\"># 往哈希 key 内插入 (field, value) 键值对</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hget key field\t\t\t    <span class=\"token comment\"># 获取哈希 key 内 field 对应的值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hgetall key\t\t\t\t   <span class=\"token comment\"># 获取哈希 key 内所以的键值对</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hdel key field  \t\t   <span class=\"token comment\"># 删除哈希 key 内 field 对应的键值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>hexists key field \t\t    <span class=\"token comment\"># 查看哈希 key 内是否存在 field 对应的键值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>hkeys key\t\t\t\t   <span class=\"token comment\"># 获取哈希 key 内所以的键</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>hlen key\t\t\t\t   <span class=\"token comment\"># 获取哈希 key 内所以键值对的数目</span></pre></td></tr></table></figure><p>redis 提供了发布订阅的功能，可以通过 <code>publish</code>  将消息发布到指定的频道，然后通过 <code>subscribe</code>  命令来订阅这个频道。但是这样的简单的发布和订阅功能具有一些局限性，比如消息无法持久化，无法记录历史消息等等</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>subscribe channel\t\t\t<span class=\"token comment\"># 订阅频道 channel</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>publish channel message\t\t<span class=\"token comment\"># 像频道 channe 发布消息 message</span></pre></td></tr></table></figure><p>消息队列 Stream，是 redis5.0 引入的一个新的数据结构，他是一个轻量级的消息队列，可以实现消息的持久化、记录历史消息等。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Stream 操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>xadd key <span class=\"token function\">id</span> field value\t\t\t\t<span class=\"token comment\"># 往消息队列 key 内添加一条消息（消息的 id，消息的内容 (field, value)）， id 为 *，则 redis 则会自动生成，id 为 (时间戳 - 序号) 的形式；redis 自动生成的 id 保证其为递增，如果手动指定 id 需要自己保证插入消息 id 为递增的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>xlen key\t\t\t\t\t\t   <span class=\"token comment\"># 获取消息队列 key 的消息数目</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>xrange key - + \t\t\t\t\t    <span class=\"token comment\"># 获取消息队列 key 内的所以消息信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>xrange key start end\t\t\t\t<span class=\"token comment\"># 获取消息队列 key 内 id 在 [start, end] 范围内的消息信息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>xdel key <span class=\"token function\">id</span>\t\t\t\t\t\t    <span class=\"token comment\"># 删除消息队列 key 内 ID 为 id 的消息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>xtrim key maxlen count\t\t\t\t<span class=\"token comment\"># 删除消息队列 kye 内的消息，直到消息队列长度为 count（可能比 count 多）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>xread <span class=\"token punctuation\">[</span>count count_num<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>block milliseconds<span class=\"token punctuation\">]</span> streams key <span class=\"token function\">id</span>   <span class=\"token comment\"># 读取消息队列可以内 count_num 条消息，ID>id，若没有则堵塞 milliseconds 毫秒，如果 id 为 $, 表示获取当前时刻之后的 count_num 条消息</span></pre></td></tr></table></figure><p>地理空间 <code>Genspatial</code>  是 redis3.2 版本的新特性，它提供了一种存储空间位置信息的数据结构，同时支持对地理位置进行的各种计算操作。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 地理空间 genspatial</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>geoadd key longitude latitude member \t<span class=\"token comment\"># 往空间地理位置 key 内添加名称为 member 的地理位置信息（经度，纬度）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>geopos key member\t\t\t\t\t  <span class=\"token comment\"># 获取空间地理位置 key 内 member 的位置信息 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>geodist key member1 member2 <span class=\"token punctuation\">[</span>km<span class=\"token punctuation\">]</span>\t\t\t   <span class=\"token comment\"># 获取空间地理位置 key 内 member1 与 member2 之间的距离，默认为 m</span></pre></td></tr></table></figure><p><code>HyperLogLog</code>  是一种用来做基数统计的算法，它并不是 redis 特有的算法。基数：集合中元素数目（去重之后）。它的原理是使用随机算法来计算，通过牺牲一定的精度来换取更小的内存消耗。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># hyperloglog 操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pfadd key element1 element2 <span class=\"token punctuation\">..</span>.        <span class=\"token comment\"># 往基数容器 key 内添加 element1，element2... 元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pfcount key\t\t\t\t\t\t\t<span class=\"token comment\"># 获取基数容器 key 内元素的数目</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pfmerge destkey sourcekey1 sourcekey2  <span class=\"token comment\"># 合并多个基数容器，最终存放于 destkey 基数容器内</span></pre></td></tr></table></figure><p>位图是字符串类型的扩展，可以使用一个 string 类型来模拟一个 Bit 数组，数组的下标就是偏移量，值只有 0 和 1，也支持一些位运算，比如与、或、非和异或等等。他们的运用非常广泛，比如用来记录用户的签到情况，在线状态，点赞状态。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># bitmap 操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>setbit key offset value\t\t\t\t<span class=\"token comment\"># 设置位图 key 偏移量为 offset 的位置为 value (0/1)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>getbit key offset\t\t\t\t    <span class=\"token comment\"># 获取位图 key 偏移量为 offset 的位置的值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> key value\t\t\t\t\t   <span class=\"token comment\"># 位图本质是 string，可以通过设置 string 的方法来设置位图，value 转化为二进制即为对应位图的值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bitcount key \t\t\t\t\t   <span class=\"token comment\"># 获取位图 key 内 1 的个数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bitpos key bit\t\t\t\t\t   <span class=\"token comment\"># 获取位图 key 内第一次出现 bit 的下标 (0 开始)</span></pre></td></tr></table></figure><p>位域能够将很多小的整数存储到一个较大的位图中，这样就可以更加高效的使用内存</p>\n<p>redis 支持事务，也就是可以在一次请求中执行多个命令；redis 中的事务主要通过 <code>multi</code>  和 <code>exec</code>  这两个命令来实现的； <code>multi</code>  命令用来开启一个事务，事务开启之后所以的命令都会被放进一个队列中，最后通过一个 <code>exec</code>  命令来执行所以的命令。redis 中是事务和 mysql 或者 oracle 中的数据库的事务不太一样，在关系型数据库中，事务一般是一个原子操作，要么全部执行成功，要么全部执行失败；而在 redis 中，事务并不能保证所以命令都会执行成功，它的执行结果取决于事务中的命令，但是 redis 可以保证如下三点：</p>\n<ul>\n<li>在发送 <code>exec</code>  命令之前，所以的命令都会被放入到一个队列中缓存起来，不会立即执行</li>\n<li>在收到 <code>exec</code>  命令之后事务开始执行，事务中的任何一个命令执行失败其他命令依然会被执行（不会以为其中的命令执行失败而影响后续的命令的执行）</li>\n<li>在事务的执行过程中，其他客户端提交的命令请求并不会被插入到执行命令序列中</li>\n</ul>\n<p>持久化的 redis 一个非常重要的功能，因为 redis 是一个基于内存的数据库，如果没有持久化的话，那么一旦服务器重启或者断点，那么之前的所以数据都会丢失，这对于一个数据库来说是非常致命的。redis 中的持久化主要由两种方式：</p>\n<ul>\n<li>RDB 方式（redis databse），在指定的时间间隔内，将内存中的数据快照写入磁盘，他是某一时间点上数据的完整副本</li>\n<li>AOF 方式（Append-Only File），追加文件，每次在执行写命令的时候，不仅将命令写入到内存中，还会将命令写入到一个追加的文件中，这个文件就是 AOF 文件，它会以日志的形式来记录每一个写操作，当 redis 重启的时候，就会通过重新执行 AOF 文件中的命令来在内存中重建整个数据库的内容</li>\n</ul>\n<p>主从复制是指将一台服务器（主节点）的数据复制到其他 redis 服务器中（从节点）。一个主节点可以有多个从节点，而每个从节点只可以有一个主节点，数据的复制是单向的，只能由主节点到从节点；一般来说主节点负责写操作，从节点负责读操作，主节点会将自己的数据变化通过异步的方式发送给从节点，从节点接收到主节点的数据之后，更新自己的数据，这样就达到的了数据一致性的目的。</p>\n<p>面试问题：</p>\n<ol>\n<li><code>redis</code>  是多线程还是单线程？\n<ul>\n<li>在早期的 <code>redis</code>  版本中， <code>redis</code>  的网络 <code>I/O</code>  和键值对的读写操作是由单线程来处理的；在回来的版本，在网络 <code>I/O</code>  模块使用了多线程，但是对于键值对的操作仍然使用的是单线程（故无论是早期版本的 <code>redis</code>  还是当前版本的 <code>redis</code>  均是并发安全的）；当然对于一个 <code>redis</code>  的数据持久化，集群同步等问题都是使用多线程来完成，需要额外的开销</li>\n</ul>\n</li>\n<li><code>redis</code>  为什么速度快？\n<ul>\n<li><code>redis</code>  的一种基于内存的数据存储系统，相比于涉及到磁盘操作的 <code>mysql</code>  等其他数据库而言，对于内存的操作会更快。</li>\n<li><code>redis</code>  对于键值对的读写操作是单线程的，不需要额外线程切换的开销</li>\n<li><code>redis</code>  底层通过哈希对数据进行映射，可以实现线性的存储与访问；同时在访问冲突大时，使用渐进式的 <code>rehash</code>  机制来进行重新映射</li>\n<li><code>redis</code>  内部维护了一个缓存时间戳，避免的频繁的系统调用而导致的额外开销。（ <code>redis</code>  获取系统的毫秒时间戳并不会频繁的调用 <code>time()</code>  这样的系统调用， <code>redis</code>  会对时间戳进行缓存，同时通过额外的线程来对时间戳进行更新）</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "数据库"
            ]
        },
        {
            "id": "http://example.com/value/stl_list",
            "url": "http://example.com/value/stl_list",
            "title": "STL List",
            "date_published": "2023-10-03T07:35:12.758Z",
            "content_html": "<h1 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> List</h1>\n<h2 id=\"list-node设计\"><a class=\"anchor\" href=\"#list-node设计\">#</a> list node 设计</h2>\n<p>list 是由 list 节点串联而成，需要分开设计。SGI STL 内设计的 list 为双向链表，故 list 节点需要三个成员变量。</p>\n<h3 id=\"核心实现\"><a class=\"anchor\" href=\"#核心实现\">#</a> 核心实现</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">list_node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tlist_node<span class=\"token operator\">*</span> prev<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tlist_node<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tT data<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"sgi-stl内源码实现\"><a class=\"anchor\" href=\"#sgi-stl内源码实现\">#</a> SGI STL 内源码实现：</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_List_node_base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  _List_node_base<span class=\"token operator\">*</span> _M_next<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 后继</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  _List_node_base<span class=\"token operator\">*</span> _M_prev<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 前驱</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 节点 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Tp</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_List_node</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">_List_node_base</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  _Tp _M_data<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">//  数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/list_node.png\" alt=\"\" title=\"list node\" height=\"350px\" width=\"700px\" /></p>\n<h2 id=\"list的迭代器\"><a class=\"anchor\" href=\"#list的迭代器\">#</a> list 的迭代器</h2>\n<h2 id=\"list的数据结构\"><a class=\"anchor\" href=\"#list的数据结构\">#</a> list 的数据结构</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Tp</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">_Alloc</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">_List_base</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _Alloc allocator_type<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 空间配置器类型 allocator_type</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  allocator_type <span class=\"token function\">get_allocator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">_List_base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">//  构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    _M_node <span class=\"token operator\">=</span> <span class=\"token function\">_M_get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    _M_node<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">=</span> _M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    _M_node<span class=\"token operator\">-></span>_M_prev <span class=\"token operator\">=</span> _M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">_List_base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">_M_put_node</span><span class=\"token punctuation\">(</span>_M_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">typedef</span> simple_alloc<span class=\"token operator\">&lt;</span>_List_node<span class=\"token operator\">&lt;</span>_Tp<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span> _Alloc_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  _List_node<span class=\"token operator\">&lt;</span>_Tp<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token function\">_M_get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _Alloc_type<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_put_node</span><span class=\"token punctuation\">(</span>_List_node<span class=\"token operator\">&lt;</span>_Tp<span class=\"token operator\">></span><span class=\"token operator\">*</span> __p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> _Alloc_type<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">deallocate</span><span class=\"token punctuation\">(</span>__p<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  _List_node<span class=\"token operator\">&lt;</span>_Tp<span class=\"token operator\">></span><span class=\"token operator\">*</span> _M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Tp</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">_Alloc</span> <span class=\"token operator\">=</span> <span class=\"token function\">__STL_DEFAULT_ALLOCATOR</span><span class=\"token punctuation\">(</span>_Tp<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">list</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">_List_base</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">_Tp</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">_Alloc</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// requirements:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">__STL_CLASS_REQUIRES</span><span class=\"token punctuation\">(</span>_Tp<span class=\"token punctuation\">,</span> _Assignable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _List_base<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span> _Base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> _Void_pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>      </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _Tp value_type<span class=\"token punctuation\">;</span>                              <span class=\"token comment\">//  数据类型 : value_type</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">typedef</span> value_type<span class=\"token operator\">*</span> pointer<span class=\"token punctuation\">;</span>                         <span class=\"token comment\">//  指针 : pointer</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">const</span> value_type<span class=\"token operator\">*</span> const_pointer<span class=\"token punctuation\">;</span>             <span class=\"token comment\">//  常量指针 : const_pointer</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">typedef</span> value_type<span class=\"token operator\">&amp;</span> reference<span class=\"token punctuation\">;</span>                       <span class=\"token comment\">//  引用 : reference</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">const</span> value_type<span class=\"token operator\">&amp;</span> const_reference<span class=\"token punctuation\">;</span>           <span class=\"token comment\">//  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _List_node<span class=\"token operator\">&lt;</span>_Tp<span class=\"token operator\">></span> _Node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">typedef</span> size_t size_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">typedef</span> ptrdiff_t difference_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">_Base</span><span class=\"token double-colon punctuation\">::</span>allocator_type allocator_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  allocator_type <span class=\"token function\">get_allocator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _Base<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_allocator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _List_iterator<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span>_Tp<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span>_Tp<span class=\"token operator\">*</span><span class=\"token operator\">></span>             iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _List_iterator<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">*</span><span class=\"token operator\">></span> const_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_CLASS_PARTIAL_SPECIALIZATION</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">typedef</span> reverse_iterator<span class=\"token operator\">&lt;</span>const_iterator<span class=\"token operator\">></span> const_reverse_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">typedef</span> reverse_iterator<span class=\"token operator\">&lt;</span>iterator<span class=\"token operator\">></span>       reverse_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span> <span class=\"token comment\">/* __STL_CLASS_PARTIAL_SPECIALIZATION */</span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">typedef</span> reverse_bidirectional_iterator<span class=\"token operator\">&lt;</span>const_iterator<span class=\"token punctuation\">,</span>value_type<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                                         const_reference<span class=\"token punctuation\">,</span>difference_type<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          const_reverse_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">typedef</span> reverse_bidirectional_iterator<span class=\"token operator\">&lt;</span>iterator<span class=\"token punctuation\">,</span>value_type<span class=\"token punctuation\">,</span>reference<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                                         difference_type<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          reverse_iterator<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_CLASS_PARTIAL_SPECIALIZATION */</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_HAS_NAMESPACES</span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token keyword\">using</span> _Base<span class=\"token double-colon punctuation\">::</span>_M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">using</span> _Base<span class=\"token double-colon punctuation\">::</span>_M_put_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">using</span> _Base<span class=\"token double-colon punctuation\">::</span>_M_get_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_HAS_NAMESPACES */</span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  _Node<span class=\"token operator\">*</span> <span class=\"token function\">_M_create_node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    _Node<span class=\"token operator\">*</span> __p <span class=\"token operator\">=</span> <span class=\"token function\">_M_get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    __STL_TRY <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token function\">_Construct</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>__p<span class=\"token operator\">-></span>_M_data<span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">__STL_UNWIND</span><span class=\"token punctuation\">(</span><span class=\"token function\">_M_put_node</span><span class=\"token punctuation\">(</span>__p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">return</span> __p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  _Node<span class=\"token operator\">*</span> <span class=\"token function\">_M_create_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    _Node<span class=\"token operator\">*</span> __p <span class=\"token operator\">=</span> <span class=\"token function\">_M_get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    __STL_TRY <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token function\">_Construct</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>__p<span class=\"token operator\">-></span>_M_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token function\">__STL_UNWIND</span><span class=\"token punctuation\">(</span><span class=\"token function\">_M_put_node</span><span class=\"token punctuation\">(</span>__p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">return</span> __p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token keyword\">explicit</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span> __a <span class=\"token operator\">=</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>             <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>_Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_M_node<span class=\"token operator\">-></span>_M_next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  const_iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>_Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_M_node<span class=\"token operator\">-></span>_M_next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>             <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _M_node<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  const_iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _M_node<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  const_reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">const_reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  const_reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">const_reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token comment\">/* 判空函数 empty */</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _M_node<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">==</span> _M_node<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  size_type <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    size_type __result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">return</span> __result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  size_type <span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">size_type</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  reference <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  const_reference <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  reference <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  const_reference <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token comment\">/* 交换 swap */</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> __STD<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_M_node<span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token comment\">/* 插入 insert */</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  iterator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    _Node<span class=\"token operator\">*</span> __tmp <span class=\"token operator\">=</span> <span class=\"token function\">_M_create_node</span><span class=\"token punctuation\">(</span>__x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    __tmp<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    __tmp<span class=\"token operator\">-></span>_M_prev <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">=</span> __tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev <span class=\"token operator\">=</span> __tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token keyword\">return</span> __tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  iterator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>__position<span class=\"token punctuation\">,</span> <span class=\"token function\">_Tp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_MEMBER_TEMPLATES</span></span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token comment\">// Check whether it's an integral type.  If so, it's not an iterator.</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Integer</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_insert_dispatch</span><span class=\"token punctuation\">(</span>iterator __pos<span class=\"token punctuation\">,</span> _Integer __n<span class=\"token punctuation\">,</span> _Integer __x<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                          __true_type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token function\">_M_fill_insert</span><span class=\"token punctuation\">(</span>__pos<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>size_type<span class=\"token punctuation\">)</span> __n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_Tp<span class=\"token punctuation\">)</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_insert_dispatch</span><span class=\"token punctuation\">(</span>iterator __pos<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                          _InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                          __false_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __pos<span class=\"token punctuation\">,</span> _InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">_Is_integer</span><span class=\"token operator\">&lt;</span>_InputIterator<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>_Integral _Integral<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token function\">_M_insert_dispatch</span><span class=\"token punctuation\">(</span>__pos<span class=\"token punctuation\">,</span> __first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">,</span> <span class=\"token function\">_Integral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">*</span> __first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">*</span> __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>              const_iterator __first<span class=\"token punctuation\">,</span> const_iterator __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __pos<span class=\"token punctuation\">,</span> size_type __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">_M_fill_insert</span><span class=\"token punctuation\">(</span>__pos<span class=\"token punctuation\">,</span> __n<span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_fill_insert</span><span class=\"token punctuation\">(</span>iterator __pos<span class=\"token punctuation\">,</span> size_type __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  iterator <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    _List_node_base<span class=\"token operator\">*</span> __next_node <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    _List_node_base<span class=\"token operator\">*</span> __prev_node <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    _Node<span class=\"token operator\">*</span> __n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    __prev_node<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">=</span> __next_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    __next_node<span class=\"token operator\">-></span>_M_prev <span class=\"token operator\">=</span> __prev_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token function\">_Destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>__n<span class=\"token operator\">-></span>_M_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token function\">_M_put_node</span><span class=\"token punctuation\">(</span>__n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> __next_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  iterator <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iterator __first<span class=\"token punctuation\">,</span> iterator __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> _Base<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_type __new_size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_type __new_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>__new_size<span class=\"token punctuation\">,</span> <span class=\"token function\">_Tp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    iterator __tmp <span class=\"token operator\">=</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>__tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>size_type __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __value<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>       <span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span> __a <span class=\"token operator\">=</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __n<span class=\"token punctuation\">,</span> __value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>  <span class=\"token keyword\">explicit</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>size_type __n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span><span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __n<span class=\"token punctuation\">,</span> <span class=\"token function\">_Tp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre></pre></td></tr><tr><td data-num=\"176\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_MEMBER_TEMPLATES</span></span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>  <span class=\"token comment\">// We don't need any dispatching tricks here, because insert does all of</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>  <span class=\"token comment\">// that anyway.  </span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>_InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>       <span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span> __a <span class=\"token operator\">=</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre></pre></td></tr><tr><td data-num=\"186\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">*</span> __first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">*</span> __last<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>       <span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span> __a <span class=\"token operator\">=</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>const_iterator __first<span class=\"token punctuation\">,</span> const_iterator __last<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>       <span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span> __a <span class=\"token operator\">=</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__x<span class=\"token punctuation\">.</span><span class=\"token function\">get_allocator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>  list<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre></pre></td></tr><tr><td data-num=\"205\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>  <span class=\"token comment\">// assign(), a generalized assignment member function.  Two</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>  <span class=\"token comment\">// versions: one that takes a count, and one that takes a range.</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>  <span class=\"token comment\">// The range version is a member template, so we dispatch on whether</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>  <span class=\"token comment\">// or not the type is an integer.</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>size_type __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">_M_fill_assign</span><span class=\"token punctuation\">(</span>__n<span class=\"token punctuation\">,</span> __val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_fill_assign</span><span class=\"token punctuation\">(</span>size_type __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre></pre></td></tr><tr><td data-num=\"215\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_MEMBER_TEMPLATES</span></span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>_InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">_Is_integer</span><span class=\"token operator\">&lt;</span>_InputIterator<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>_Integral _Integral<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>    <span class=\"token function\">_M_assign_dispatch</span><span class=\"token punctuation\">(</span>__first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">,</span> <span class=\"token function\">_Integral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Integer</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_assign_dispatch</span><span class=\"token punctuation\">(</span>_Integer __n<span class=\"token punctuation\">,</span> _Integer __val<span class=\"token punctuation\">,</span> __true_type<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">_M_fill_assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_type<span class=\"token punctuation\">)</span> __n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_Tp<span class=\"token punctuation\">)</span> __val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_assign_dispatch</span><span class=\"token punctuation\">(</span>_InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>                          __false_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre></pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre></pre></td></tr><tr><td data-num=\"233\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> iterator __first<span class=\"token punctuation\">,</span> iterator __last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__position <span class=\"token operator\">!=</span> __last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>      <span class=\"token comment\">// Remove [first, last) from its old position.</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>      __last<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token operator\">-></span>_M_next     <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>      __first<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token operator\">-></span>_M_next    <span class=\"token operator\">=</span> __last<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>      __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">=</span> __first<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"240\"></td><td><pre></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>      <span class=\"token comment\">// Splice [first, last) into its new position.</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>      _List_node_base<span class=\"token operator\">*</span> __tmp      <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>      __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev <span class=\"token operator\">=</span> __last<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>      __last<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev     <span class=\"token operator\">=</span> __first<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"245\"></td><td><pre>      __first<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev    <span class=\"token operator\">=</span> __tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre></pre></td></tr><tr><td data-num=\"249\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> list<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>__x<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"252\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>__position<span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> list<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> iterator __i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>    iterator __j <span class=\"token operator\">=</span> __i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>    <span class=\"token operator\">++</span>__j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__position <span class=\"token operator\">==</span> __i <span class=\"token operator\">||</span> __position <span class=\"token operator\">==</span> __j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>__position<span class=\"token punctuation\">,</span> __i<span class=\"token punctuation\">,</span> __j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> list<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> iterator __first<span class=\"token punctuation\">,</span> iterator __last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__first <span class=\"token operator\">!=</span> __last<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"262\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>__position<span class=\"token punctuation\">,</span> __first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre></pre></td></tr><tr><td data-num=\"270\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_MEMBER_TEMPLATES</span></span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Predicate</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove_if</span><span class=\"token punctuation\">(</span>_Predicate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_BinaryPredicate</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span>_BinaryPredicate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_StrictWeakOrdering</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> _StrictWeakOrdering<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_StrictWeakOrdering</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>_StrictWeakOrdering<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "STL"
            ]
        },
        {
            "id": "http://example.com/value/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C",
            "url": "http://example.com/value/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C",
            "title": "Convolutional Neural Network",
            "date_published": "2023-09-01T08:09:55.500Z",
            "content_html": "<h1 id=\"background\"><a class=\"anchor\" href=\"#background\">#</a> Background</h1>\n<p>卷积神经网络<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>主要使用在图像和视频分析的各种任务上，比如图像分类、人脸识别、图像分割上，其准确率远超其他的神经网络模型。基于卷积神经网络架构的模型在计算机视觉领域中已经占主导地位，当今几乎所有的图像识别、目标检测或语义分割相关的学术竞赛和商业应用都以这种方法为基础。</p>\n<p>卷积神经网络最早出现是用来处理图像信息，在使用以往的全连接前馈网络处理图像时，往往是将图像数据展平成一维向量，再将数据送入一个全连接的多层感知机中。这样处理图像会存在以下两个问题：</p>\n<ul>\n<li><strong>参数太多</strong>：如果输入图像大小为 100×100×3，在全连接前馈网络中，第一个隐藏层的每个神经元与输入层都有 100×100×3=30000 个互相独立的连接，每个连接涉及到一个权重，值得注意的是，这还是一张很小的图片。随着隐藏层的神经元数目增多，参数的规模会急剧增大，同时使用全连接前馈神经网络来训练是十分低效的，且容易产生过拟合。</li>\n<li><strong>图片的局部不变性</strong>：自然图像中的物体都具有局部不变的特性，即图片的语义信息不会随着物体的平移，选择，缩放等操作而被影响。全连接前馈神经网络很难提取这些局部不变的特性。</li>\n</ul>\n<p>卷积神经网络的灵感<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>来自于动物视觉皮层组织的神经连接方式。单个神经元只对有限区域内的刺激作出反应，不同神经元的感知区域相互重叠从而覆盖整个视野。</p>\n<h1 id=\"related-knowledge\"><a class=\"anchor\" href=\"#related-knowledge\">#</a> Related knowledge</h1>\n<h1 id=\"lenet-5\"><a class=\"anchor\" href=\"#lenet-5\">#</a> LeNet-5</h1>\n<h1 id=\"alexnet\"><a class=\"anchor\" href=\"#alexnet\">#</a> AlexNet</h1>\n<h1 id=\"vgg\"><a class=\"anchor\" href=\"#vgg\">#</a> VGG</h1>\n<h1 id=\"nin\"><a class=\"anchor\" href=\"#nin\">#</a> NIN</h1>\n<h1 id=\"googlenet\"><a class=\"anchor\" href=\"#googlenet\">#</a> GoogLeNet</h1>\n<h2 id=\"introduction\"><a class=\"anchor\" href=\"#introduction\">#</a> Introduction</h2>\n<p>在 2014 年的 ImageNet 图像识别挑战赛中，一个名叫<strong> GoogLeNet</strong><sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup> 的网络架构大放异彩。 <strong>GoogLeNet</strong> 吸收了<strong> NiN</strong> 中串联网络的思想，并在此基础上做了改进。</p>\n<p>在卷积网络中，如何设置卷积核大小是一个十分关键的问题。毕竟，以前流行的网络使用小到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1×1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，大到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>11</mn><mo>×</mo><mn>11</mn></mrow><annotation encoding=\"application/x-tex\">11×11</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">1</span></span></span></span> 的卷积核。对此，在我们设计卷积网络时，选择怎么样的卷积核的有效合适的呢？ <strong>GoogLeNet</strong> 则认为不同大小的卷积核对于信息的提取作用是不同的，固使用不同大小的卷积核组合是有利的（增加网络宽度）。<strong>GoogLeNet</strong> 引入<strong> Inception</strong> 模块，每个<strong> Inception</strong> 模块是由多个不同大小的卷积层和池化层组合而成的，它通过不同窗口形状的卷积层和最大汇聚层来并行抽取信息，<strong>GoogLeNet/Inception 网络</strong>则是由多个<strong> Inception</strong> 模块拼接而成。<strong>Inception</strong> 网络有多个版本（Inception V2、Inception V3、Inception V4 等），其中最早的<strong> Inception v1</strong> 就是非常著名的 GoogLeNet，其在 2014 年的 ImageNet 图像识别挑战赛中获得了冠军。</p>\n<h2 id=\"inception-v1\"><a class=\"anchor\" href=\"#inception-v1\">#</a> Inception V1</h2>\n<p><strong>Inception v1</strong> 模块<sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup>由四组平行的特征抽取方式组合而成，分别是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mtext>、</mtext><mn>3</mn><mo>×</mo><mn>3</mn><mtext>、</mtext><mn>5</mn><mo>×</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">1×1、3×3、5×5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span> 的卷积和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>×</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3×3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span> 的最大池化层，如图（a）。同时为了较少模型参数和计算的复杂度，分别在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>×</mo><mn>3</mn><mtext>、</mtext><mn>5</mn><mo>×</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">3×3、5×5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span> 的卷积下方和最大池化层的上方引入了一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1×1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 的卷积，以此来减少通道数，如图（b）。</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1×1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 卷积核的作用：</p>\n<ol>\n<li>特征提取（提取与空间无关的特性信息）</li>\n<li>降低通道数（压缩降维），以此达到减少模型参数与计算复杂度。这种思想称为 Pointwise Conv（PW）</li>\n</ol>\n</blockquote>\n<p><a href=\"https://imgse.com/i/pPd7JK0\"><img data-src=\"https://s1.ax1x.com/2023/08/30/pPd7JK0.png\" alt=\"pPd7JK0.png\" /></a></p>\n<h3 id=\"inceptionv1-coding\"><a class=\"anchor\" href=\"#inceptionv1-coding\">#</a> InceptionV1 Coding</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">as</span> nn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BasicConv2d</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> in_channels<span class=\"token punctuation\">,</span> out_channels<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>BasicConv2d<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>conv <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>in_channels<span class=\"token punctuation\">,</span> out_channels<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>relu <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">InceptionV1</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> in_channels<span class=\"token punctuation\">,</span> channels1<span class=\"token punctuation\">,</span> channels2<span class=\"token punctuation\">,</span> channels3<span class=\"token punctuation\">,</span> channels4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>InceptionV1<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\"># 线路 1，单 1x1 卷积层</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        self<span class=\"token punctuation\">.</span>branch1 <span class=\"token operator\">=</span> BasicConv2d<span class=\"token punctuation\">(</span>in_channels<span class=\"token punctuation\">,</span> channels1<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\"># 线路 2，1x1 卷积层后接 3x3 卷积层</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        self<span class=\"token punctuation\">.</span>branch2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            BasicConv2d<span class=\"token punctuation\">(</span>in_channels<span class=\"token punctuation\">,</span> channels2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            BasicConv2d<span class=\"token punctuation\">(</span>channels2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> channels2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\"># 线路 3，1x1 卷积层后接 5x5 卷积层</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        self<span class=\"token punctuation\">.</span>branch3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            BasicConv2d<span class=\"token punctuation\">(</span>in_channels<span class=\"token punctuation\">,</span> channels3<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            BasicConv2d<span class=\"token punctuation\">(</span>channels3<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> channels3<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\"># 线路 4，3x3 最大汇聚层后接 1x1 卷积层</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        self<span class=\"token punctuation\">.</span>branch4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            BasicConv2d<span class=\"token punctuation\">(</span>in_channels<span class=\"token punctuation\">,</span> channels4<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        branch1 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>branch1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        branch2 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>branch2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        branch3 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>branch3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        branch4 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>branch4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>branch1<span class=\"token punctuation\">,</span> branch2<span class=\"token punctuation\">,</span> branch3<span class=\"token punctuation\">,</span> branch4<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如下图是<strong> GoogLeNet</strong> 架构，其由 9 个<strong> Inception v1</strong> 模块和 5 个池化层和一些全连接层组成，总共 22 层网络，大致可以分成如下五个模块：</p>\n<p>[<img data-src=\"https://zh-v2.d2l.ai/_images/inception-full.svg\" alt=\"pPd7JK0.png\" /></p>\n<ul>\n<li><strong>模块一</strong>：一个卷积层；<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>64</mn></mrow><annotation encoding=\"application/x-tex\">64</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span></span></span></span> 个通道、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7</mn><mo>×</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">7×7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span></span></span></span> 卷积层</li>\n<li><strong>模块二</strong>：两个卷积层；64 个通道、1×1 卷积层和 192 通道、3×3 卷积层</li>\n<li><strong>模块三</strong>：两个 Inception 块：\n<ul>\n<li>第一个 Inception 块的输出通道数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>64</mn><mo>+</mo><mn>128</mn><mo>+</mo><mn>32</mn><mo>+</mo><mn>32</mn><mo>=</mo><mn>256</mn></mrow><annotation encoding=\"application/x-tex\">64+128+32+32=256</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span></span></span></span>，四个路径之间的输出通道数量比为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>64</mn><mo>:</mo><mn>128</mn><mo>:</mo><mn>32</mn><mo>:</mo><mn>32</mn><mo>=</mo><mn>2</mn><mo>:</mo><mn>4</mn><mo>:</mo><mn>1</mn><mo>:</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">64:128:32:32=2:4:1:1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li>第二个 Inception 块的输出通道数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>128</mn><mo>+</mo><mn>192</mn><mo>+</mo><mn>96</mn><mo>+</mo><mn>64</mn><mo>=</mo><mn>480</mn></mrow><annotation encoding=\"application/x-tex\">128+192+96+64=480</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">9</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mord\">0</span></span></span></span>，四个路径之间的输出通道数量比为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>128</mn><mo>:</mo><mn>192</mn><mo>:</mo><mn>96</mn><mo>:</mo><mn>64</mn><mo>=</mo><mn>4</mn><mo>:</mo><mn>6</mn><mo>:</mo><mn>3</mn><mo>:</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">128:192:96:64=4:6:3:2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">9</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>。</li>\n</ul>\n</li>\n<li><strong>模块四</strong>：五个 Inception 块：\n<ul>\n<li>第一个 Inception 块的输出通道数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>192</mn><mo>+</mo><mn>208</mn><mo>+</mo><mn>48</mn><mo>+</mo><mn>64</mn><mo>=</mo><mn>512</mn></mrow><annotation encoding=\"application/x-tex\">192+208+48+64=512</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">2</span></span></span></span>，四个路径之间的输出通道数量比为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>192</mn><mo>:</mo><mn>208</mn><mo>:</mo><mn>48</mn><mo>:</mo><mn>64</mn><mo>=</mo><mn>12</mn><mo>:</mo><mn>13</mn><mo>:</mo><mn>3</mn><mo>:</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">192:208:48:64=12:13:3:4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span></li>\n<li>第二个 Inception 块的输出通道数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>160</mn><mo>+</mo><mn>224</mn><mo>+</mo><mn>64</mn><mo>+</mo><mn>64</mn><mo>=</mo><mn>512</mn></mrow><annotation encoding=\"application/x-tex\">160+224+64+64=512</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">2</span></span></span></span>，四个路径之间的输出通道数量比为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>160</mn><mo>:</mo><mn>224</mn><mo>:</mo><mn>64</mn><mo>:</mo><mn>64</mn><mo>=</mo><mn>5</mn><mo>:</mo><mn>7</mn><mo>:</mo><mn>2</mn><mo>:</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">160:224:64:64=5:7:2:2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></li>\n<li>第三个 Inception 块的输出通道数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>128</mn><mo>+</mo><mn>256</mn><mo>+</mo><mn>64</mn><mo>+</mo><mn>64</mn><mo>=</mo><mn>512</mn></mrow><annotation encoding=\"application/x-tex\">128+256+64+64=512</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">2</span></span></span></span>，四个路径之间的输出通道数量比为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>128</mn><mo>:</mo><mn>256</mn><mo>:</mo><mn>64</mn><mo>:</mo><mn>64</mn><mo>=</mo><mn>2</mn><mo>:</mo><mn>4</mn><mo>:</mo><mn>1</mn><mo>:</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">128:256:64:64=2:4:1:1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li>第四个 Inception 块的输出通道数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>112</mn><mo>+</mo><mn>288</mn><mo>+</mo><mn>64</mn><mo>+</mo><mn>64</mn><mo>=</mo><mn>528</mn></mrow><annotation encoding=\"application/x-tex\">112+288+64+64=528</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">2</span><span class=\"mord\">8</span></span></span></span>，四个路径之间的输出通道数量比为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>112</mn><mo>:</mo><mn>288</mn><mo>:</mo><mn>64</mn><mo>:</mo><mn>64</mn><mo>=</mo><mn>7</mn><mo>:</mo><mn>18</mn><mo>:</mo><mn>4</mn><mo>:</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">112:288:64:64=7:18:4:4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span></li>\n<li>第五个 Inception 块的输出通道数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>256</mn><mo>+</mo><mn>320</mn><mo>+</mo><mn>128</mn><mo>+</mo><mn>128</mn><mo>=</mo><mn>832</mn></mrow><annotation encoding=\"application/x-tex\">256+320+128+128=832</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span><span class=\"mord\">3</span><span class=\"mord\">2</span></span></span></span>，四个路径之间的输出通道数量比为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>256</mn><mo>:</mo><mn>320</mn><mo>:</mo><mn>128</mn><mo>:</mo><mn>128</mn><mo>=</mo><mn>4</mn><mo>:</mo><mn>5</mn><mo>:</mo><mn>2</mn><mo>:</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">256:320:128:128=4:5:2:2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></li>\n</ul>\n</li>\n<li><strong>模块五</strong>：两个 Inception 块：\n<ul>\n<li>第一个 Inception 块的输出通道数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>256</mn><mo>+</mo><mn>320</mn><mo>+</mo><mn>128</mn><mo>+</mo><mn>128</mn><mo>=</mo><mn>832</mn></mrow><annotation encoding=\"application/x-tex\">256+320+128+128=832</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span><span class=\"mord\">3</span><span class=\"mord\">2</span></span></span></span>，四个路径之间的输出通道数量比为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>256</mn><mo>:</mo><mn>320</mn><mo>:</mo><mn>128</mn><mo>:</mo><mn>128</mn><mo>=</mo><mn>4</mn><mo>:</mo><mn>5</mn><mo>:</mo><mn>2</mn><mo>:</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">256:320:128:128=4:5:2:2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></li>\n<li>第二个 Inception 块的输出通道数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>384</mn><mo>+</mo><mn>384</mn><mo>+</mo><mn>128</mn><mo>+</mo><mn>128</mn><mo>=</mo><mn>1024</mn></mrow><annotation encoding=\"application/x-tex\">384+384+128+128=1024</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span></span>，四个路径之间的输出通道数量比为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>384</mn><mo>:</mo><mn>384</mn><mo>:</mo><mn>128</mn><mo>:</mo><mn>128</mn><mo>=</mo><mn>3</mn><mo>:</mo><mn>3</mn><mo>:</mo><mn>1</mn><mo>:</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">384:384:128:128=3:3:1:1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<p><strong>需要注意的是，第五模块的后面紧跟输出层，该模块同 NiN 一样使用全局平均汇聚层，将每个通道的高和宽变成 1。 最后我们将输出变成二维数组，再接上一个输出个数为标签类别数的全连接层。</strong><br />\n<strong>同时，对于其中 Inception 块的通道数分配之比是在 ImageNet 数据集上通过大量的实验得来的。</strong></p>\n<p><img data-src=\"https://nndl.github.io/v/cnn-googlenet.png\" alt=\"\" /></p>\n<p><a href=\"https://imgse.com/i/pPdcv8O\"><img data-src=\"https://s1.ax1x.com/2023/08/30/pPdcv8O.png\" alt=\"pPdcv8O.png\" /></a></p>\n<h3 id=\"googlenet-coding\"><a class=\"anchor\" href=\"#googlenet-coding\">#</a> GoogLeNet Coding</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>functional <span class=\"token keyword\">as</span> F</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalAvgPool2d</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>GlobalAvgPool2d<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\"># 池化窗口形状等于输入图像的形状</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> nn<span class=\"token punctuation\">.</span>functional<span class=\"token punctuation\">.</span>avg_pool2d<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GoogLeNetModelV1</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num_class<span class=\"token punctuation\">,</span> aux_classifier<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>GoogLeNetModelV1<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>aux_classifier <span class=\"token operator\">=</span> aux_classifier</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\"># 模块一</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        self<span class=\"token punctuation\">.</span>b1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            BasicConv2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\"># 模块二</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        self<span class=\"token punctuation\">.</span>b2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\"># 模块三</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        self<span class=\"token punctuation\">.</span>b3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            InceptionV1<span class=\"token punctuation\">(</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            InceptionV1<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\"># 模块四</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        self<span class=\"token punctuation\">.</span>b4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            InceptionV1<span class=\"token punctuation\">(</span><span class=\"token number\">480</span><span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">208</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            InceptionV1<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">112</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            InceptionV1<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            InceptionV1<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">112</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">144</span><span class=\"token punctuation\">,</span> <span class=\"token number\">288</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            InceptionV1<span class=\"token punctuation\">(</span><span class=\"token number\">528</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token number\">320</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t    <span class=\"token comment\"># 模块五</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        self<span class=\"token punctuation\">.</span>b5 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            InceptionV1<span class=\"token punctuation\">(</span><span class=\"token number\">832</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token number\">320</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            InceptionV1<span class=\"token punctuation\">(</span><span class=\"token number\">832</span><span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            GlobalAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\"># 全连接层</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        self<span class=\"token punctuation\">.</span>fc <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> num_class<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        batch_size <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>b1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>b2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>b3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>b4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>b5<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        x <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span>log_softmax<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span> x</pre></td></tr></table></figure><h2 id=\"inception-v2\"><a class=\"anchor\" href=\"#inception-v2\">#</a> Inception V2</h2>\n<h1 id=\"resnet\"><a class=\"anchor\" href=\"#resnet\">#</a> ResNet</h1>\n<h1 id=\"参考文献\"><a class=\"anchor\" href=\"#参考文献\">#</a> 参考文献</h1>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>[邱锡鹏。神经网络与深度学习 [M]. 机械工业出版社，2020](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25uZGwvbm5kbC5naXRodWIuaW8vYmxvYi9tYXN0ZXIvbm5kbC1ib29rLnBkZg==\">nndl.github.io/nndl-book.pdf at master · nndl/nndl.github.io · GitHub</span>) <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JThEJUI3JUU3JUE3JUFGJUU3JUE1JTlFJUU3JUJCJThGJUU3JUJEJTkxJUU3JUJCJTlD\">卷积神经网络 - 维基百科，自由的百科全书</span> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>[C. Szegedy et al., &quot;Going deeper with convolutions,&quot; 2015 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), Boston, MA, USA, 2015, pp. 1-9, doi: 10.1109/CVPR.2015.7298594](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pZWVleHBsb3JlLmllZWUub3JnL2RvY3VtZW50LzcyOTg1OTQ=\">Going deeper with convolutions | IEEE Conference Publication | IEEE Xplore</span>) <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p>[(Zhang A, Lipton Z C, Li M, et al. Dive into deep learning[J]. arXiv preprint arXiv:2106.11342, 2021)](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25uZGwvbm5kbC5naXRodWIuaW8vYmxvYi9tYXN0ZXIvbm5kbC1ib29rLnBkZg==\">nndl.github.io/nndl-book.pdf at master · nndl/nndl.github.io · GitHub</span>) <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "CNN"
            ]
        },
        {
            "id": "http://example.com/value/Graident%20descent",
            "url": "http://example.com/value/Graident%20descent",
            "title": "梯度下降",
            "date_published": "2023-07-25T06:34:33.109Z",
            "content_html": "<h1 id=\"背景介绍\"><a class=\"anchor\" href=\"#背景介绍\">#</a> 背景介绍</h1>\n<h1 id=\"梯度下降法\"><a class=\"anchor\" href=\"#梯度下降法\">#</a> 梯度下降法</h1>\n<p>与最小二乘法类似，梯度下降法也是一种常用的数学优最化方法，即求解函数的最值问题。</p>\n",
            "tags": [
                "mathematics"
            ]
        },
        {
            "id": "http://example.com/value/ns3%20install",
            "url": "http://example.com/value/ns3%20install",
            "title": "ns3 install",
            "date_published": "2023-07-24T09:31:20.649Z",
            "content_html": "<h1 id=\"ns-3介绍\"><a class=\"anchor\" href=\"#ns-3介绍\">#</a> NS-3 介绍</h1>\n<blockquote>\n<p>The ns-3 project, started in 2006, is an open-source project developing ns-3.</p>\n</blockquote>\n<p>ns3 全称：Network Simulator3（<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5uc25hbS5vcmcv\">官方网址</span>）. 其是一个离散事件驱动的网络仿真器，全部采用 C++ 语言编写，也支持 Python 开进行开发。主要在 Linux 平台上运行.</p>\n<h1 id=\"官方资料\"><a class=\"anchor\" href=\"#官方资料\">#</a> 官方资料</h1>\n<p>Primary documentation for the ns-3 project is available in five forms:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnNuYW0ub3JnL2RveHlnZW4vaW5kZXguaHRtbA==\">ns-3 Doxygen</span>: Documentation of the public APIs of the simulator</li>\n<li>Tutorial (this document), Manual, and Model Library for the <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnNuYW0ub3JnL3JlbGVhc2VzL25zLTMtMzcvZG9jdW1lbnRhdGlvbi8=\">latest release</span> and <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnNuYW0ub3JnL2RvY3VtZW50YXRpb24vZGV2ZWxvcG1lbnQtdHJlZS8=\">development tree</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnNuYW0ub3JnL3dpa2k=\">ns-3 wiki</span></li>\n</ul>\n<h1 id=\"ns-3安装\"><a class=\"anchor\" href=\"#ns-3安装\">#</a> NS-3 安装</h1>\n<p>系统为 <code>Ubuntu 20.04</code> ，安装 <code>ns-allinone-3.30.1</code></p>\n<h2 id=\"视频教程\"><a class=\"anchor\" href=\"#视频教程\">#</a> 视频教程</h2>\n<p><iframe src=\"https://www.bilibili.com/video/BV1qY411z7xf/?spm_id_from=333.999.list.card_archive.click&vd_source=3fcaa496344353723a1ec0ea3d01041e\" width=\"2000\" height=\"550\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></p>\n<p>视频链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXFZNDExejd4Zi8/c2hhcmVfc291cmNlPWNvcHlfd2ViJmFtcDt2ZF9zb3VyY2U9ZjMwZDQ3MTA1YjNiZGM4ZjVhMjRhYzQ0ZWI3M2Y1OGE=\">【Installation tutorial --- NS3】</span></p>\n<h2 id=\"参考文档\"><a class=\"anchor\" href=\"#参考文档\">#</a> 参考文档</h2>\n<h3 id=\"依赖包安装\"><a class=\"anchor\" href=\"#依赖包安装\">#</a> 依赖包安装</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> g++ python3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> autoremove</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> python3-dev pkg-config sqlite3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> python3-setuptools <span class=\"token function\">git</span> mercurial</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> qt5-default mercurial</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> gir1.2-goocanvas-2.0 python-gi python-gi-cairo python-pygraphviz python3-gi python3-gi-cairo python3-pygraphviz gir1.2-gtk-3.0 ipython ipython3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> openmpi-bin openmpi-common openmpi-doc libopenmpi-dev</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> autoconf cvs bzr <span class=\"token function\">unrar</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> gdb valgrind</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> uncrustify</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> doxygen graphviz imagemagick</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> texlive texlive-extra-utils texlive-latex-extra texlive-font-utils dvipng latexmk</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> python3-sphinx dia</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> gsl-bin libgsl-dev libgsl23 libgslcblas0</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> tcpdump</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> sqlite sqlite3 libsqlite3-dev</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libxml2 libxml2-dev</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> cmake libc6-dev libc6-dev-i386 libclang-6.0-dev llvm-6.0-dev automake python3-pip</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libgtk-3-dev</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> vtun lxc uml-utilities</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libboost-filesystem-dev</pre></td></tr></table></figure><h3 id=\"ns-3安装-2\"><a class=\"anchor\" href=\"#ns-3安装-2\">#</a> ns-3 安装</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> workspace</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> workspace</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">wget</span> https://www.nsnam.org/release/ns-allinone-3.30.tar.bz2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">tar</span> xjf ns-allinone-3.30.tar.bz2 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">rm</span> ns-allinone-3.30.tar.bz2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ns-allinone-3.30</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sudo</span> ./build.py --enable-examples --enable-tests</pre></td></tr></table></figure><h3 id=\"软件无法定位解决方法\"><a class=\"anchor\" href=\"#软件无法定位解决方法\">#</a> 软件无法定位解决方法</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcmlja2kvcC8xNDkwNDc3My5odG1s\">解决方案</span></p>\n<h3 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h3>\n<p>首次编译通过 <code>build.py</code>  来完成，其编译后的目录下方的 <code>waf</code>  命令脚本就可以使用。当对源代码进行修改之后，需要 <code>./waf configure</code>  来对源代码进行重新编译。<br />\n配置选项</p>\n<ul>\n<li><code>--enable-examples</code> ：同时编译目录下方的示例脚本（主目录下方和 <code>src</code>  下方的示例脚本）</li>\n<li><code>--enable-test</code> ：同时编译 <code>src</code>  下方的测试脚本</li>\n<li><code>--build-profile</code> ：修改编译模式（ <code>debug</code>  或 <code>optimized</code> ）<br />\nns-3 有两种编译模式，分别是 <code>debug</code>  和 <code>optimized</code>  模式， <code>debug</code>  模式为默认模式，当需要切换模式时，首先需要清除之前的编译结果：<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./waf clean</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./waf configure --build-profile<span class=\"token operator\">=</span>optimized</pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "install"
            ]
        },
        {
            "id": "http://example.com/value/Markdown%20grammar",
            "url": "http://example.com/value/Markdown%20grammar",
            "title": "Markdown语法",
            "date_published": "2023-07-24T08:15:12.097Z",
            "content_html": "<h1 id=\"markdown介绍\"><a class=\"anchor\" href=\"#markdown介绍\">#</a> Markdown 介绍</h1>\n<p><strong>Markdown</strong> 是一种<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUJEJUJCJUU5JTg3JThGJUU3JUJBJUE3JUU2JUEwJTg3JUU4JUFFJUIwJUU4JUFGJUFEJUU4JUE4JTgw\">轻量级标记语言</span>，由<em><strong>约翰・格鲁伯</strong></em>（左）于 2004 创建（在语法上与<em><strong>亚伦・斯沃茨</strong></em>（右）有合作）. 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 <code>HTML</code>  文档。其中最重要的设计是可读性，也就是说这个语言应该要能直接在字面上阅读，而不用记忆格式化指令标记（像是 <code>RTF</code>  与 HTML）. 由于 Markdown 的轻量化、易读易写特性，并且对于图片、图表、数学式都有支持，目前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。如 <code>GitHub</code> 、 <code>Reddit</code> 、 <code>Discord</code> 、 <code>OpenStreetMap</code>  、 <code>CSDN</code> 、 <code>简书</code> 等，甚至还能被用来撰写电子书.</p>\n<p><a href=\"https://imgse.com/i/pCOF5kD\"><img data-src=\"https://s1.ax1x.com/2023/07/24/pCOF5kD.md.png\" alt=\"pCOF5kD.md.png\" /></a></p>\n<h1 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h1>\n<h2 id=\"标题\"><a class=\"anchor\" href=\"#标题\">#</a> 标题</h2>\n<p>Markdown 支持六级标题，要使用几级标题即在标题前方加上相应数目的 <code>#</code> （兼容性：标题与 <code>#</code> 之间添加空格）, 例如三级标题 <code>###</code> .</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">#</span> Heading lebel 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">##</span> Heading lebel 2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">###</span> Heading lebel 3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">####</span> Heading lebel 4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">#####</span> Heading lebel 5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">######</span> Heading lebel 6</span></pre></td></tr></table></figure><ul>\n<li><code>Ctrl 1~6</code>  可将对应的文本设置成相应级别的标题， <code>Ctrl + 0</code>  将文本设成正文</li>\n<li><code>Ctrl +</code>  或  <code>Ctrl -</code>  将相应的标题进行升级或者降级</li>\n</ul>\n<h2 id=\"段落与换行\"><a class=\"anchor\" href=\"#段落与换行\">#</a> 段落与换行</h2>\n<p>使用空白行或多行文本进行分割。需要注意的是 ' 回车 ' 和 <code>Shift 回车</code> 不同，前者的行间距更小。同时 Markdown 并不建议使用空格（spaces）或制表符（ tabs）来缩进段落.</p>\n<h2 id=\"强调语法\"><a class=\"anchor\" href=\"#强调语法\">#</a> 强调语法</h2>\n<ul>\n<li>\n<p>粗体：在需要加粗的单词或者短语的前后各添加 <code>**</code>  或者 <code>__</code> （两个下划线）. <strong>Here</strong>. <strong>快捷键</strong> ——  选中文本， <code>Ctrl b</code></p>\n</li>\n<li>\n<p>斜体：在需要用斜体的文本的前后各添加 <code>*</code>  或者 <code>_</code> （一个下划线）. <em>Here</em>. <strong>快捷键</strong> —— 选中文本， <code>Ctrl L</code></p>\n</li>\n<li>\n<p>下划线：将需要使用下划线的文本放置于 <code>&lt;u&gt;&lt;/u&gt;</code>  标签对内. &lt;u&gt;Here&lt;/u&gt;. <strong>快捷键</strong> —— 选中文本， <code> Ctrl u</code></p>\n</li>\n<li>\n<p>高亮：对需要使用的高亮文本前后分别添加 <code>==</code> . <mark>Here</mark>.</p>\n</li>\n<li>\n<p>删除线：对需要使用的删除线的文本前后分别添加 <code>~~</code> . <s>Here</s>. <strong>快捷键</strong> —— 选中文本， <code>SHift Alt 5</code></p>\n</li>\n</ul>\n<h2 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h2>\n<ul>\n<li>有序列表：要创建有序列表，在每个列表项前添加数字并紧跟一个英文句点 ( <code>.</code> ). 数字不必按数学顺序排列，但是列表应当以数字 1 起始.</li>\n<li>无须列表：要创建无序列表，在每个列表项前添加 <code>-</code> 、 <code>*</code>  或 <code>+</code>  并紧跟一个空格。可以通过缩进的方式来创建嵌套列表 ( <code>Tab</code> ).</li>\n<li>任务列表：要创建无序列表，在每个列表项前添加 <code>- [ ] </code> ( <code>-</code>  空格 <code>[</code> 空格 <code>]</code>  空格).</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>有序列表：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> item 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> item 2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> item 3</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>无序列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">-</span> item 1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">-</span> item 2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">-</span> item 3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>任务列表</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">-</span> [ ] task1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">-</span> [x] task2</pre></td></tr></table></figure><h2 id=\"引用\"><a class=\"anchor\" href=\"#引用\">#</a> 引用</h2>\n<p>要创建块引用，请在段落前添加一个  <code>&gt;</code>  符号。引用可以包含多个段落，需要为每个段落之间空白行添加一个  <code>&gt;</code>  符号。引用可以和其他语法嵌套使用，当绕也可以可以引用嵌套使用.</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token blockquote punctuation\">></span> 第一是生活，第二是生活，第三还是生活，没有生活，爱便没有附丽。                        \t         ——  鲁迅</pre></td></tr></table></figure><blockquote>\n<p>第一是生活，第二是生活，第三还是生活，没有生活，爱便没有附丽。                        \t         ——  鲁迅</p>\n</blockquote>\n<h2 id=\"代码块\"><a class=\"anchor\" href=\"#代码块\">#</a> 代码块</h2>\n<p>要将单词或短语表示为代码，请将其包裹在反引号 ( <code>\\``) 中. 代码块放置于三个</code>  ` <code>内. **快捷键**  ——  选中代码块 </code> Ctrl Shift k`</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token code\"><span class=\"token punctuation\">```</span><span class=\"token code-language\">cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token code-block language-cpp\">#include &lt;iostream></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>int main()&#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout &lt;&lt; \"Hello World\" &lt;&lt; endl;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    return 0;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">```</span></span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"链接\"><a class=\"anchor\" href=\"#链接\">#</a> 链接</h2>\n<p>链接语法： <code>[Value's Blog](https://special-jiahao.github.io/)</code> , 链接文本放在中括号内，链接地址放在后面的括号中。链接 title 是当鼠标悬停在链接上时会出现的文字，这个 title 是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔。链接地址也可以为邮箱地址. <strong>快捷键</strong>  ——  选中代码块  <code>Ctrl K</code></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token url\">[<span class=\"token content\">Value's Blog</span>](<span class=\"token url\">https://special-jiahao.github.io/</span> <span class=\"token string\">\"Value's blog\"</span>)</span></pre></td></tr></table></figure><p>渲染效果：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGVjaWFsLWppYWhhby5naXRodWIuaW8v\">Value's Blog</span></p>\n<p>同样链接功能不仅仅可以实现站外链接，还可以实现站内链接。实现方式如下:</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>跳转至基本语法：<span class=\"token url\">[<span class=\"token content\">Click me</span>](<span class=\"token url\">#基本语法</span>)</span>    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                            ↑手动删除#与文字之间的空格</pre></td></tr></table></figure><p>跳转至基本语法：<a href=\"#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\">Click me</a></p>\n<h2 id=\"分割线\"><a class=\"anchor\" href=\"#分割线\">#</a> 分割线</h2>\n<p>要创建分隔线，需要再单独一行上使用三个或多个星号 ( <code>***</code> )、破折号 ( <code>---</code> ) 或下划线 ( <code>___</code> ) , 并且不能包含其他内容。渲染效果如下所示：</p>\n<hr />\n<h2 id=\"图片\"><a class=\"anchor\" href=\"#图片\">#</a> 图片</h2>\n<p>图片语法： <code>![this is a picture](&quot;picture url&quot; &quot;title&quot;)(skip url)</code> . 要添加图像，请使用感叹号 ( <code>!</code> ),  然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。如果需要为图片添加跳转链接，在 <code>skip url</code>  内填入指定的链接地址. <strong>快捷键</strong>  ——   <code>Ctrl Shift I</code> .</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token url\">[<span class=\"token content\">![</span>](<span class=\"token url\">https://s1.ax1x.com/2023/07/24/pCOelT0.md.jpg</span> <span class=\"token string\">\"万家灯火\"</span>)</span>](https://special-jiahao.github.io/)</pre></td></tr></table></figure><p><a href=\"https://special-jiahao.github.io/\"><img data-src=\"https://s1.ax1x.com/2023/07/24/pCOelT0.md.jpg\" alt=\"\" title=\"万家灯火\" /></a></p>\n<h2 id=\"脚注\"><a class=\"anchor\" href=\"#脚注\">#</a> 脚注</h2>\n<h2 id=\"表格\"><a class=\"anchor\" href=\"#表格\">#</a> 表格</h2>\n<h2 id=\"流程图\"><a class=\"anchor\" href=\"#流程图\">#</a> 流程图</h2>\n",
            "tags": [
                "语法"
            ]
        },
        {
            "id": "http://example.com/value/least%20squares%20method",
            "url": "http://example.com/value/least%20squares%20method",
            "title": "最小二乘法",
            "date_published": "2023-07-24T02:53:12.347Z",
            "content_html": "<h1 id=\"背景介绍\"><a class=\"anchor\" href=\"#背景介绍\">#</a> 背景介绍</h1>\n<p><strong>最小二乘法</strong>（英语：least squares method），又称<strong>最小平方法</strong>，是一种数学优化建模方法。它通过最小化误差的平方和（均方误差，mean square error, MSE）寻找数据的最佳函数匹配，以此可以简便的求得未知的数据。其最重要的应用是在<strong>曲线拟合</strong>上。<br />\n最小平方法通常归功于<em><strong>高斯</strong></em>（Carl Friedrich Gauss，1795），但最小平方法是由<em><strong>阿德里安 - 马里・勒让德</strong></em>（Adrien-Marie Legendre）首先发表的。</p>\n<h1 id=\"最小二乘法\"><a class=\"anchor\" href=\"#最小二乘法\">#</a> 最小二乘法</h1>\n<h2 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h2>\n<p>下文将以线性函数来对样本<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">Sample</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span></span></span></span> 进行拟合为例，来说明最小二乘法。同时未经特别说明，文中所有的向量均为列向量（粗体）。</p>\n<p><strong>输入描述</strong>：m 个样本<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mo stretchy=\"false\">(</mo><mi><msup><mi mathvariant=\"bold-italic\">x</mi><mrow><mo stretchy=\"false\">(</mo><mn mathvariant=\"bold\">1</mn><mo stretchy=\"false\">)</mo></mrow></msup></mi><msup><mo stretchy=\"false\">)</mo><mi>T</mi></msup><mo separator=\"true\">,</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi><msup><mi mathvariant=\"bold-italic\">x</mi><mrow><mo stretchy=\"false\">(</mo><mn mathvariant=\"bold\">2</mn><mo stretchy=\"false\">)</mo></mrow></msup></mi><msup><mo stretchy=\"false\">)</mo><mi>T</mi></msup><mo separator=\"true\">,</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></msup><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi><msup><mi mathvariant=\"bold-italic\">x</mi><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">m</mi><mo stretchy=\"false\">)</mo></mrow></msup></mi><msup><mo stretchy=\"false\">)</mo><mi>T</mi></msup><mo separator=\"true\">,</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Sample = \\{(\\boldsymbol{x^{(1)}})^{T}, y^{(1)}), (\\boldsymbol{x^{(2)}})^{T}, y^{(2)},\\cdots, (\\boldsymbol{x^{(m)}})^{T}, y^{(m)})\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord mathbf mtight\">1</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord mathbf mtight\">2</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord boldsymbol mtight\">m</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mclose\">}</span></span></span></span>. 找到一条曲线使得其可以尽可能的接近所以样本点（平均接近）. 对于样本点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">y^{(i)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0824399999999998em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span> 表示其函数值，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"bold\">x</mi><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold\">i</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{x^{(i)}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathbf mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span></span> 为自变量，不妨设其维度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>，即有：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi><msup><mi mathvariant=\"bold-italic\">x</mi><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">i</mi><mo stretchy=\"false\">)</mo></mrow></msup></mi><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mi>n</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\boldsymbol{x^{(i)}} = \\left[\\begin{array}{c}\n\t\t\t\t\tx_{1}^{(i)} \\\\\n\t\t\t\t\tx_{2}^{(i)} \\\\\n\t\t\t\t\t\\vdots \\\\\n\t\t\t\t\tx_{n}^{(i)} \\\\\n\t\t\t\t\t\\end{array}\\right]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.938em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord boldsymbol mtight\">i</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:6.0744em;vertical-align:-2.7872em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2872em;\"><span style=\"top:-5.9299em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.525099999999999em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.6651000000000002em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.2603000000000002em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.5834080000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.11659199999999997em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7872em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p><strong>目标函数</strong>：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable width=\"100%\"><mtr><mtd width=\"50%\"></mtd><mtd><mrow><msub><mi>f</mi><mi mathvariant=\"bold-italic\">θ</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>θ</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center center center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>θ</mi><mn>0</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>θ</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>θ</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>x</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>x</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mo>=</mo><msup><mi mathvariant=\"bold-italic\">θ</mi><mi>T</mi></msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover></mrow></mtd><mtd width=\"50%\"></mtd><mtd><mtext>(1)</mtext></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">f_{\\boldsymbol{\\theta}}(\\boldsymbol{x})= \\theta_{0}+\\theta_{1}x_{1}+\\cdots+\\theta_{n}x_{n}=\n\t\t\\left[\\begin{array}{cccc}\n\t\t\t\\theta_{0} &amp; \\theta_{1} &amp; \\cdots &amp; \\theta_{n}\n\t\t\\end{array}\\right] \n\t\t\\left[\\begin{array}{c}\n\t\t\t1 \\\\\n\t\t\tx_{1} \\\\\n\t\t\t\\vdots \\\\\n\t\t\tx_{n} \\\\\n\t\t\\end{array}\\right] = \\boldsymbol{\\theta}^{T}\\hat{\\boldsymbol{x}} \\tag{1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\" style=\"margin-right:0.03194em;\">θ</span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:5.459999999999999em;vertical-align:-2.4799999999999995em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"minner\">⋯</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">]</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.953995em;\"><span style=\"top:-1.3499850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.4999850000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.0959850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.6919850000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.712975em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.953995em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.4500349999999997em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.9799999999999995em;\"><span style=\"top:-5.8275em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-4.6275em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.7674999999999996em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.5675000000000006em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.4799999999999995em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.953995em;\"><span style=\"top:-1.3499850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.4999850000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.0959850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.6919850000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.712975em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.953995em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.4500349999999997em;\"><span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9256709999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9256709999999999em;\"><span style=\"top:-3.1473400000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span><span class=\"tag\"><span class=\"strut\" style=\"height:5.459999999999999em;vertical-align:-2.4799999999999995em;\"></span><span class=\"mord text\"><span class=\"mord\">(</span><span class=\"mord\"><span class=\"mord\">1</span></span><span class=\"mord\">)</span></span></span></span></span></span></p>\n<p>对每个样本自变量添加一个维度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_{0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>， 并且所以的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x_{0} = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>。即输入样本<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mrow><mi>S</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi></mrow><mo>^</mo></mover><mo>=</mo><mo stretchy=\"false\">{</mo><mo stretchy=\"false\">(</mo><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mn mathvariant=\"bold\">1</mn><mo stretchy=\"false\">)</mo></mrow></msup></mi><msup><mo stretchy=\"false\">)</mo><mi>T</mi></msup><mo separator=\"true\">,</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mn mathvariant=\"bold\">2</mn><mo stretchy=\"false\">)</mo></mrow></msup></mi><msup><mo stretchy=\"false\">)</mo><mi>T</mi></msup><mo separator=\"true\">,</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></msup><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">m</mi><mo stretchy=\"false\">)</mo></mrow></msup></mi><msup><mo stretchy=\"false\">)</mo><mi>T</mi></msup><mo separator=\"true\">,</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\hat{Sample} = \\{(\\boldsymbol{\\hat{x}^{(1)}})^{T}, y^{(1)}), (\\boldsymbol{\\hat{x}^{(2)}})^{T}, y^{(2)},\\cdots, (\\boldsymbol{\\hat{x}^{(m)}})^{T}, y^{(m)})\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1523199999999998em;vertical-align:-0.19444em;\"></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9578799999999998em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span></span></span><span style=\"top:-3.26344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord mathbf mtight\">1</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord mathbf mtight\">2</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord boldsymbol mtight\">m</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mclose\">}</span></span></span></span></p>\n<p><strong>损失函数</strong>：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable width=\"100%\"><mtr><mtd width=\"50%\"></mtd><mtd><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi><mrow><mi mathvariant=\"bold-italic\">θ</mi><mo stretchy=\"false\">)</mo></mrow></mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mo stretchy=\"false\">(</mo><msub><mi>f</mi><mi mathvariant=\"bold-italic\">θ</mi></msub><mo stretchy=\"false\">(</mo><mi><msup><mi mathvariant=\"bold-italic\">x</mi><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">i</mi><mo stretchy=\"false\">)</mo></mrow></msup></mi><mo stretchy=\"false\">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"bold-italic\">θ</mi><mi>T</mi></msup><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">i</mi><mo stretchy=\"false\">)</mo></mrow></msup></mi><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow></mtd><mtd width=\"50%\"></mtd><mtd><mtext>(2)</mtext></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">L(\\boldsymbol{\\theta)} = \\sum_{i=1}^{m} (f_{\\boldsymbol{\\theta}}(\\boldsymbol{x^{(i)}}) - y^{(i)})^{2} = \n\t\\sum_{i=1}^{m} (\\boldsymbol{\\theta}^{T}\\boldsymbol{\\hat{x}^{(i)}} - y^{(i)})^{2} \\tag{2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span><span class=\"mclose mathbf\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\" style=\"margin-right:0.03194em;\">θ</span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord boldsymbol mtight\">i</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9256709999999999em;\"><span style=\"top:-3.1473400000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord boldsymbol mtight\">i</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span class=\"tag\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"mord text\"><span class=\"mord\">(</span><span class=\"mord\"><span class=\"mord\">2</span></span><span class=\"mord\">)</span></span></span></span></span></span></p>\n<p>在损失函数最小的情况下，求解相应的参数值，即<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>θ</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\theta_{0}, \\theta_{1}, \\cdots, \\theta_{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"代数求解法\"><a class=\"anchor\" href=\"#代数求解法\">#</a> 代数求解法</h2>\n<p>要使得损失函数最小，分别对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mi>j</mi></msub><mo separator=\"true\">,</mo><mi>j</mi><mo>∈</mo><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\theta_{j}, j\\in(0, 1, \\cdots, n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 进行求导，令其偏导数为 0，即：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable width=\"100%\"><mtr><mtd width=\"50%\"></mtd><mtd><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">θ</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi mathvariant=\"normal\">∂</mi><msub><mi>θ</mi><mi>j</mi></msub></mrow></mfrac><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence=\"true\">[</mo><mo stretchy=\"false\">(</mo><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center center center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd></mtr></mtable><mo stretchy=\"false\">)</mo><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">i</mi><mo stretchy=\"false\">)</mo></mrow></msup></mi><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"bold-italic\">θ</mi><mi>T</mi></msup><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">i</mi><mo stretchy=\"false\">)</mo></mrow></msup></mi><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">)</mo><mo fence=\"true\">]</mo></mrow><mo>=</mo><mn>2</mn><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msubsup><mi>x</mi><mi>j</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msubsup><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"bold-italic\">θ</mi><mi>T</mi></msup><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">i</mi><mo stretchy=\"false\">)</mo></mrow></msup></mi><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow></mtd><mtd width=\"50%\"></mtd><mtd><mtext>(3)</mtext></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\frac{\\partial L(\\boldsymbol{\\theta})} {\\partial \\theta_{j}} = \\sum_{i = 1}^{m}\n\\left[(\\begin{array}{cccc}\n\t0 &amp; \\cdots &amp; 1 &amp; \\cdots &amp; 0\n\\end{array})\n\\boldsymbol{\\hat{x}^{(i)}}\n(\\boldsymbol{\\theta}^{T}\\boldsymbol{\\hat{x}^{(i)}} - y^{(i)})\n\\right]\n=\n2\\sum_{i = 1}^{m}x_{j}^{(i)} (\\boldsymbol{\\theta}^{T}\\boldsymbol{\\hat{x}^{(i)}} - y^{(i)}) = 0 \\tag{3}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.399108em;vertical-align:-0.972108em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.972108em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">[</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"minner\">⋯</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"minner\">⋯</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord boldsymbol mtight\">i</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9256709999999999em;\"><span style=\"top:-3.1473400000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord boldsymbol mtight\">i</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">]</span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.412972em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9256709999999999em;\"><span style=\"top:-3.1473400000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord boldsymbol mtight\">i</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span><span class=\"tag\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"mord text\"><span class=\"mord\">(</span><span class=\"mord\"><span class=\"mord\">3</span></span><span class=\"mord\">)</span></span></span></span></span></span></p>\n<p>即可得到一个 n+1 个关于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>θ</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\theta_{0}, \\theta_{1}, \\cdots, \\theta_{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的方程组，联立方程组即可求解。这个方法同样也可以推广至非线性函数拟合，原理与上面一样，均是对每个参数求偏导为 0，然后联立方程组来求得参数值.</p>\n<h2 id=\"矩阵求解法\"><a class=\"anchor\" href=\"#矩阵求解法\">#</a> 矩阵求解法</h2>\n<p>计算机对于方程组的求解，使用的一种技巧是矩阵求解法。对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span> 整理可得：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable width=\"100%\"><mtr><mtd width=\"50%\"></mtd><mtd><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">θ</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi mathvariant=\"normal\">∂</mi><msub><mi>θ</mi><mi>j</mi></msub></mrow></mfrac><mo>=</mo><mn>2</mn><mrow><mo fence=\"true\">(</mo><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center center center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mi>j</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mi>j</mi><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mi>j</mi><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msup><mi mathvariant=\"bold-italic\">θ</mi><mi>T</mi></msup><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mn mathvariant=\"bold\">1</mn><mo stretchy=\"false\">)</mo></mrow></msup></mi><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msup><mi mathvariant=\"bold-italic\">θ</mi><mi>T</mi></msup><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mn mathvariant=\"bold\">2</mn><mo stretchy=\"false\">)</mo></mrow></msup></mi><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msup><mi mathvariant=\"bold-italic\">θ</mi><mi>T</mi></msup><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">m</mi><mo stretchy=\"false\">)</mo></mrow></msup></mi><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mo>=</mo><mn>0</mn><mspace width=\"1em\"/><mi>j</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow></mtd><mtd width=\"50%\"></mtd><mtd><mtext>(4)</mtext></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\frac{\\partial L(\\boldsymbol{\\theta})} {\\partial \\theta_{j}} = 2\n\\left(\\begin{array}{cccc}\n\tx^{(1)}_{j} &amp; x^{(2)}_{j} &amp; \\cdots &amp; x^{(m)}_{j}\n\\end{array}\\right)\n\\left[\\begin{array}{c}\n\t\\boldsymbol{\\theta}^{T}\\boldsymbol{\\hat{x}^{(1)}} - y^{(1)} \\\\\n\t\\boldsymbol{\\theta}^{T}\\boldsymbol{\\hat{x}^{(2)}} - y^{(2)} \\\\\n\t\\vdots \\\\\n\t\\boldsymbol{\\theta}^{T}\\boldsymbol{\\hat{x}^{(m)}} - y^{(m)} \\\\\n\\end{array}\\right] = 0 \\quad  j = (0, 1, \\cdots, n)    \\tag{4}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.399108em;vertical-align:-0.972108em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.972108em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:5.717013000000001em;vertical-align:-2.6085065000000003em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9788859999999999em;\"><span style=\"top:-2.978886em;\"><span class=\"pstrut\" style=\"height:3.0448em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4129719999999999em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4788859999999999em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9788859999999999em;\"><span style=\"top:-2.978886em;\"><span class=\"pstrut\" style=\"height:3.0448em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4129719999999999em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4788859999999999em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9788859999999999em;\"><span style=\"top:-2.978886em;\"><span class=\"pstrut\" style=\"height:3.0448em;\"></span><span class=\"mord\"><span class=\"minner\">⋯</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4788859999999999em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9788859999999999em;\"><span style=\"top:-2.978886em;\"><span class=\"pstrut\" style=\"height:3.0448em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4129719999999999em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4788859999999999em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.953995em;\"><span style=\"top:-1.3499850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.4999850000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.0959850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.6919850000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.712975em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.953995em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.4500349999999997em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.1085065000000003em;\"><span style=\"top:-5.8703355em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9256709999999999em;\"><span style=\"top:-3.1473400000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord mathbf mtight\">1</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-4.5846645em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9256709999999999em;\"><span style=\"top:-3.1473400000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord mathbf mtight\">2</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.7246645000000007em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.4389934999999998em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9256709999999999em;\"><span style=\"top:-3.1473400000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord boldsymbol mtight\">m</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6085065000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.953995em;\"><span style=\"top:-1.3499850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.4999850000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.0959850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.6919850000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.712975em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.953995em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.4500349999999997em;\"><span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span><span class=\"tag\"><span class=\"strut\" style=\"height:5.717013000000001em;vertical-align:-2.6085065000000003em;\"></span><span class=\"mord text\"><span class=\"mord\">(</span><span class=\"mord\"><span class=\"mord\">4</span></span><span class=\"mord\">)</span></span></span></span></span></span></p>\n<p>故将 n+1 个方程组联立可得：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable width=\"100%\"><mtr><mtd width=\"50%\"></mtd><mtd><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">θ</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi mathvariant=\"bold-italic\">θ</mi></mrow></mfrac><mo>=</mo><mn>2</mn><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center center center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mn>0</mn><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mn>0</mn><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mn>0</mn><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mi>n</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mi>n</mi><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mi>n</mi><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msup><mi mathvariant=\"bold-italic\">θ</mi><mi>T</mi></msup><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mn mathvariant=\"bold\">1</mn><mo stretchy=\"false\">)</mo></mrow></msup></mi><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msup><mi mathvariant=\"bold-italic\">θ</mi><mi>T</mi></msup><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mn mathvariant=\"bold\">2</mn><mo stretchy=\"false\">)</mo></mrow></msup></mi><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msup><mi mathvariant=\"bold-italic\">θ</mi><mi>T</mi></msup><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">m</mi><mo stretchy=\"false\">)</mo></mrow></msup></mi><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mo>=</mo><mn>2</mn><munder><mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center center center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mn>0</mn><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mn>0</mn><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mn>0</mn><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mi>n</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mi>n</mi><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msubsup><mi>x</mi><mi>n</mi><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></msubsup></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mo><mi><msup><mi mathvariant=\"bold-italic\">X</mi><mi mathvariant=\"bold-italic\">T</mi></msup></mi></munder><mrow><mo fence=\"true\">(</mo><munder><mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center center center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mn mathvariant=\"bold\">1</mn><mo stretchy=\"false\">)</mo></mrow></msup></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mn mathvariant=\"bold\">2</mn><mo stretchy=\"false\">)</mo></mrow></msup></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><msup><mover accent=\"true\"><mi mathvariant=\"bold-italic\">x</mi><mo>^</mo></mover><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">m</mi><mo stretchy=\"false\">)</mo></mrow></msup></mi></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mo><mi mathvariant=\"bold-italic\">X</mi></munder><mi mathvariant=\"bold-italic\">θ</mi><mo>−</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center center center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></msup></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mo fence=\"true\">)</mo></mrow><mo>=</mo><mn>2</mn><mi><msup><mi mathvariant=\"bold-italic\">X</mi><mi mathvariant=\"bold-italic\">T</mi></msup></mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">X</mi><mi mathvariant=\"bold-italic\">θ</mi><mo>−</mo><mi mathvariant=\"bold-italic\">y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"bold\">0</mi></mrow></mtd><mtd width=\"50%\"></mtd><mtd><mtext>(5)</mtext></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\frac{\\partial L(\\boldsymbol{\\theta})} {\\partial \\boldsymbol{\\theta}} = 2\n\\left[\\begin{array}{cccc}\n\tx^{(1)}_{0} &amp; x^{(2)}_{0} &amp; \\cdots &amp; x^{(m)}_{0} \\\\\n\tx^{(1)}_{1} &amp; x^{(2)}_{1} &amp; \\cdots &amp; x^{(m)}_{1} \\\\\n\t\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n\tx^{(1)}_{n} &amp; x^{(2)}_{n} &amp; \\cdots &amp; x^{(m)}_{n} \\\\\n\\end{array}\\right]\n\\left[\\begin{array}{c}\n\t\\boldsymbol{\\theta}^{T}\\boldsymbol{\\hat{x}^{(1)}} - y^{(1)} \\\\\n\t\\boldsymbol{\\theta}^{T}\\boldsymbol{\\hat{x}^{(2)}} - y^{(2)} \\\\\n\t\\vdots \\\\\n\t\\boldsymbol{\\theta}^{T}\\boldsymbol{\\hat{x}^{(m)}} - y^{(m)} \\\\\n\\end{array}\\right] = 2\n\\mathop{\n\\left[\\begin{array}{cccc}\n\tx^{(1)}_{0} &amp; x^{(2)}_{0} &amp; \\cdots &amp; x^{(m)}_{0} \\\\\n\tx^{(1)}_{1} &amp; x^{(2)}_{1} &amp; \\cdots &amp; x^{(m)}_{1} \\\\\n\t\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n\tx^{(1)}_{n} &amp; x^{(2)}_{n} &amp; \\cdots &amp; x^{(m)}_{n} \\\\\n\\end{array}\\right]\n}\\limits_{\\boldsymbol{X^{T}}}\n\\left(\n\t\\mathop{\n\t\\left[\\begin{array}{cccc}\n\t\t\\boldsymbol{\\hat{x}^{(1)}} \\\\\n        \\boldsymbol{\\hat{x}^{(2)}} \\\\\n        \\vdots \\\\\n        \\boldsymbol{\\hat{x}^{(m)}}\n\t\\end{array}\\right]\n\t}\\limits_{\\boldsymbol{X}}\n\t\\boldsymbol{\\theta}\n    - \n\t\\left[\\begin{array}{cccc}\n\t\ty^{(1)} \\\\\n        y^{(2)} \\\\\n        \\vdots \\\\\n        y^{(m)}\n\t\\end{array}\\right]\n\\right) = \n2 \\boldsymbol{X^{T}}(\\boldsymbol{X}\\boldsymbol{\\theta} - \\boldsymbol{y}) = \\boldsymbol{0} \\tag{5}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:6.0744em;vertical-align:-2.7872em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2872em;\"><span style=\"top:-5.9299em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.525099999999999em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.6651000000000002em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.2603000000000002em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.5834080000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.11659199999999997em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7872em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2872em;\"><span style=\"top:-5.9299em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.525099999999999em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.6651000000000002em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.2603000000000002em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.5834080000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.11659199999999997em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7872em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2872em;\"><span style=\"top:-5.7424em;\"><span class=\"pstrut\" style=\"height:3.5em;\"></span><span class=\"mord\"><span class=\"minner\">⋯</span></span></span><span style=\"top:-4.337599999999999em;\"><span class=\"pstrut\" style=\"height:3.5em;\"></span><span class=\"mord\"><span class=\"minner\">⋯</span></span></span><span style=\"top:-2.4776000000000002em;\"><span class=\"pstrut\" style=\"height:3.5em;\"></span><span class=\"mord\"><span class=\"minner\">⋱</span></span></span><span style=\"top:-1.0728000000000002em;\"><span class=\"pstrut\" style=\"height:3.5em;\"></span><span class=\"mord\"><span class=\"minner\">⋯</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7872em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2872em;\"><span style=\"top:-5.9299em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.525099999999999em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.6651000000000002em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.2603000000000002em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.5834080000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.11659199999999997em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7872em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.953995em;\"><span style=\"top:-1.3499850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.4999850000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.0959850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.6919850000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.712975em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.953995em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.4500349999999997em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.1085065000000003em;\"><span style=\"top:-5.8703355em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9256709999999999em;\"><span style=\"top:-3.1473400000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord mathbf mtight\">1</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-4.5846645em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9256709999999999em;\"><span style=\"top:-3.1473400000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord mathbf mtight\">2</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.7246645000000007em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.4389934999999998em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9256709999999999em;\"><span style=\"top:-3.1473400000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord boldsymbol mtight\">m</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6085065000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.953995em;\"><span style=\"top:-1.3499850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.4999850000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.0959850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.6919850000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.712975em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.953995em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.4500349999999997em;\"><span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:7.1465em;vertical-align:-3.5964549999999997em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2872em;\"><span style=\"top:-1.7907450000000007em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:5.2872em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\" style=\"margin-right:0.07778em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7760785714285714em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\" style=\"margin-right:0.15972em;\">T</span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-5.2872em;\"><span class=\"pstrut\" style=\"height:5.2872em;\"></span><span><span class=\"mop\"><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2872em;\"><span style=\"top:-5.9299em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.525099999999999em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.6651000000000002em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.2603000000000002em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.5834080000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.11659199999999997em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7872em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2872em;\"><span style=\"top:-5.9299em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.525099999999999em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.6651000000000002em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.2603000000000002em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.5834080000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.11659199999999997em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7872em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2872em;\"><span style=\"top:-5.7424em;\"><span class=\"pstrut\" style=\"height:3.5em;\"></span><span class=\"mord\"><span class=\"minner\">⋯</span></span></span><span style=\"top:-4.337599999999999em;\"><span class=\"pstrut\" style=\"height:3.5em;\"></span><span class=\"mord\"><span class=\"minner\">⋯</span></span></span><span style=\"top:-2.4776000000000002em;\"><span class=\"pstrut\" style=\"height:3.5em;\"></span><span class=\"mord\"><span class=\"minner\">⋱</span></span></span><span style=\"top:-1.0728000000000002em;\"><span class=\"pstrut\" style=\"height:3.5em;\"></span><span class=\"mord\"><span class=\"minner\">⋯</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7872em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2872em;\"><span style=\"top:-5.9299em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-4.525099999999999em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.6651000000000002em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.2603000000000002em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.5834080000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.11659199999999997em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7872em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5964549999999997em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.550045em;\"><span style=\"top:-0.7499750000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎝</span></span></span><span style=\"top:-1.8999850000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎜</span></span></span><span style=\"top:-2.4949950000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎜</span></span></span><span style=\"top:-3.090005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎜</span></span></span><span style=\"top:-3.6850150000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎜</span></span></span><span style=\"top:-4.280025em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎜</span></span></span><span style=\"top:-4.3100249999999996em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎜</span></span></span><span style=\"top:-5.550045em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎛</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.050045em;\"><span></span></span></span></span></span></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.052em;\"><span style=\"top:-1.8537230000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:5.052em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\" style=\"margin-right:0.07778em;\">X</span></span></span></span></span></span><span style=\"top:-5.052em;\"><span class=\"pstrut\" style=\"height:5.052em;\"></span><span><span class=\"mop\"><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.953995em;\"><span style=\"top:-1.3499850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.4999850000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.0959850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.6919850000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.712975em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.953995em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.4500349999999997em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.052em;\"><span style=\"top:-5.851500000000001em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord mathbf mtight\">1</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-4.6034999999999995em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord mathbf mtight\">2</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.7434999999999996em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.4955000000000005em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.70788em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span style=\"top:-3.01344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2875em;\"><span class=\"mord mathbf\">^</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mathbf mtight\">(</span><span class=\"mord boldsymbol mtight\">m</span><span class=\"mclose mathbf mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.5519999999999996em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.953995em;\"><span style=\"top:-1.3499850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.4999850000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.0959850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.6919850000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.712975em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.953995em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.4500349999999997em;\"><span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2982769999999992em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.953995em;\"><span style=\"top:-1.3499850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.4999850000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.0959850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.6919850000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.712975em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.953995em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.4500349999999997em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.052em;\"><span style=\"top:-5.851500000000001em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-4.6034999999999995em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.7434999999999996em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span><span style=\"top:-1.4955000000000005em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.5519999999999996em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.953995em;\"><span style=\"top:-1.3499850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.4999850000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.0959850000000007em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.6919850000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.712975em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.953995em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.4500349999999997em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.550045em;\"><span style=\"top:-0.7499750000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎠</span></span></span><span style=\"top:-1.8999850000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎟</span></span></span><span style=\"top:-2.4949950000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎟</span></span></span><span style=\"top:-3.090005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎟</span></span></span><span style=\"top:-3.6850150000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎟</span></span></span><span style=\"top:-4.280025em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎟</span></span></span><span style=\"top:-4.3100249999999996em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎟</span></span></span><span style=\"top:-5.550045em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.050045em;\"><span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1432769999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8932769999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\" style=\"margin-right:0.15972em;\">T</span></span></span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03704em;\">y</span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">0</span></span></span></span><span class=\"tag\"><span class=\"strut\" style=\"height:7.1465em;vertical-align:-3.5964549999999997em;\"></span><span class=\"mord text\"><span class=\"mord\">(</span><span class=\"mord\"><span class=\"mord\">5</span></span><span class=\"mord\">)</span></span></span></span></span></span></p>\n<p>整理化简可得：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi><msup><mi mathvariant=\"bold-italic\">X</mi><mi mathvariant=\"bold-italic\">T</mi></msup></mi><mi mathvariant=\"bold-italic\">X</mi><mi mathvariant=\"bold-italic\">θ</mi><mo>=</mo><mi><msup><mi mathvariant=\"bold-italic\">X</mi><mi mathvariant=\"bold-italic\">T</mi></msup></mi><mi mathvariant=\"bold-italic\">y</mi></mrow><annotation encoding=\"application/x-tex\">\\boldsymbol{X^{T}}\\boldsymbol{X}\\boldsymbol{\\theta} = \\boldsymbol{X^{T}}\\boldsymbol{y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8432769999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8432769999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\" style=\"margin-right:0.15972em;\">T</span></span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.037717em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8432769999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\" style=\"margin-right:0.15972em;\">T</span></span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03704em;\">y</span></span></span></span></span></span>. 当<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi><msup><mi mathvariant=\"bold-italic\">X</mi><mi mathvariant=\"bold-italic\">T</mi></msup></mi><mi mathvariant=\"bold-italic\">X</mi></mrow><annotation encoding=\"application/x-tex\">\\boldsymbol{X^{T}}\\boldsymbol{X}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8432769999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8432769999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\" style=\"margin-right:0.15972em;\">T</span></span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span></span></span></span></span></span> 可逆时，可求得：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"bold-italic\">θ</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi><msup><mi mathvariant=\"bold-italic\">X</mi><mi mathvariant=\"bold-italic\">T</mi></msup></mi><mi mathvariant=\"bold-italic\">X</mi><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi><msup><mi mathvariant=\"bold-italic\">X</mi><mi mathvariant=\"bold-italic\">T</mi></msup></mi><mi mathvariant=\"bold-italic\">y</mi></mrow><annotation encoding=\"application/x-tex\">\\boldsymbol{\\theta} = (\\boldsymbol{X^{T}}\\boldsymbol{X})^{-1}\\boldsymbol{X^{T}}\\boldsymbol{y}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03194em;\">θ</span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1432769999999999em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8932769999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\" style=\"margin-right:0.15972em;\">T</span></span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8932769999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\" style=\"margin-right:0.15972em;\">T</span></span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.03704em;\">y</span></span></span></span></span></span></span></p>\n<h2 id=\"局限性\"><a class=\"anchor\" href=\"#局限性\">#</a> 局限性</h2>\n<ol>\n<li>如<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>5</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(5)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">5</span><span class=\"mclose\">)</span></span></span></span> 所示，使用矩阵求解法来求解时，其必须要满足上式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi><msup><mi mathvariant=\"bold-italic\">X</mi><mi mathvariant=\"bold-italic\">T</mi></msup></mi><mi mathvariant=\"bold-italic\">X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\boldsymbol{X^{T}}\\boldsymbol{X})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.093277em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8432769999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\" style=\"margin-right:0.15972em;\">T</span></span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span></span></span><span class=\"mclose\">)</span></span></span></span> 可逆。如果不可逆，则无法使用最小二乘法，往往此时的解决方法可以是，使用其他优化算法来求解，比如梯度下降法。 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi><msup><mi mathvariant=\"bold-italic\">X</mi><mi mathvariant=\"bold-italic\">T</mi></msup></mi><mi mathvariant=\"bold-italic\">X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\boldsymbol{X^{T}}\\boldsymbol{X})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.093277em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8432769999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\" style=\"margin-right:0.15972em;\">T</span></span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span></span></span><span class=\"mclose\">)</span></span></span></span> 不可逆存在如下特殊情况：\n<ul>\n<li>当样本数 &lt;= 特征数时， <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi><msup><mi mathvariant=\"bold-italic\">X</mi><mi mathvariant=\"bold-italic\">T</mi></msup></mi><mi mathvariant=\"bold-italic\">X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\boldsymbol{X^{T}}\\boldsymbol{X})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.093277em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8432769999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\" style=\"margin-right:0.15972em;\">T</span></span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span></span></span><span class=\"mclose\">)</span></span></span></span> 必定不可逆。往往对样本数据重新整理，去掉冗余特征。若无法使得特征数小于样本数，说明拟合方程是欠定的，常用的优化方法都无法拟合数据。</li>\n</ul>\n</li>\n<li>当特征数目很多时，求解 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi><msup><mi mathvariant=\"bold-italic\">X</mi><mi mathvariant=\"bold-italic\">T</mi></msup></mi><mi mathvariant=\"bold-italic\">X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\boldsymbol{X^{T}}\\boldsymbol{X})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.093277em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8432769999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\" style=\"margin-right:0.15972em;\">T</span></span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\" style=\"margin-right:0.07778em;\">X</span></span></span><span class=\"mclose\">)</span></span></span></span> 的逆是一个非常耗时的工作（10000 个特征以上），往往先通过主成分分析 PCA 或者层次分析法降低特征的维度再使用最小二乘法。</li>\n</ol>\n<h1 id=\"参考文章\"><a class=\"anchor\" href=\"#参考文章\">#</a> 参考文章</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGluYXJkL3AvNTk3NjgxMS5odG1s\">最小二乘法小结 - 刘建平 Pinard - 博客园 (cnblogs.com)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVk3NDExZDdZcy8/cD0yJmFtcDt2ZF9zb3VyY2U9M2ZjYWE0OTYzNDQzNTM3MjNhMWVjMGVhM2QwMTA0MWU=\">线性模型 - 哔哩哔哩 - 刘二大人 - bilibili</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWhhbnMvJUU2JTlDJTgwJUU1JUIwJThGJUU0JUJBJThDJUU0JUI5JTk4JUU2JUIzJTk1\">WIKI - 维基百科 - 百科全书</span></li>\n</ul>\n",
            "tags": [
                "mathematics"
            ]
        },
        {
            "id": "http://example.com/value/Unix%20programing",
            "url": "http://example.com/value/Unix%20programing",
            "title": "UNIX网络编程",
            "date_published": "2023-07-20T09:00:34.000Z",
            "content_html": "<h2 id=\"传输层tcp-udp和sctp\"><a class=\"anchor\" href=\"#传输层tcp-udp和sctp\">#</a> 传输层：TCP、UDP 和 SCTP</h2>\n<h2 id=\"套接字编程\"><a class=\"anchor\" href=\"#套接字编程\">#</a> 套接字编程</h2>\n<h3 id=\"套接字地址结构\"><a class=\"anchor\" href=\"#套接字地址结构\">#</a> 套接字地址结构</h3>\n<h4 id=\"ipv4套接字地址结构\"><a class=\"anchor\" href=\"#ipv4套接字地址结构\">#</a> IPV4 套接字地址结构</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*    IPV4 套接字地址     */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token keyword\">int</span> sa_family_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sa_family_t sa_famliy<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* 套接字地址结构的地址族 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">char</span> sa_data<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 端口号（2 字节）+ IP 地址（4 字节） + 填充（8 字节） */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Synopsis：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    #include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Additional:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tsockaddr 是通用的套接字地址结构，是早期的版本，同时与各种套接字函数都是适配的；当套接字作为一个参数参入套接字函数时，往往是以引用形式（也就是以指向该地址的指针）来传递。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t当使用便于赋值和使用的新型地址结构 sockaddr_in 时，使用套接字函数，传入套接字地址时，需要做一个强制类型转换变成通用的套接字地址结构的指针。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tstruct sockaddr_in serv;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t(struct socketaddr *)&amp; serv;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token keyword\">uint16_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">uint32_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">uint16_t</span> in_port_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">uint32_t</span> in_addr_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    in_addr_t\ts_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">/* POSIX 规范只需要 3 个字段：sin_family, sin_port, sin_addr */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">uint8_t</span> sin_len<span class=\"token punctuation\">;</span>\t       <span class=\"token comment\">/* 长度字段，部分厂家支持，简化了长度可变套接字地址结构的处理 */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    sa_family_t sin_family<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 套接字地址结构的地址族 */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span> sin_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    in_port_t sin_port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">char</span> sin_zero<span class=\"token punctuation\">[</span><span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span>sa_family<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span>in_port_t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t#include &lt;netinet/in.h></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Additional:</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tsin_addr 定义为一个结构体而不仅仅是一个 in_addr_t 类型的无符号长整数，这是有历史原因的；早期的版本把 in_addr 结构定义为多种结构的联合，允许访问一个 IPV4 地址中的所有字节，或者访问它的 2 个 16 位值。这是为了适应地址被划分为 A、B 和 C 三类的时期，便于获取地址中适当的字节。然而随着子网划分技术的来临和无类地址编排的出现，各种地址类正在消失，这种联合也就不再需要了。</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"ipv6套接字地址结构\"><a class=\"anchor\" href=\"#ipv6套接字地址结构\">#</a> IPV6 套接字地址结构</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* IPV6 套接字地址结构 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">in6_addr</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"值-结果参数\"><a class=\"anchor\" href=\"#值-结果参数\">#</a> 值 - 结果参数</h3>\n<p>当往套接字函数传递一个套接字地址结构时，该结构总是以引用的形式来传递，也就是传递指向该结构的一个指针；其有两种传递方式</p>\n<ul>\n<li>从进程到内核传递套接字地址的函数有：connect、bind 和 sendto。这些函数的一个参数是指向某个套接字地址结构的指针，另外一个参数是指向该结构的整形大小；（即指针和指针所指内容的大小都传递给了内核，于是内核找到到底需要从进程复制多少数据进来）</li>\n<li>从内核到进程传递套接字地址的函数有：accept、recvfrom、getsockname 和 getpeername。这些函数的</li>\n</ul>\n<h3 id=\"字节排序函数\"><a class=\"anchor\" href=\"#字节排序函数\">#</a> 字节排序函数</h3>\n<p>内存中储存数据的方式有两种：大端字节序和小端字节序；两种格式都有系统使用，目前并没有统一的标准，对于给定的系统，其使用的字节序称为主机字节序。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">uint16_t</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint16_t</span> host_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">uint16_t</span> <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint16_t</span> net_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">uint32_t</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> host_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">uint32_t</span> <span class=\"token function\">ntohl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> net_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t使用这些函数时，并不需要关系主机字节序和网络字节序的真实值；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"字符操纵函数\"><a class=\"anchor\" href=\"#字符操纵函数\">#</a> 字符操纵函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;strings.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bzero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bcopy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">bcmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memsset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"地址转换函数\"><a class=\"anchor\" href=\"#地址转换函数\">#</a> 地址转换函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* IPV4 地址转换函数 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">inet_aton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span> <span class=\"token operator\">*</span>addrptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t将 strptr 所指 C 字符串转化为一个 32 位的网络字节序二进制值，并通过指针 addrptr 来存储。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t若成功则返回 1，否则返回 0；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>in_addr_t <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* 已被废弃 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t将 strpre 所指 C 字符串转化为一个 32 位的网络字节序二进制值，并将结果作为函数的返回值。不能用于处理 255.255.255.255 这种广播地址，该地址的二进制值被用来指示函数失败。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t出错时该函数返回 INADDR_NONE 常值（32 位均为 1 的值），成功则返回正确的地址序列。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span> inaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t将一个 32 位的网络字节序二进制 IPV4 地址转换为相应的点分十进制数串</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* IPV4、IPV6 地址转换函数 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> family<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addrptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t#include &lt;arpa/inet.h></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tfaimly: 地址族 (AF_INET、AF_INET6)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstrptr: 需要转换的字符串指针</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\taddrptr: 指向转换后的二进制结果</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t若成功则返回 1，失败则返回 - 1；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">inet_ntop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> family<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addrptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strptr<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t#include &lt;arpa/inet.h></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tfamily:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\taddrptr:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tstrptr:</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tlen:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t若成功则返回指向结果的指针，若出错则为 NULL</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"readn-writen和readline函数\"><a class=\"anchor\" href=\"#readn-writen和readline函数\">#</a> readn、writen 和 readline 函数</h3>\n<h2 id=\"tcp套接字编程\"><a class=\"anchor\" href=\"#tcp套接字编程\">#</a> TCP 套接字编程</h2>\n<h3 id=\"socket函数\"><a class=\"anchor\" href=\"#socket函数\">#</a> socket 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> domain<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tdomain: 协议域</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t- AF_INET:IPV4 protocal</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t- AF_INET6:IPV6 protocal</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t- AF_LOCAL:Unix 域协议</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t- AF_ROUTE: 路由套接字</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t- AF_KEY: 秘钥套接字</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\ttype: 套接字类型</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t- SOCK_STREAM: 字节流套接字</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t- SOCK_DGRAM: 数据报套接字</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t- SOCK_SEQPACKET: 允许分组套接字</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t- SOCK_RAW: 原始套接字</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tprotocal: 协议类型，或者设置为 0（会选择 domain 和 type 组合的系统默认值，但是并非所有的组合都是有效的）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t- IPPROTO_TCP:TCP 传输协议</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t- IPPROTO_UPD:UDP 传输协议</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t- IPPROTO_SCTP:SCTP 传输协议</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tsocket 函数成功则会返回一个小的非负整数值，它与文件描述符类似，称为套接字描述符 ssocket descriptor（sockfd）。失败则返回 - 1</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"connect函数\"><a class=\"anchor\" href=\"#connect函数\">#</a> connect 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> socklen_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>serveraddr<span class=\"token punctuation\">,</span> socklen_t addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tsockfd: 客户端用于通信的套接字描述符；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tserveraddr: 服务器监听套接字</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\taddrlen: 服务器套接字地址结构长度</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t客户在调用函数 connect 之前，不必非得调用 bind 函数；因为如果也需要的话，内核会确定源 IP 地址，并选择一个临时端口作为源端口</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t若成功则返回 0，若出错则返回 - 1。若 connect 失败则该套接字不再可用，必须关闭。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"bind函数\"><a class=\"anchor\" href=\"#bind函数\">#</a> bind 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>myaddr<span class=\"token punctuation\">,</span> socklen_t addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t把一个本地协议地址赋予一个套接字</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tsockfd:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tmyaddr:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tsocklen_t:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"listen函数\"><a class=\"anchor\" href=\"#listen函数\">#</a> listen 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> backlog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tsockfd: 套接字描述符；当 socket 函数创建一个套接字时，它被假设为一个主动套接字，listen 函数把一个未连接的套接字转化为一个被动套接字，指示内核应该接受指向该套接字的连接请求；（调用 listen 导致套接字从 CLOSE 状态转换到 LISTEN 状态）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tbacklog: 内核应该为相应套接字设置的最大排队连接请求</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Return Value：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t若成功则返回 0，若失败返回 - 1；</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>内核会为任何一个给定的监听套接字维护两个队列：</p>\n<ul>\n<li>未完成连接队列（incomplete connection queue）</li>\n<li>已完成连接队列（completed connection queue）</li>\n</ul>\n<h3 id=\"accept函数\"><a class=\"anchor\" href=\"#accept函数\">#</a> accept 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>clientaddr<span class=\"token punctuation\">,</span> socklen_t addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\taccept 函数由 TCP 服务器调用，用于从已完成连接队列对头返回下一个已完成连接的客户端请求。如果已完成连接队列为空，那么进程被置于休眠状态。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tsockfd: 监听套接字描述符</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tclientaddr: 客户进程地址结构</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\taddrlen: 客户进程协议地址长度</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t若 accept 成功，那么其返回值是由内核自动生成的一个全新的套接字描述符，代表与所返回的客户的 TCP 连接。若服务器对客户协议地址不感兴趣，可以把 clientaddr 和 addrlen 设置为空指针。返回的已连接套接字在每次断开连接后需要关闭。若失败则返回 - 1；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"recv和send函数\"><a class=\"anchor\" href=\"#recv和send函数\">#</a> recv 和 send 函数</h3>\n<p><code>recv</code>  和 <code>send</code>  函数类似于标准的 <code>read</code>  和 <code>write</code>  函数，不过需要一个额外的参数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> ssize_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> size_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ssize_t <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> size_t nbytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ssize_t <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> size_t nbytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t前三个参数等同于 read 和 write 的三个参数。flags 参数的值或为 0，或为如下字段：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t- MSG_DONTROUTE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t- MSG_DONTWAIT</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t- MSG_OOB</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t- MSG_PEEK</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t- MSG_WAITALL</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"close函数\"><a class=\"anchor\" href=\"#close函数\">#</a> close 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t#include &lt;unistd.h></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tsockfd: 待关闭的套接字描述符</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t若关闭成功返回 0，若关闭失败返回 - 1；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"并发服务器\"><a class=\"anchor\" href=\"#并发服务器\">#</a> 并发服务器</h3>\n<p>当服务器需要连接多个客户端时，可以使用迭代的方式，但是当服务一个客户请求可能花费较长时间时，我们并不希望整个服务器被单个客户长期占用，而是希望同时服务多个客户，这时需要在并发的服务器。</p>\n<h2 id=\"tcp客户服务器程序实例\"><a class=\"anchor\" href=\"#tcp客户服务器程序实例\">#</a> TCP 客户 / 服务器程序实例</h2>\n<p>&lt;img src=&quot;C:\\Users\\Value\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230522145338069.png&quot; alt=&quot;image-20230522145338069&quot; style=&quot;zoom:90%;&quot; /&gt;</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 服务端 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//============================================================================</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Name        : learning_socket.cpp</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Author      : Value</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// Version     :</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// Copyright   : Your copyright notice</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Description : Hello World in C++, Ansi-style</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//============================================================================</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">/* 创建监听套接字描述符 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> listen_socket_fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">/* 监听套接字地址结构 */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> listen_socket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tlisten_socket<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tlisten_socket<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token string\">\"192.168.159.130\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>listen_socket<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">/* 绑定 IP 和 Port */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>listen_socket_fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>listen_socket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> listen_socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">/* 监听 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tret <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>listen_socket_fd<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端启动中...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">/* 等待客户端；连接 */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> client_socket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> addrlen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span> client_socket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">int</span> client_socket_fd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>listen_socket_fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>client_socket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>client_socket_fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accept error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">char</span> ip<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端IP：%s, 端口：%d\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token function\">inet_ntop</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>client_socket<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">.</span>sin_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">/* 通信 */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token comment\">/* 接收数据 */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>client_socket_fd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"received client messages:%s\\n\"</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token comment\">/* 发送消息 */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t<span class=\"token function\">send</span><span class=\"token punctuation\">(</span>client_socket_fd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端断开了连接...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>client_socket_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>listen_socket_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 客户端 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//============================================================================</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Name        : learning_client.cpp</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Author      : Value</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// Version     :</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// Copyright   : Your copyright notice</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Description : Hello World in C++, Ansi-style</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//============================================================================</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">/* 创建通信套接字描述符 */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">int</span> client_socket_fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>client_socket_fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket error!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">/* 客户端可绑定固定 IP 和端口，也可以不绑定，操作系统自动选择空闲端口和本地 IP */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> server_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tserver_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tserver_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token string\">\"192.168.159.130\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>server_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">/* 连接服务器 */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>client_socket_fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>server_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> server_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect error!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">/* 通信 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token comment\">/* 发送数据 */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> <span class=\"token string\">\"你好，我是客户端！发送给你%d\\n\"</span><span class=\"token punctuation\">,</span>count <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token function\">send</span><span class=\"token punctuation\">(</span>client_socket_fd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token comment\">/* 接收数据 */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>client_socket_fd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"受到数据：%s\\n\"</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器断开了连接...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv error!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>client_socket_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"udp套接字编程\"><a class=\"anchor\" href=\"#udp套接字编程\">#</a> UDP 套接字编程</h2>\n<h3 id=\"recvfrom和sendto函数\"><a class=\"anchor\" href=\"#recvfrom和sendto函数\">#</a> recvfrom 和 sendto 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssize_t <span class=\"token function\">recvfrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> size_t nbytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>from<span class=\"token punctuation\">,</span> socklen_t <span class=\"token operator\">*</span>addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tsockfd: 用于通信的套接字描述符</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tbuff: 指向读入缓冲区的指针</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tnbytes:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tflags:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfrom: 指向数据报发送者的协议地址的套接字地址结构</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\taddrlen: 套接字地址结构大小</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ssize_t <span class=\"token function\">sendto</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> size_t nbytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>to<span class=\"token punctuation\">,</span> socklen_t addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tsockfd: 用于通信的</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tbuff:</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tnbytes:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tflags:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tto: 指向数据报接受者的协议地址（IP 地址以端口号）的套接字地址结构</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\taddrlen: 套接字地址结构大小</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"高级io函数\"><a class=\"anchor\" href=\"#高级io函数\">#</a> 高级 I/O 函数</h2>\n<h3 id=\"套接字超时\"><a class=\"anchor\" href=\"#套接字超时\">#</a> 套接字超时</h3>\n<h3 id=\"readv和writev函数\"><a class=\"anchor\" href=\"#readv和writev函数\">#</a> readv 和 writev 函数</h3>\n<p>这两个函数类似于 <code>read</code>  和 <code>write</code> ，不过 <code>readv</code>  和 <code>writev</code>  允许单个系统嗲用读入或写入一个或多个缓冲区。</p>\n<h3 id=\"recvmsg和sendmsg函数\"><a class=\"anchor\" href=\"#recvmsg和sendmsg函数\">#</a> recvmsg 和 sendmsg 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssize_t <span class=\"token function\">recvmsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> msghdr <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ssize_t <span class=\"token function\">sendmsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> msghdr <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">msghdr</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>msg_name<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Address to send to/receive from.  */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    socklen_t msg_namelen<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Length of address data.  */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">iovec</span> <span class=\"token operator\">*</span>msg_iov<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Vector of data to send/receive into.  */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    size_t msg_iovlen<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Number of elements in the vector.  */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>msg_control<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Ancillary data (eg BSD filedesc passing). */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    size_t msg_controllen<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Ancillary data buffer length.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                   !! The type should be socklen_t but the</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                   definition of the kernel is incompatible</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                   with this.  */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> msg_flags<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Flags on received message.  */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"辅助数据\"><a class=\"anchor\" href=\"#辅助数据\">#</a> 辅助数据</h3>\n",
            "tags": [
                "C++"
            ]
        }
    ]
}