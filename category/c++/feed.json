{
    "version": "https://jsonfeed.org/version/1",
    "title": "繁華落盡 似水流年 • All posts by \"c++\" category",
    "description": "编程日记 & 随笔",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/value/%E8%85%BE%E8%AE%AF%E6%A0%A1%E6%8B%9B",
            "url": "http://example.com/value/%E8%85%BE%E8%AE%AF%E6%A0%A1%E6%8B%9B",
            "title": "腾讯校招",
            "date_published": "2024-03-18T12:59:34.915Z",
            "content_html": "<h2 id=\"一面心态爆炸\"><a class=\"anchor\" href=\"#一面心态爆炸\">#</a> 一面（心态爆炸）</h2>\n<blockquote>\n<p>一开始问了我的研究方向，具体想自己</p>\n</blockquote>\n<h3 id=\"程序的内存空间\"><a class=\"anchor\" href=\"#程序的内存空间\">#</a> 程序的内存空间</h3>\n<blockquote>\n<p>这里居然我卡了一下，</p>\n</blockquote>\n<h3 id=\"vector的内存管理\"><a class=\"anchor\" href=\"#vector的内存管理\">#</a> Vector 的内存管理</h3>\n<blockquote>\n<p>Vector 内存是从堆上去申请的，内部具有一个扩容的机制。至于扩容的系数根据不同的操作系统会存在不同的差异，比较常用的是 2 或 1.5（他追问了默认比较常见的系数）. 内部会维护一个 <code>size()</code>  和 <code>capacity()</code>  的函数用于获取容器的实际大小和占用内存大小，当两个值相等时，再添加元素就会进行扩容。扩容的过程是从堆中去找一片更大的内存空间分配给这个容器...（没有让我再说下去了）</p>\n<p>接下来有反问我，说既然提到 <code>vecotr</code>  的内存是从堆上去申请的，那么你如何证明？如何证明在堆上而不是在栈上？这里我回答不上，也没太理解其实，反正之后面试官一直引导我，可惜我都没要 <code>get</code>  到，最后几乎告诉我答案了，我才和他说可以在 <code>main</code>  函数中写 <code>vector&lt;int&gt;(1000000000);</code>  与 <code>int a[1000000000]</code>  进行编译运行对比，第二中会报段错误（栈溢出），说明第二种的地址空间是在栈内取申请，而第一种没有报错，能正常运行，说明其内存空间不是在栈上去申请的.</p>\n</blockquote>\n<h3 id=\"三次握手的流程\"><a class=\"anchor\" href=\"#三次握手的流程\">#</a> 三次握手的流程</h3>\n<blockquote>\n<ol>\n<li>客户端发送 SYN 报文给服务端</li>\n<li>服务端接收到 SYN 报文后，发送 ACK 确认，同时将 SYN 设置为 1</li>\n<li>客户端收到请求后，给服务端发送 ACK 确认，三次握手过程结束</li>\n</ol>\n<p>为什么是三次？</p>\n<p>两次肯定不行，理论上应该是四次. TCP 连接建立是一个全双工的通信，同时其是由确认机制的，所以单边的连接建立需要 2 次，双工就 double，就是四次。但是在建立连接时，服务端可以将 SYN 请求和 ACK 确认包装在一个报文中.</p>\n<p>那么挥手是几次？是你说的这个原因吗？</p>\n<p>挥手是四次，是由于中间不能合并，在服务端接受到 FIN 请求后给与确认的同时，服务端可能还有数据没有发送完.</p>\n<p>四次挥手里面有一个 <code>TIME_WAIT</code>  的状态吗？你了解吗？</p>\n<p>主动关闭连接的一方的状态</p>\n<p>平时有没有用什么抓包工具？ wireshark，但是我不常用</p>\n<p>那如果是 Linux 命令呢？查看服务器上进程状态？记不清楚</p>\n<p>TCP 是可靠传输吗？</p>\n</blockquote>\n",
            "tags": [
                "校招"
            ]
        },
        {
            "id": "http://example.com/value/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0",
            "url": "http://example.com/value/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0",
            "title": "数据库连接池",
            "date_published": "2024-03-17T12:47:07.883Z",
            "content_html": "<h2 id=\"数据库连接池\"><a class=\"anchor\" href=\"#数据库连接池\">#</a> 数据库连接池</h2>\n<blockquote>\n<p>提高数据库的访问瓶颈（关系型数据库）：</p>\n<ol>\n<li>缓存服务器 <code>Redis</code></li>\n<li>数据库连接池</li>\n</ol>\n<p>一般而言，对于数据库操作都是在访问的时候创建连接，访问完毕之后断开连接。在高并发的情况下，频繁的连接创建和释放会有很大的开销</p>\n<ol>\n<li>建立通信的连接 TCP 三次握手</li>\n<li>数据库服务器的连接认证</li>\n<li>关闭数据库连接时资源是释放</li>\n<li>断开通信连接 TCP 四次挥手</li>\n</ol>\n</blockquote>\n",
            "tags": [
                "面试题"
            ]
        },
        {
            "id": "http://example.com/value/%E7%BA%BF%E7%A8%8B%E6%B1%A0",
            "url": "http://example.com/value/%E7%BA%BF%E7%A8%8B%E6%B1%A0",
            "title": "多线程与线程池",
            "date_published": "2024-03-17T11:27:36.716Z",
            "content_html": "<h2 id=\"创建线程\"><a class=\"anchor\" href=\"#创建线程\">#</a> 创建线程</h2>\n<pre><code class=\"language-c++\">/* 查看当前线程ID */\ntypedef unsigned long int pthread_t;\npthread_t pthread_self(void);\n/* 创建进程 */\nunion pthread_attr_t\n&#123;\n  char __size[__SIZEOF_PTHREAD_ATTR_T];\n  long int __align;\n&#125;;\ntypedef union pthread_attr_t pthread_attr_t;\nint pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);\n/*\nDescription:\n\tnewthread：传出参数，创建的新线程ID\n\taddr：线程的属性，一般情况使用默认值即可，NULL\n\tstart_routine:函数指针，创建出的子进程的处理函数，也就是在子线程中需要执行的函数\n\targ:作为实参传递到start_routine指针指向的函数内部\nReturn Value:\n\t线程创建成功返回0，否则返回对于的错误码\n*/\n</code></pre>\n<h2 id=\"线程退出\"><a class=\"anchor\" href=\"#线程退出\">#</a> 线程退出</h2>\n<pre><code class=\"language-c++\">void pthread_exit(void *retval);\n/*\nDescription:\n\t只要调用该函数，当前线程立马退出，并且不影响其他线程的运行，不管是在子进程还是主进程中都可以使用\n\tretval:线程退出时携带的数据，当前子线程的主进程会得到该数据。如果不需要，指定为NULL。\n*/\n</code></pre>\n<h2 id=\"线程回收\"><a class=\"anchor\" href=\"#线程回收\">#</a> 线程回收</h2>\n<pre><code class=\"language-c++\">int pthread_join(pthread_t thread, void **retval);\n/*\nDescription:\n\t用于在子进程退出后，主进程回收子进程的内核资源。该函数为一个堵塞函数，如果子进程还在运行，调用该函数就会堵塞，子线程退出函数解除堵塞，并将线程占用的内核资源回收。\n\tthread：子进程的进程ID\n\tretval：二级指针，指向一级指针的地址，是一个传出参数，这个地址中存储了pthread_exit()传递出的数据，如果不需要这个参数，可以指定为NULL。\nReturn Value:\n\t线程回收成功返回0，回收失败返回错误码。\n*/\n</code></pre>\n<h2 id=\"线程分离\"><a class=\"anchor\" href=\"#线程分离\">#</a> 线程分离</h2>\n<p>在某些情况下，程序中的主线程有属于自己的业务处理流程，如果让主线程负责子线程的资源回收，调用 <code>pthread_join()</code> ，只要子线程不退出，主线程就会被一直堵塞，主线程的任务也就不能被执行。</p>\n<pre><code class=\"language-c++\">int pthread_detach(pthread_t thread);\n/*\nDescription:\n\t调用线程分离函数之后，指定的子线程就可以和主线程分离，当子进程退出的时候，其占用的内核资源就会被系统的其他线程接管并回收。线程分离之后，主线程中使用的pthread_join()就回收不到子线程的资源了。\n\tthread：子线程ID\n*/\n</code></pre>\n<h2 id=\"线程取消\"><a class=\"anchor\" href=\"#线程取消\">#</a> 线程取消</h2>\n<pre><code class=\"language-c++\">int pthread_cancel(pthread_t thread);\n/*\nDescription:\n\t在一个线程中杀死另外一个线程。使用这个函数杀死一个线程需要分两步：\n\t1. 在线程A中调用线程取消函数pthread_cancel(),指定杀死线程B。\n\t2. 线程B中执行一次系统调用时才会被杀死，否则仍然存活。\n*/\n</code></pre>\n<h2 id=\"线程id比较\"><a class=\"anchor\" href=\"#线程id比较\">#</a> 线程 ID 比较</h2>\n<pre><code class=\"language-c++\">int pthread_equal(pthread_t t1, pthread_t t2);\n/*\nDescription:\n\tt1,t2为需要比较的两个线程ID。\nReturn Value:\n\t如果两个线程ID相等返回一个非0值，如果不等则返回0\n*/\n</code></pre>\n<h2 id=\"线程同步\"><a class=\"anchor\" href=\"#线程同步\">#</a> 线程同步</h2>\n<h3 id=\"互斥锁\"><a class=\"anchor\" href=\"#互斥锁\">#</a> 互斥锁</h3>\n<p>互斥锁是线程同步最常用的一种方式，通过互斥锁可以锁定一个代码块。被锁定的代码块，所以线程只能顺序执行。</p>\n<pre><code class=\"language-c++\">pthread_mutex_t mutex;\n/* 初始化互斥锁 */\nint pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *attr);\n/*\n\tmutex: 互斥锁变量地址\n\tattr: 互斥锁的属性，一般使用默认属性即可，这个参数指定为NULL\n\t返回0，则初始化成功，否则返回错误码\n*/\n/* 释放互斥锁 */\nint pthread_mutex_destroy(pthread_mutex_t *mutex);\n/* 上锁 */\nint pthread_mutex_lock(pthread_mutex_t *mutex);\n/*\nDescription:\n\t这个函数被调用，实现会判断参数mutex互斥锁中的状态是不是锁定状态：\n\t\t- 没有锁定，则这个线程可以加锁成功，这个锁会记录是哪一个线程加锁成功了\n\t\t- 如果被锁定，其他线程加锁就失败了，这些线程都会被堵塞在这把锁上\n\t\t- 当这把锁被解开之后，这些堵塞在锁上的线程就会解除堵塞，并且这些线程通过竞争的方式对这把锁加锁，没抢到锁的进程继续堵塞\n*/\n/* 尝试加锁 */\nint pthread_mutex_trylock(pthread_mutex_t *mutex);\n/*\nDescription:\n\t尝试对mutex互斥锁进行加锁：\n\t\t- 若互斥锁没有被锁定，线程加锁成功\n\t\t- 若互斥锁被锁定，调用这个函数加锁的线程，不会被堵塞，加锁失败直接返回错误码\n*/\n\n/* 解锁 */\nint pthread_mutex_unlock(pthread_mutex_t *mutex);\n/*\nDescription:\n\t并不是所以的线程都可以对互斥锁解锁，那个线程加的锁，那个线程才可以解锁。\n*/\n</code></pre>\n<h3 id=\"死锁\"><a class=\"anchor\" href=\"#死锁\">#</a> 死锁</h3>\n<p>当多个线程访问共享资源，需要加锁，如果锁使用不当，就会造成死锁这种现象。</p>\n<h3 id=\"读写锁\"><a class=\"anchor\" href=\"#读写锁\">#</a> 读写锁</h3>\n<p>读锁是共享的，写锁是独占的；写锁比读锁优先级高；如果临界区涉及大量的读操作，使用读写锁比使用互斥锁效率高，而只有少量的读操作，则互斥锁和读写锁效率差异不大</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pthread_rwlock_t rwlock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 初始化读写锁 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_init</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>restrict rwlock<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> pthread_rwlockattr_t <span class=\"token operator\">*</span>restrict attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 销毁读写锁 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_destroy</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* 加读锁 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_rdlock</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/* 尝试加读锁，加锁失败不堵塞 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_tryrdlock</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/* 加写锁 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_wrlock</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/* 尝试加写锁，加锁失败不堵塞 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_trywrlock</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/* 解锁（读锁 / 写锁） */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_unlock</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"条件变量\"><a class=\"anchor\" href=\"#条件变量\">#</a> 条件变量</h3>\n<p>一般情况下条件变量用于处理生产者和消费者模型，并且和互斥锁配合使用。条件变量类型为 <code>pthread_cond_t</code> ，被条件变量堵塞的线程以及线程信息会被记录到这个变量中，以便在解除堵塞时使用。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pthread_cond_t cond<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 初始化 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_cond_init</span><span class=\"token punctuation\">(</span>pthread_cond_t <span class=\"token operator\">*</span>restrict cond<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> pthread_condaddr_t <span class=\"token operator\">*</span>restrict attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 销毁释放资源 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_cond_destroy</span><span class=\"token punctuation\">(</span>pthread_cond_t <span class=\"token operator\">*</span>cond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* 堵塞当前线程 / 进程 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_cond_wait</span><span class=\"token punctuation\">(</span>pthread_cond_t <span class=\"token operator\">*</span>restrict cond<span class=\"token punctuation\">,</span> pthread_mutex_t <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timespec</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    time_t tv_sec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">long</span> tv_nsec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_cond_timedwait</span><span class=\"token punctuation\">(</span>pthread_cond_t <span class=\"token operator\">*</span>restrict cond<span class=\"token punctuation\">,</span> pthread_mutex_t <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timespec</span> <span class=\"token operator\">*</span>restrict abstime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/* 唤醒堵塞在条件变量上的一个线程 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_cond_signal</span><span class=\"token punctuation\">(</span>pthread_cond_t <span class=\"token operator\">*</span>cond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/* 唤醒所以堵塞在条件变量上的线程 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_cond_broadcast</span><span class=\"token punctuation\">(</span>pthread_cond_t <span class=\"token operator\">*</span>cond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"信号量\"><a class=\"anchor\" href=\"#信号量\">#</a> 信号量</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;semaphore.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sem_t sem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sem_init</span><span class=\"token punctuation\">(</span>sem_t <span class=\"token operator\">*</span>sem<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pshared<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tsem: 信号量变量地址</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tpshared: 0 表示线程同步；非 0 表示进程同步</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tvalue: 初始化当前信号量拥有的资源数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sem_destroy</span><span class=\"token punctuation\">(</span>sem_t <span class=\"token operator\">&amp;</span>sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sem_wait</span><span class=\"token punctuation\">(</span>sem_t <span class=\"token operator\">*</span>sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sem_try_wait</span><span class=\"token punctuation\">(</span>sem_t <span class=\"token operator\">*</span>sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/* 产看信号量 sem 当前拥有的资源个数，通过第二个参数传出（返回值也可以） */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sem_getvalue</span><span class=\"token punctuation\">(</span>sem_t <span class=\"token operator\">*</span>sem<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>sval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sem_post</span><span class=\"token punctuation\">(</span>sem_t <span class=\"token operator\">*</span>sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"什么是线程池线程池的好处\"><a class=\"anchor\" href=\"#什么是线程池线程池的好处\">#</a> 什么是线程池？线程池的好处</h2>\n<blockquote>\n<p>通俗上来说线程池是一个管理线程的池子，它可以容纳多个线程，并对线程可以进行反复的利用，省去了频繁的线程的创建和销毁开销.</p>\n</blockquote>\n<h2 id=\"线程池的核心参数\"><a class=\"anchor\" href=\"#线程池的核心参数\">#</a> 线程池的核心参数</h2>\n<ul>\n<li>\n<p>任务队列：存储需要处理的任务（函数地址）</p>\n<blockquote>\n<ol>\n<li>\n<p>为了管理任务队列，需要线程池提供 API 接口，用于往任务队列中添加任务和删除任务</p>\n</li>\n<li>\n<p>生产者 - 消费者模型</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>工作的线程（消费者线程）：负责去任务队列中取任务</p>\n<blockquote>\n<ol>\n<li>线程池中维护一定数量的工作线程，不停的读取任务队列并且处理任务函数</li>\n<li>如果任务队列为空，工作的线程会堵塞（使用条件变量 / 信号量）</li>\n<li>工作线程堵塞后有新任务产生，生产者线程会唤醒工作的线程</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>管理者线程：主线程</p>\n<blockquote>\n<p>周期性的对任务队列中的任务数量以及工作线程数进行检测，当任务过多时，可以适当的创建一些新的工作线程；当任务过少时，可以适当</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 任务结构体</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> callback <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \t<span class=\"token comment\">//  void (*function)(void *arg);\t/* 任务函数 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    callback function<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* 任务参数 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        function <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        arg <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">Task</span><span class=\"token punctuation\">(</span>callback f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>arg <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>function <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 任务队列</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskQueue</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">TaskQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">pthread_mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">TaskQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">pthread_mutex_destroy</span><span class=\"token punctuation\">(</span>$mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/* 添加任务 */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span>Task task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        taskQu<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/* 取任务 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    Task <span class=\"token function\">takeTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        Task t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>taskQu<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            t <span class=\"token operator\">=</span> taskQu<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            taskQu<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">/* 获取当前任务数目 */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getQueueSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> taskQu<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    queue<span class=\"token operator\">&lt;</span>Task<span class=\"token operator\">></span> taskQu<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    pthread_mutex_t mutex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">// 线程池结构体</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">ThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            taskQu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> taskQu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>taskQu <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"new taskQu fail...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            threadIDs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> pthread_t<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>threadIDs <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"new threadIDs fail...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>threadIDs<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>pthread_t<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>minThreadCount <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>maxThreadCount <span class=\"token operator\">=</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>busyThreadCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>liveThreadCount <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>shutdown <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">pthread_mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutexPool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">||</span> <span class=\"token function\">pthread_cond_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>notEmpty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mutex or condition init fail...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token comment\">/* 创建管理者线程 */</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>managerID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> manager<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token comment\">/* 创建工作的线程 */</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\t<span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>threadIDs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> worker<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">/* 初始化失败，释放资源 */</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>threadIDs<span class=\"token punctuation\">)</span>\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> threadIDs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>taskQu<span class=\"token punctuation\">)</span>\t<span class=\"token keyword\">delete</span> taskQu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    TaskQueue<span class=\"token operator\">*</span> taskQu<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* 任务队列 */</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    pthread_t managerID\t\t<span class=\"token comment\">/* 管理者线程 ID */</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    pthread_t <span class=\"token operator\">*</span>threadIDs\t<span class=\"token comment\">/* 工作的线程 ID */</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">int</span> minThreadCount<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* 初始 / 最少线程数 */</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">int</span> maxThreadCount<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* 最大线程数 */</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">int</span> busyThreadCount<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* 忙线程数目 */</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">int</span> liveThreadCount<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* 存活线程数目 */</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    pthread_mutex_t\tmutexPool<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* 线程池锁 (互斥锁) */</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    pthread_mutex_t mutexBusy<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* 忙线程数锁 */</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">bool</span> shutdown<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">/* 线程池销毁标志 */</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    pthread_cond_t notEmpty<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 任务队列是否空 (生产者唤醒消费者) */</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        ThreadPool<span class=\"token operator\">*</span> pool <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>taskQu<span class=\"token operator\">-></span><span class=\"token function\">getQueueSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>pool<span class=\"token operator\">-></span>shutdown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token function\">pthread_cond_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notEmpty<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>shutdown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        pool<span class=\"token operator\">-></span>busyThreadCount <span class=\"token operator\">++</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        Task task <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>taskQu<span class=\"token operator\">-></span><span class=\"token function\">takeTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        task<span class=\"token punctuation\">.</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">delete</span> task<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        task<span class=\"token punctuation\">.</span>arg <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        pool<span class=\"token operator\">-></span>busyThreadCount <span class=\"token operator\">--</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    \t</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">manager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "面试题"
            ]
        },
        {
            "id": "http://example.com/value/%E7%BE%8E%E5%9B%A2%E6%A0%A1%E6%8B%9B",
            "url": "http://example.com/value/%E7%BE%8E%E5%9B%A2%E6%A0%A1%E6%8B%9B",
            "title": "美团校招",
            "date_published": "2024-03-10T14:47:57.480Z",
            "content_html": "<h2 id=\"美团2024年春招第一场笔试算法策略\"><a class=\"anchor\" href=\"#美团2024年春招第一场笔试算法策略\">#</a> 美团 2024 年春招第一场笔试【算法策略】</h2>\n<blockquote>\n<p>本来早就想记录一下了，但是笔试的时候没有把题目和代码保存下来！今天 (2024-03-10) 在小红书看到了笔试题，于是乎打算重新写一遍。整体来说，对我而言感觉难度中等偏上一点。第五题没有得到全部分数，没有把正向删边等加成逆向加边</p>\n</blockquote>\n<h3 id=\"q1-easy\"><a class=\"anchor\" href=\"#q1-easy\">#</a> Q1  <span class=\"label success\">easy</span></h3>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/Q1.jpg\" alt=\"\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">rint</span> <span class=\"token expression\"><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ull</span> <span class=\"token expression\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>   cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    string s<span class=\"token punctuation\">;</span>   cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>    cnt <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'M'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'T'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">+</span> k<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>时间复杂度</mtext><mo>:</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">时间复杂度:O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>空间复杂度</mtext><mo>:</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">空间复杂度:O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">空</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h3 id=\"q2-easy\"><a class=\"anchor\" href=\"#q2-easy\">#</a> Q2 <span class=\"label success\">easy</span></h3>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/Q21.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/Q22.jpg\" alt=\"\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">rint</span> <span class=\"token expression\"><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ull</span> <span class=\"token expression\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">;</span>   cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    ll sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cnt0 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        ll tp<span class=\"token punctuation\">;</span>  cin <span class=\"token operator\">>></span> tp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        cnt0 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>tp <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        sum <span class=\"token operator\">+=</span> tp<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>q <span class=\"token operator\">--</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        ll l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">;</span>    cin <span class=\"token operator\">>></span> l <span class=\"token operator\">>></span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">+</span> cnt0 <span class=\"token operator\">*</span> l <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">+</span> cnt0 <span class=\"token operator\">*</span> r <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>时间复杂度</mtext><mo>:</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">时间复杂度:O(n + q)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>空间复杂度</mtext><mo>:</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">空间复杂度:O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">空</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h3 id=\"q3-easy\"><a class=\"anchor\" href=\"#q3-easy\">#</a> Q3 <span class=\"label success\">easy</span></h3>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/Q3.jpg\" alt=\"\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t枚举 + 二维前缀和</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">rint</span> <span class=\"token expression\"><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ull</span> <span class=\"token expression\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">210</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">[</span>x2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y2<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>x1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y2<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>x2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>x1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        string tp<span class=\"token punctuation\">;</span>  cin <span class=\"token operator\">>></span> tp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>    sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>   sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> k <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> x1 <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> x1 <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> y1 <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> y1 <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">int</span> x2 <span class=\"token operator\">=</span> x1 <span class=\"token operator\">+</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">int</span> y2 <span class=\"token operator\">=</span> y1 <span class=\"token operator\">+</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x2 <span class=\"token operator\">></span> n <span class=\"token operator\">||</span> y2 <span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">int</span> cnt1 <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">int</span> cnt0 <span class=\"token operator\">=</span> k <span class=\"token operator\">*</span> k <span class=\"token operator\">-</span> cnt1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                res<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>cnt0 <span class=\"token operator\">==</span> cnt1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>   cout <span class=\"token operator\">&lt;&lt;</span> res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>时间复杂度</mtext><mo>:</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">时间复杂度:O(n^{3})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>空间复杂度</mtext><mo>:</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">空间复杂度: O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">空</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h3 id=\"q4-medium\"><a class=\"anchor\" href=\"#q4-medium\">#</a> Q4 <span class=\"label warning\">medium</span></h3>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/Q4.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/Q42.jpg\" alt=\"\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t方法一：前缀和 + 二分</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">rint</span> <span class=\"token expression\"><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ull</span> <span class=\"token expression\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> pii<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> sum2<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sum5<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>pii <span class=\"token function\">decompose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    pii cur <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        cur<span class=\"token punctuation\">.</span>first <span class=\"token operator\">++</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        x <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        cur<span class=\"token punctuation\">.</span>second <span class=\"token operator\">++</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        x <span class=\"token operator\">/=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">deal2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> del<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum2<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> del<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">int</span> aim <span class=\"token operator\">=</span> sum2<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> del<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> r <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum2<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> aim<span class=\"token punctuation\">)</span>    r <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">else</span>    l <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">deal5</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> del<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum5<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> del<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">int</span> aim <span class=\"token operator\">=</span> sum5<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> del<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> r <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum5<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> aim<span class=\"token punctuation\">)</span>    r <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">else</span>    l <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">return</span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>   cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">int</span> tp<span class=\"token punctuation\">;</span> cin <span class=\"token operator\">>></span> tp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        pii cur <span class=\"token operator\">=</span> <span class=\"token function\">decompose</span><span class=\"token punctuation\">(</span>tp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        sum2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum2<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        sum5<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum5<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">int</span> del2 <span class=\"token operator\">=</span> sum2<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> k<span class=\"token punctuation\">,</span> del5 <span class=\"token operator\">=</span> sum5<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    ll cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">int</span> index2 <span class=\"token operator\">=</span> <span class=\"token function\">deal2</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> del2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">int</span> index5 <span class=\"token operator\">=</span> <span class=\"token function\">deal5</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> del5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        cnt <span class=\"token operator\">=</span> cnt <span class=\"token operator\">+</span> i <span class=\"token operator\">-</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>index2<span class=\"token punctuation\">,</span> index5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> cnt <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>时间复杂度</mtext><mo>:</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">时间复杂度:O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>空间复杂度</mtext><mo>:</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">空间复杂度:O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">空</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t方法二：前缀和 + 哈希表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr></table></figure><ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>时间复杂度</mtext><mo>:</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">时间复杂度:O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>空间复杂度</mtext><mo>:</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">空间复杂度:O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">空</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t方法三：双指针</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr></table></figure><ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>时间复杂度</mtext><mo>:</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">时间复杂度:O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>空间复杂度</mtext><mo>:</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">空间复杂度:O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">空</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h3 id=\"q5-hard\"><a class=\"anchor\" href=\"#q5-hard\">#</a> Q5 <span class=\"label danger\">hard</span></h3>\n<blockquote>\n<p>逆向思维，一眼并查集；但是并查集无法删除关系.</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/Q51.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/Q52.jpg\" alt=\"\" /></p>\n<div class=\"note warning\">\n<p>考虑重边</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t离散化 + 并查集（逆向）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">rint</span> <span class=\"token expression\"><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ull</span> <span class=\"token expression\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> pii<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>pii relation<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span> op<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span>query<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">[</span>N <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">getHash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> mp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span>   <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">int</span> px <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token function\">getHash</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">int</span> py <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token function\">getHash</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>px <span class=\"token operator\">==</span> py<span class=\"token punctuation\">)</span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    p<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> py<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">;</span>    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m <span class=\"token operator\">>></span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> S<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>   cin <span class=\"token operator\">>></span> u <span class=\"token operator\">>></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        S<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        relation<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    map<span class=\"token operator\">&lt;</span>pii<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> del<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> q<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">int</span> op<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>   cin <span class=\"token operator\">>></span> op <span class=\"token operator\">>></span> u <span class=\"token operator\">>></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        query<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>op<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        S<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  del<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span> <span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>x <span class=\"token operator\">:</span> S<span class=\"token punctuation\">)</span>    mp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> idx <span class=\"token operator\">++</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> idx<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>del<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>relation<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> del<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>relation<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> relation<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> q <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">--</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>op <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">int</span> px <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token function\">getHash</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">int</span> py <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token function\">getHash</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>px <span class=\"token operator\">==</span> py<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>del<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>query<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>u<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                del<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>query<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>u<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>u<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span>   del<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>query<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>u<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">--</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>x <span class=\"token operator\">:</span> res<span class=\"token punctuation\">)</span>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">?</span> <span class=\"token string\">\"Yes\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"No\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    5 3 5</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    1 2 </pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    2 3</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    4 5</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    1 1 5</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    2 1 3</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    2 1 4</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    1 1 2</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    2 1 3</pre></td></tr><tr><td data-num=\"93\"></td><td><pre> */</span></pre></td></tr></table></figure><ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>时间复杂度</mtext><mo>:</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>q</mi><mo stretchy=\"false\">)</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>q</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">时间复杂度:O(max(n,q)log(max(n,q)))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>空间复杂度</mtext><mo>:</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">空间复杂度:O(n+q)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">空</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h2 id=\"美团2024年春招第二场笔试算法策略\"><a class=\"anchor\" href=\"#美团2024年春招第二场笔试算法策略\">#</a> 美团 2024 年春招第二场笔试【算法策略】</h2>\n<blockquote>\n<p>2024-03-16 场的，这场没有参加。在网上找了原题，试着做一下</p>\n</blockquote>\n<h3 id=\"q1\"><a class=\"anchor\" href=\"#q1\">#</a> Q1</h3>\n<p><strong>题目描述</strong></p>\n<p>小美是美团外卖的忠实用户，她经常去美团外卖 app 上面点外卖，因为会员红包的性价比太高。现在小美点了若干道菜，她希望你计算一个订单的总价。你能帮帮她吗？</p>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>第一行输入一个正整数 n，代表菜品总数。 第二行输入 n 个正整数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，代表每道菜的价格。 第三行输入两个正整数 x 和 y，x 代表满减的价格，y 代表红包的价格。</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>一个正整数，代表小美最终应付的钱数。</p>\n</blockquote>\n<p><strong>样例</strong></p>\n<p><strong>输入</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>4</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>10 20 10 20</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>25 10</pre></td></tr></table></figure><p><strong>输出</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>25</pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">rint</span> <span class=\"token expression\"><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ull</span> <span class=\"token expression\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> tp<span class=\"token punctuation\">;</span> cin <span class=\"token operator\">>></span> tp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        sum <span class=\"token operator\">+=</span> tp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>   cin <span class=\"token operator\">>></span> x <span class=\"token operator\">>></span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">-</span> x <span class=\"token operator\">-</span> y <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"q2\"><a class=\"anchor\" href=\"#q2\">#</a> Q2</h3>\n<p><strong>题目描述</strong></p>\n<p>小美定义以下三种单词是合法的:</p>\n<p>1. 所有字母都是小写。例如:good</p>\n<p>2. 所有字母都是大写。例如：APP</p>\n<p>3. 第一个字母大写，后面所有字母都是小写。例如：Alice</p>\n<p>现在小美拿到了一个单词，她每次操作可以修改任意一个字符的大小写。小美想知道最少操作几次可以使得单词变成合法的？</p>\n<p><strong>输入描述</strong></p>\n<blockquote 5=\"\">\n<p>一个仅由大写字母和小写字母组成的字符串，长度不超过10^</p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>一个整数，代表操作的最小次数。</p>\n</blockquote>\n<p><strong>样例</strong></p>\n<p><strong>输入</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>AbC</pre></td></tr></table></figure><p><strong>输出</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1</pre></td></tr></table></figure><p><strong>说明</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>变成 ABC 或者 Abc 均可。只需要1次操作。</pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">rint</span> <span class=\"token expression\"><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ull</span> <span class=\"token expression\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    string s<span class=\"token punctuation\">;</span>   cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> minv <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span> cnt1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>c <span class=\"token operator\">:</span> s<span class=\"token punctuation\">)</span>    cnt1 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token char\">'a'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    minv <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>minv<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> cnt1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> cnt2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>c <span class=\"token operator\">:</span> s<span class=\"token punctuation\">)</span>    cnt2 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'Z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    minv <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>minv<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> cnt2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> cnt3 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'Z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> cnt3 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'Z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    minv <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>minv<span class=\"token punctuation\">,</span> cnt3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> minv <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"q3\"><a class=\"anchor\" href=\"#q3\">#</a> Q3</h3>\n<p><strong>题目描述</strong></p>\n<p>小美拿到了一个数组，她每次操作会将除了第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 个元素的其余元素翻倍，一共操作了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> 次。请你帮小美计算操作结束后所有元素之和。 由于答案过大，请对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">10^{9}+7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span></span></span></span> 取模。</p>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>第一行输入两个正整数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span>，代表数组的大小和操作次数。<br />\n第二行输入<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个正整数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，代表数组的元素。<br />\n接下来的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> 行，每行输入一个正整数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，代表第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 次操作未被翻倍的元素。<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>q</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\leq n,q \\leq 10^{5}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></span><br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\leq a_{i} \\leq 10^{9}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7859700000000001em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span></span></span></span></span><br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>x</mi><mi>i</mi></msub><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1 \\leq x_{i} \\leq n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7859700000000001em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>一个整数，代表操作结束后所有元素之和模<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">10^{9}+7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span></span></span></span> 的值。</p>\n</blockquote>\n<p><strong>样例</strong></p>\n<p><strong>输入</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>4 2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1 2 3 4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>2</pre></td></tr></table></figure><p><strong>输出</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>34</pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">rint</span> <span class=\"token expression\"><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ull</span> <span class=\"token expression\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> MOD <span class=\"token operator\">=</span> <span class=\"token number\">1E9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ll <span class=\"token function\">qmi</span><span class=\"token punctuation\">(</span>ll a<span class=\"token punctuation\">,</span> ll b<span class=\"token punctuation\">,</span> ll q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ll res <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>   res <span class=\"token operator\">=</span> res <span class=\"token operator\">*</span> a <span class=\"token operator\">%</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        b <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        a <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> a <span class=\"token operator\">%</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">;</span>   cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">tp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>    cin <span class=\"token operator\">>></span> tp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">cnt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> q<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>  cin <span class=\"token operator\">>></span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        index <span class=\"token operator\">--</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        cnt<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    ll sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>    sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+</span> tp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token function\">qmi</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> q <span class=\"token operator\">-</span> cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> MOD<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"q4\"><a class=\"anchor\" href=\"#q4\">#</a> Q4</h3>\n<p><strong>题目描述</strong></p>\n<p>小美拿到了一个数组，她希里你求出所有区间众数之和，你能帮帮她吗？</p>\n<p>定义区间的众数为出现次数最多的那个数，如果有多个数出现次数最多，那么众数是其中最小的那个数。</p>\n<p><strong>输入描述</strong></p>\n<blockquote>\n<p>第一行输入一个正整数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>，代表数组的大小<br />\n第二行输入<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个正整数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, 代表数组的元素<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\leq n \\leq 2×10^{5}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></span><br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">1 \\leq a_{i} \\leq 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7859700000000001em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></p>\n</blockquote>\n<p><strong>输出描述</strong></p>\n<blockquote>\n<p>一个正整数，代表所有区间的众数之和。</p>\n</blockquote>\n<p><strong>样例</strong></p>\n<p><strong>输入</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>2 1 2</pre></td></tr></table></figure><p><strong>输出</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>9</pre></td></tr></table></figure><p><strong>说明</strong></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[2],[2,1,2],[2]的众数是 2.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>[2,1],[1],[1,2]的众数是 1.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>因此答案是 9.</pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">rint</span> <span class=\"token expression\"><span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ull</span> <span class=\"token expression\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">2e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ll tr<span class=\"token punctuation\">[</span>N <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>ll <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    index <span class=\"token operator\">+=</span> <span class=\"token number\">1e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    ll sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">-=</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   sum <span class=\"token operator\">+=</span> tr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> ll c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    index <span class=\"token operator\">+=</span> <span class=\"token number\">1e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   tr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    ll res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">int</span> cnt1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cnt2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">int</span> tp<span class=\"token punctuation\">;</span> cin <span class=\"token operator\">>></span> tp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        cnt1 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>tp <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cnt2 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>tp <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">int</span> diff <span class=\"token operator\">=</span> cnt1 <span class=\"token operator\">-</span> cnt2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        ll x <span class=\"token operator\">=</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        res <span class=\"token operator\">=</span> res <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cnt1 <span class=\"token operator\">-</span> cnt2<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "校招"
            ]
        },
        {
            "id": "http://example.com/value/C++%E9%9D%A2%E8%AF%95%E9%A2%98",
            "url": "http://example.com/value/C++%E9%9D%A2%E8%AF%95%E9%A2%98",
            "title": "C++面试题",
            "date_published": "2024-03-08T13:53:12.049Z",
            "content_html": "<h1 id=\"c面试题\"><a class=\"anchor\" href=\"#c面试题\">#</a> C++ 面试题</h1>\n<h2 id=\"程序编译过程\"><a class=\"anchor\" href=\"#程序编译过程\">#</a> 程序编译过程</h2>\n<ul>\n<li>\n<p>预处理</p>\n<ol>\n<li>完成宏定义 <code>#define</code>  内容替换</li>\n<li>处理所有的条件预编译指令，如 <code>#if #endif</code></li>\n<li>把 <code>#include</code>  文件内容复制到 <code>.cpp</code>  文件中（递归执行）</li>\n<li>删除所有注释</li>\n</ol>\n</li>\n<li>\n<p>编译：转化为汇编代码，主要工作是检查一些语法规则，代码优化（寻找合适的寻址方式，使用位运算来替代乘法运算，删除多余的指令）</p>\n</li>\n<li>\n<p>汇编：将汇编代码转化为二进制格式的文件（机器码）</p>\n</li>\n<li>\n<p>链接：将多个目标文件以及库文件链接成最终的可执行文件</p>\n<ol>\n<li>\n<p>静态链接：在链接阶段将库文件的函数和数据合并到应用程序中，组成一个最终的可执行文件.</p>\n<blockquote>\n<ul>\n<li>\n<p>运行速度快：可执行程序中具备运行阶段所需要的所以东西</p>\n</li>\n<li>\n<p>空间浪费：可执行程序中有所以目标文件的副本。当多个程序对同一个目标文件有依赖关系时，那么这个目标文件在内存中会有多个副本</p>\n</li>\n<li>\n<p>当其中一个库文件需要修改，整个程序需要重新编译</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p>动态链接：在程序运行阶段才把多个目标文件链接成一个完整的程序.</p>\n<blockquote>\n<ul>\n<li>\n<p>运行效率会有所损耗</p>\n</li>\n<li>\n<p>节省空间：共享库</p>\n</li>\n<li>\n<p>更新方便：只需要重新编译修改的目标文件</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"cc内存空间\"><a class=\"anchor\" href=\"#cc内存空间\">#</a> C/C++ 内存空间</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4C.jpg\" alt=\"\" width=\"200px\" /><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4.png\" alt=\"\" width=\"200px\" /></p>\n<ul>\n<li>栈：用于存储局部变量，由编译器自动管理分配与释放，效率很高，但是内存有限</li>\n<li>堆：动态内存空间，由应用程序去控制。如若程序结束没有释放，则会由操作系统自动回收.</li>\n<li>代码区：存放函数体二进制代码</li>\n<li>全局 / 静态存储区：用于存储全局变量和静态变量。在以前 C 语言中，这部分分为初始化的 <code>.data</code>  和未初始化 <code>.bss</code> . 现在 C++ 中则没有这样的划分，区域内的变量会被默认初始化为 0.</li>\n<li>常量存储区：用于存储常量，不允许修改</li>\n</ul>\n<h2 id=\"堆与栈\"><a class=\"anchor\" href=\"#堆与栈\">#</a> 堆与栈</h2>\n<ul>\n<li>栈内存是由编译器自动管理的，堆可由程序员控制，对于开辟的内存需要主动释放，否则容易产生内存泄漏</li>\n<li>栈的内存增长方向是向着地址空间减小的方向，堆内存的增长方向是朝着地址空间增大的方向.</li>\n<li>栈分配的内存都是连续空间，同时是一个先进后出的数据结构，其不存在内存碎片的问题。堆所分配的内存空间不一定连续，会存在内存碎片的问题</li>\n<li>栈的分配效率要高于堆的分配效率。操作系统内有专门的寄存器用于存储栈的地址和栈顶指针地址。堆的内存分配是调用 C/C++ 的库函数，分配空间时还需要按照不同的算法去搜索足够大的空间进行分配。同时由于内存碎片问题，操作系统会进行内存紧缩的操作，需要额外的系统开销.</li>\n</ul>\n<h2 id=\"函数调用的过程\"><a class=\"anchor\" href=\"#函数调用的过程\">#</a> 函数调用的过程</h2>\n<h2 id=\"static\"><a class=\"anchor\" href=\"#static\">#</a> static</h2>\n<ul>\n<li>在函数中申明变量时，被 <code>static</code>  修饰的变量只会被初始化一次，改变了变量的存储位置（原来存储在栈区，现在存储在静态 / 全局存储区），延长了变量的生命周期</li>\n<li>被 <code>static</code>  修饰的变量默认初始化为 0</li>\n<li><code>static</code>  修饰全局变量\n<ol>\n<li>全局变量：既可以在源文件中使用，也可以在其他文件中使用（使用 <code>extern</code>  修饰）</li>\n<li>静态全局变量：只能在源文件中使用，使得全局变量的作用域变小</li>\n</ol>\n</li>\n<li><code>static</code>  所修饰的成员变量为所以对象共享，不占用具体实例的空间.</li>\n<li>静态成员变量必须在类外定义，定义时不加 <code>static</code>  关键字</li>\n<li>静态成员函数没有隐藏的 <code>this</code>  指针，不能访问非静态成员</li>\n<li>访问静态成员变量的方法：\n<ol>\n<li>静态成员变量为 <code>public</code> （对象，类，匿名对象）</li>\n<li>静态成员变量为 <code>private</code> （对象的静态成员函数，类的静态成员函数，匿名对象的静态成员函数）</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"const\"><a class=\"anchor\" href=\"#const\">#</a> const</h2>\n<ul>\n<li><code>const</code>  修饰变量时表示其为一个常量或想阻止一个变量被改变</li>\n<li><code>const</code>  在类外定义变量时，必须初始化，并之后无法更改</li>\n<li><code>const</code>  成员变量：不能在类外初始化，只能通过构造函数初始化列表进行初始化</li>\n<li><code>const</code>  对象不能调用非 <code>const</code>  成员函数</li>\n<li><code>const</code>  修饰的函数为常函数，不能改变类的成员变量</li>\n</ul>\n<h2 id=\"mutable\"><a class=\"anchor\" href=\"#mutable\">#</a> mutable</h2>\n<ul>\n<li><code>mutable</code>  与 <code>const</code>  是相对的，表示一个变量的易变的；被 <code>mutable</code>  修饰是成员变量可以再 <code>const</code>  修饰的函数内被修改（也可以被常对象进行直接修改）</li>\n</ul>\n<h2 id=\"explicit\"><a class=\"anchor\" href=\"#explicit\">#</a> explicit</h2>\n<ul>\n<li>用于修饰类的构造函数，被修饰的构造函数的类不能发生隐式的类型转化，只能以显示的类型转化</li>\n</ul>\n<h2 id=\"volatile\"><a class=\"anchor\" href=\"#volatile\">#</a> volatile</h2>\n<ul>\n<li>用于修饰变量，表示其值随时可能发送变化，编译器不会对访问该变量的代码进行优化，可以保证访问变量的稳定（从内存中读取）</li>\n<li><code>volatile</code>  指针</li>\n<li>多线程下的 <code>volatile</code> ：当多个线程都需要用到某一个变量时，应该用 <code>volatile</code> ，防止编译器把变量从内存装入 CPU 寄存器中</li>\n</ul>\n<h2 id=\"c三大特性\"><a class=\"anchor\" href=\"#c三大特性\">#</a> C++ 三大特性</h2>\n<ul>\n<li>封装、继承、多态（封装和继承可以实现 <code>代码的重用</code> ，多态可以实现 <code>接口的重用</code> ）\n<ol>\n<li>封装：将数据和实现过程包裹起来，隐藏代码的实现细节，通过定义的接口来访问数据成员，使代码模块化. (直接体现面向对象，代码重用，权限控制)\n<ul>\n<li><code>public</code> ：公有权限，类内可以访问，类外也可以访问</li>\n<li><code>protected</code> ：保护权限，类内可以访问，类外不可以访问</li>\n<li><code>private</code> ：私有权限，类内可以访问，类外不可以访问</li>\n</ul>\n</li>\n<li>继承：无需重新编写代码而可以直接使用现有类的所以功能，同时可以对现有类进行功能上的扩展，是一个从一般到特殊的过程.\n<ul>\n<li>权限继承：表示基类在子类中的最高权限（破坏继承： <code>friend</code> ，  <code>using</code> ）</li>\n<li>多继承</li>\n</ul>\n</li>\n<li>多态：一个接口有多种形态；多态是在不同继承关系的类对象，可以通过父类指针去指向子类对象，通过父类指针调用同一函数，可以产生了不同的行为.（父类的指针可以具有多种形态，称之为多态）（用父类型别的指针指向其子类的实例，然后通过父类指针调用实际的子类的成员函数）\n<ul>\n<li>虚函数（函数地址在运行阶段确定）（每个包含虚函数的类实例化出的对象除了成员变量之外，最前面会存储虚函数表指针；当发生继承时，派生类的虚表和父类一致，若子类中自身包含虚函数，则会添加到后面，若子类虚函数重写了父类的虚函数，则虚表中的地址也会发生响应的改变）</li>\n<li>编译器在编译阶段会为类（含义虚函数的类）生成虚函数表</li>\n<li>协变：基类和派生类虚函数的返回值不同（基类返回基类对象的指针或引用，派生类返回派生类对象的指针或引用）</li>\n<li>虚析构函数：基类中析构函数前使用 <code>virtual</code>  修饰。当基类指针指向派生类对象时，使用基类指针去释放空间时，则会去先调用派生类的析构函数，再去调用基类的析构函数；若不加 <code>virtual</code>  则不会触发动态绑定（多态），只会调用基类的析构函数，导致内存泄漏. (虽然虚构函数名不一样，其实也是一种重写，系统内部对析构函数做了特殊处理，将析构函数名称都改成了 <code>destructor</code> )</li>\n<li>虚函数地址在运行时绑定，使用了虚函数表的机制，所以在调用的时候会增加一次内存开销.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"为什么c默认析构函数不是虚函数\"><a class=\"anchor\" href=\"#为什么c默认析构函数不是虚函数\">#</a> 为什么 C++ 默认析构函数不是虚函数</h2>\n<ul>\n<li>虚函数需要虚函数表和虚函数表指针，会占用内存空间。如果一个类没有子类，那么就没有必要讲析构函数设置为虚函数</li>\n</ul>\n<h2 id=\"重载-重写-重定义\"><a class=\"anchor\" href=\"#重载-重写-重定义\">#</a> 重载、重写、重定义</h2>\n<ul>\n<li>重载：多个同名函数，他们的参数个数或者参数类型不同；（编译器根据函数不同的参数表，对同名函数的名称做修饰，然后这些同名函数就变成了不同的函数），也可以称之为静态多态，函数地址在编译器就已经确定了</li>\n<li>重定义：继承中的同名隐藏，当派生类中有一个函数与基类的函数名相同，不管参数是否相同，只要该函数不为虚函数，发生了重定义.</li>\n<li>重写：派生类中重写了基类的虚函数，其中函数名、参数列表和返回值都相同</li>\n</ul>\n<h2 id=\"final和override\"><a class=\"anchor\" href=\"#final和override\">#</a> final 和 override</h2>\n<ul>\n<li><code>final</code> ：修饰虚函数，表示该虚函数不能再被重写</li>\n<li><code>override</code> ：检查派生类虚函数是否重写了基类的某个虚函数，如果没有则编译器报错；</li>\n</ul>\n<h2 id=\"struct-与class\"><a class=\"anchor\" href=\"#struct-与class\">#</a> struct 与 class</h2>\n<ul>\n<li>C++ 中的 <code>struct</code>  默认 <code>public</code>  共有权限， <code>class</code>  默认 <code>private</code>  私有权限</li>\n<li>C 语言中的 <code>struct</code>  只是一个变量的集合体，只可以用于封装数据</li>\n</ul>\n<h2 id=\"new-和-malloc的区别\"><a class=\"anchor\" href=\"#new-和-malloc的区别\">#</a> new 和 malloc 的区别</h2>\n<p><code>new</code>  和 <code>malloc</code>  都是用于分配内存的，其中 <code>new</code>  是 C++ 中的操作符，可以被重载， <code>malloc</code>  是 C 语言中的库函数，不可以被重载</p>\n<ol>\n<li>参数不同；new 可以自动计算所分配的对象的内存大小，同时返回值为指向该对象的指针. malloc 则需要传入需要分配的内存的字节数，返回一个 <code>void *</code>  指针</li>\n<li>new 分配失败会抛出异常 <code>bac_alloc</code> ，malloc 分配失败会返回 <code>NULL</code></li>\n<li>new 分配的内存在 <code>free store</code> （自由存储区）上，malloc 分配的内存在堆上（其中自由存储区是 C++ 中的一个抽象的概念，new 的底层调用的逻辑是先调用 <code>operator new</code>  分配内存，由系统决定或者用户重载 <code>operator new</code>  决定，其次是调用对象的构造函数，初始化成员变量）</li>\n<li><code>malloc</code>  分配的内存是虚拟内存，而 <code>new</code>  分配的内存是物理内存。因为 new 调用了对象的构造函数，对对象成员进行了初始化（发生了缺页中断，使得虚拟内存映射到了物理内存）</li>\n</ol>\n<h2 id=\"delete-与-free\"><a class=\"anchor\" href=\"#delete-与-free\">#</a> delete 与 free</h2>\n<p><code>delete</code>  和 <code>free</code>  都是用于释放内存的，其中 <code>delete</code>  是 C++ 中的操作符，可以被重载，free 是 C 语言中的库函数，不可以被重载</p>\n<ol>\n<li>参数不同；delete 需要给出释放的对象的类型指针，free 可以是 <code>void *</code>  类型的指针（delete 底层调用的逻辑是先调用对象的析构函数，再调用 <code>operator delete</code>  释放对象所占内存）（free 只需要提供 <code>void *</code>  就可以释放申请的所以内存： <code>malloc</code>  在分配内存时，不仅仅是分配了用户所需要的内存空间的大小，还会在该空间上部分配额外的一部分空间用于存储此次分配的内存的描述信息）</li>\n</ol>\n<blockquote>\n<p>注意： <code>delete</code>  和 <code>free</code>  被调用后，指针也不会指向空，如果没有其他用途，需要把它设置为 <code>nullptr</code> ，否则会出现野指针.</p>\n</blockquote>\n<h2 id=\"free回收的内存是立即返回给操作系统吗\"><a class=\"anchor\" href=\"#free回收的内存是立即返回给操作系统吗\">#</a> free 回收的内存是立即返回给操作系统吗？</h2>\n<ul>\n<li>不是的。被 <code>free</code>  回收的内存会被 <code>ptmalloc</code>  使用双链表保存起来，当用户下一次申请内存空间的时候，会尝试先从这些内存中寻找合适的返回.</li>\n<li>可以避免频繁的系统调用，提高程序效率.</li>\n<li><code>ptmalloc</code>  也会尝试对小块进行合并，避免过多的内存碎片</li>\n</ul>\n<blockquote>\n<p><strong>C++11</strong> is the second major version of C++ and the most important update since C<ins>98. A large number of changes were introduced to both standardize existing practices and improve the abstractions available to the C</ins> programmers.</p>\n</blockquote>\n<h2 id=\"new与delete\"><a class=\"anchor\" href=\"#new与delete\">#</a> new [] 与 delete []</h2>\n<ul>\n<li><code>new[]</code>  会先调用 <code>operateor new[]</code>  分配内存，然后再分配的内存的前几个字节写入数组的大小，然后进行 n 次构造函数</li>\n</ul>\n<h2 id=\"malloc与free实现原理\"><a class=\"anchor\" href=\"#malloc与free实现原理\">#</a> malloc 与 free 实现原理</h2>\n<h2 id=\"c中的几种new\"><a class=\"anchor\" href=\"#c中的几种new\">#</a> C++ 中的几种 new</h2>\n<ul>\n<li><code>new</code> ： <code>plain new</code> ，分配内存失败会抛出异常</li>\n<li><code>nothrow new</code> ：分配内存失败不抛出异常，而是返回 <code>nullptr</code></li>\n<li><code>placement new</code> ：不会分配内存，在已有的内存空间上重新构造对象</li>\n</ul>\n<h2 id=\"c强制类型转换\"><a class=\"anchor\" href=\"#c强制类型转换\">#</a> C++ 强制类型转换</h2>\n<ul>\n<li>\n<p><code>static_cast&lt;T&gt;()</code> ：不进行类型检查，不安全</p>\n<ol>\n<li>\n<p>用于层次结构中基类与派生类间指针的转换</p>\n<p>a. 上行转换（派生类指针转化为基类指针），安全</p>\n<p>b. 下行转化（基类指针转化为派生类指针），不安全</p>\n</li>\n<li>\n<p>基本数据类型的转化</p>\n</li>\n<li>\n<p>将空指针转化为目标类型的指针</p>\n</li>\n</ol>\n</li>\n<li>\n<p><code>dynamic_cast</code> ：运行时处理（动态类型转换），只能针对指针或引用，专门用于派生类与基类之间的转换，会进行类型的检查，较安全（转换失败，指针为 <code>nullptr</code> ，和多态一起使用）</p>\n</li>\n<li>\n<p><code>reinterpret_cast</code> ：转化过程仅仅是简单的比特位拷贝，不安全</p>\n</li>\n<li>\n<p><code>const_cast&lt;T&gt;()</code> ：用于修改变量的 <code>const</code>  或 <code>volatile</code>  属性，变量类型与转换后的类型一致（只能修改底层 <code>const</code> ）</p>\n</li>\n</ul>\n<h2 id=\"指针与引用\"><a class=\"anchor\" href=\"#指针与引用\">#</a> 指针与引用</h2>\n<ul>\n<li>存储的是一个地址；而引用只是变量的别名.</li>\n<li>指针可不进行初始化，也可以指向空，并且指向可以改变；引用必须初始化，且只可绑定一个变量。这也导致了在使用指针时，往往需要判空操作，而引用是一种安全的指针，一定不为空（引用的底层是通过指针来实现）.</li>\n<li><code>sizeof</code>  指针得到的是指针的大小， <code>sizeof</code>  引用得到的是引用绑定对象的大小</li>\n<li>指针可以是多级的，引用只有一级</li>\n</ul>\n<h2 id=\"常引用\"><a class=\"anchor\" href=\"#常引用\">#</a> 常引用</h2>\n<ul>\n<li>\n<p>保护传递给函数的数据在函数内不背改变.  <code>const 类型&amp; 引用名</code></p>\n</li>\n<li>\n<p>在 C++ 中，临时对象都是 <code>const</code>  类型的，const 类型的对象转换为非 const 类型是非法的.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t    <span class=\"token comment\">//  非法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 非法</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"将引用作为函数返回值\"><a class=\"anchor\" href=\"#将引用作为函数返回值\">#</a> 将引用作为函数返回值</h2>\n<ul>\n<li>好处：在内存中不会产生返回值副本</li>\n</ul>\n<blockquote>\n<p>注意：不能返回局部变量的引用，不能返回函数内部 new 的内存空间的引用（无法释放）</p>\n</blockquote>\n<h2 id=\"野指针\"><a class=\"anchor\" href=\"#野指针\">#</a> 野指针</h2>\n<ul>\n<li>野指针：指向已被释放的内存空间或者指向没有访问权限的内存空间</li>\n<li>指针未被初始化、内存释放后未将指针设置为 <code>nullptr</code> 、指针超过了变量的作用范围（越界）都可能导致野指针的产生</li>\n</ul>\n<h2 id=\"c中的顶层const与底层const\"><a class=\"anchor\" href=\"#c中的顶层const与底层const\">#</a> C++ 中的顶层 const 与底层 const</h2>\n<ul>\n<li><code>顶层const</code> ： <code>const</code>  修饰的变量本身是一个常量，无法修改；（指的是指针，出现在 <code>*</code>  的右边）</li>\n<li><code>底层const</code> ： <code>const</code>  修饰的变量所指向的对象是一个常量（出现在 <code>*</code>  左边）</li>\n</ul>\n<blockquote>\n<p>使用 <code>const_cast</code>  时，只能改变运算对象的 <code>底层const</code></p>\n</blockquote>\n<h2 id=\"常量指针与指针常量\"><a class=\"anchor\" href=\"#常量指针与指针常量\">#</a> 常量指针与指针常量</h2>\n<ul>\n<li>常量指针： <code>int const* p = a</code> ，指针的指向可以改变，而不能通过该指针去改变所指向的内容</li>\n<li>指针常量： <code>int *const p = a</code> ，指针的指向不可改变，可以通过指针去改变指向的内容.</li>\n</ul>\n<h2 id=\"数组指针与指针数组\"><a class=\"anchor\" href=\"#数组指针与指针数组\">#</a> 数组指针与指针数组</h2>\n<ul>\n<li>\n<p>数组指针： <code>int (*p)[n]</code> ，指向一个整形的一维数组，这个数组的长度是 n，在执行 <code>p+1</code>  操作时， <code>p</code>  要跨越 n 个整形数据长度</p>\n</li>\n<li>\n<p>指针数组： <code>int *p[n]</code> ， <code>[]</code>  优先级高于 <code>*</code> ，是一个具有 n 个指针类型的数组.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//a 理解成一个一维数组，元素为 a [0], a [1], a [2]， 其中 a [0] 的类型为 (int *), a 与 & amp;a [0] 等价，类型为 int (*p)[4]</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"函数指针\"><a class=\"anchor\" href=\"#函数指针\">#</a> 函数指针</h2>\n<ul>\n<li>\n<p>函数指针的类型是由其返回类型和参数列表共同决定的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//pf 为一个函数指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 区别于 int *pf (const int&amp;, const int&amp;);\tpf 为一个函数声明，函数返回值为 int</span></pre></td></tr></table></figure></li>\n<li>\n<p>函数指针的赋值</p>\n<ol>\n<li><code>指针名=函数名</code></li>\n<li><code>指针名=&amp;函数名</code></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"宏定义与typedef\"><a class=\"anchor\" href=\"#宏定义与typedef\">#</a> 宏定义与 typedef</h2>\n<ul>\n<li>宏定义主要用于定义常量或者一些书写复杂的内容， <code>typedef</code>  主要用于定义类型的别名</li>\n<li>宏定义在预处理阶段完成，只会进行文本的替换，不进行类型的检查； <code>typedef</code>  在编译阶段完成，会进行类型的检查</li>\n</ul>\n<h2 id=\"const与define\"><a class=\"anchor\" href=\"#const与define\">#</a> const 与 define</h2>\n<h2 id=\"inline内联函数\"><a class=\"anchor\" href=\"#inline内联函数\">#</a> inline 内联函数</h2>\n<ul>\n<li>把 inline 函数体复制到函数调用处（避免了函数调用所需要的压栈和出栈操作，提高了程序运行效率）</li>\n<li>特性类似于宏定义，但 inline 会做类型的检查</li>\n<li>不能包含循环、递归复杂操作</li>\n<li><code>inline</code>  函数有多个返回点，会使用 <code>goto</code>  跳转</li>\n<li>在类中定义的成员函数，除了虚函数，往往会自动转化为内联函数</li>\n<li>缺点：\n<ol>\n<li>代码膨胀，占用代码区的内存空间</li>\n<li>是否内敛由编译器决定，不可控.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"this指针\"><a class=\"anchor\" href=\"#this指针\">#</a> this 指针</h2>\n<ul>\n<li>this 是一个隐含于每一个非静态成员函数中的特殊指针，指向被实例化的对象。当调用对象成员函数时，会将对象的地址赋值给 <code>this</code>  指针，并会隐式的将 <code>this</code>  指针传入</li>\n<li><code>tihs</code>  为一个右值，并由 <code>const</code>  修饰</li>\n</ul>\n<h2 id=\"初始化列表c11\"><a class=\"anchor\" href=\"#初始化列表c11\">#</a> 初始化列表（C++11）</h2>\n<ul>\n<li>通过花括号来进行初始化。直接在变量名后面跟上初始化列表来进行对象的初始化</li>\n</ul>\n<h2 id=\"类成员函数初始化方法\"><a class=\"anchor\" href=\"#类成员函数初始化方法\">#</a> 类成员函数初始化方法</h2>\n<ul>\n<li>\n<p><code>赋值初始化</code> ：在函数体内进行赋值. (其是在所有成员被分配内存之后才进行的，此时会触发成员函数的默认构造函数，同时进入函数体赋值往往会产生临时对象，和拷贝赋值函数)</p>\n</li>\n<li>\n<p><code>列表初始化</code> ：在冒号后使用初始化列表进行初始化.（给数据成员分配内存时进行的，在函数体执行之前）</p>\n<blockquote>\n<p>对于基本数据类型而言，两种在速度方面没有太大的差别，但对于复杂一些的数据类型，列表初始化速度会快于赋值初始化</p>\n<p>什么情况下必须用初始化列表？</p>\n<ul>\n<li>初始化一个引用成员变量时</li>\n<li>初始化一个常量成员时</li>\n<li>当父类没有默认构造函数的时</li>\n<li>当成员变量没有默认构造函数时</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"using定义别名\"><a class=\"anchor\" href=\"#using定义别名\">#</a> using 定义别名</h2>\n<h2 id=\"autoc11\"><a class=\"anchor\" href=\"#autoc11\">#</a> auto（C++11）</h2>\n<ul>\n<li>类型推导，通过变量值编译器自动的进行类型的推导，相当于一个占位符（使用 <code>auto</code>  时，必须进行变量的初始化）</li>\n<li>对于有 <code>const</code>  和 <code>volatile</code>  修饰的变量， <code>auto</code>  只能推断底层 <code>const</code>  或 <code>volatile</code> ，顶层 <code>const</code>  或 <code>volatile</code>  会被忽略，需要自己添加</li>\n<li>不能在函数的参数中使用，不能用于定义数组，不能用于类的非静态成员</li>\n</ul>\n<h2 id=\"decltypec11\"><a class=\"anchor\" href=\"#decltypec11\">#</a> decltype（C++11）</h2>\n<blockquote>\n<p>我们希望从表达式（函数返回值）中推断出想要定义的变量的类型，但是却不想用表达式的值去初始化变量，这种情况 <code>auto</code>  显得无力了</p>\n</blockquote>\n<ul>\n<li>推断表达式类型作为变量的定义类型</li>\n<li>推断函数返回值（实际不会调用，仅推断）</li>\n<li>无论是底层 <code>const</code>  或 <code>volatile</code>  还是顶层 <code>const</code>  或 <code>volatile</code>  都会被保留</li>\n</ul>\n<h2 id=\"范围for循环c11\"><a class=\"anchor\" href=\"#范围for循环c11\">#</a> 范围 for 循环（C++11）</h2>\n<h2 id=\"null与nullptr\"><a class=\"anchor\" href=\"#null与nullptr\">#</a> NULL 与 nullptr</h2>\n<ul>\n<li>\n<p><code>NULL</code>  来自 C 语言，由宏定义实现， <code>nullptr</code>  是 C++11 新增的关键字</p>\n</li>\n<li>\n<p>在 C 语言中 <code>NULL</code>  被定义成 <code>(void *)0</code> ，在 C++ 中则被定义成 <code>0</code> ，故引入 <code>nullptr</code>  替代了 <code>NULL</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NULL</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NULL</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure></li>\n<li>\n<p>当有一个函数被重载时，且参数都是指针类型时，调用函数时需要明确强制转换成对应类型，否则编译器无法确定需要调用哪一个函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"char* p\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"int* p\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"int p\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 语句 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 语句 2</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 语句 3</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 运行结果：</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 语句 1：char* p</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 语句 2: 报错，有多个匹配</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//3：int p</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"lambda表达式\"><a class=\"anchor\" href=\"#lambda表达式\">#</a> lambda 表达式</h2>\n<ul>\n<li>匿名函数。一个 <code>lambda</code>  表达式具有一个返回值、一个参数列表和一个函数体。与函数不同的是， <code>lambda</code>  表达式可以定义在函数体内部，格式为： <code>[capture list](parameter list)-&gt;return type &#123;function body&#125;</code> ，不能用默认参数.</li>\n<li><code>capture list</code> ：捕获列表\n<ol>\n<li><code>[]</code> ：不捕获任何变量</li>\n<li><code>[&amp;]</code> ：捕获外部作用域中的所有变量，并作为引用在函数体内使用（按引用捕获）</li>\n<li><code>[=]</code> ：捕获外部作用域中的所有变量，并作为副本在函数体内使用（按值捕获）</li>\n<li></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"左值引用与右值引用\"><a class=\"anchor\" href=\"#左值引用与右值引用\">#</a> 左值引用与右值引用</h2>\n<ul>\n<li>左值引用：对左值的引用（可以出现在等式的左边，也可以出现在等式的右边，是具名的，同时可以取地址， <code>const左值引用</code> 可以引用右值）; 避免对象的拷贝，在一定程度上让程序脱离了危险的指针</li>\n<li>右值引用：右值（只能出现在等式的右边，不能取地址，纯右值 [字面值，返回的非引用的函数调用，后置自增 / 减，算术表达式，逻辑表达式，比较表达式], 将亡值 [C++11 引入，会触发移动构造或者移动赋值，并进行资源转移]）往往是没有名称，在实际开发中我们可能需要对右值进行修改，需要借助右值引用（ <code>类型&amp;&amp; 变量名=右值</code> ）\n<ol>\n<li>移动语义：将一个临时对象（将亡值）的资源转移到另外一个对象中去，可以减少不必要的资源的销毁和开辟，提高运行效率</li>\n<li><code>move()</code> ：将左值强制转化为右值引用，通过右值引用来使用，实现移动语义.</li>\n<li>完美转发</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"大小端存储\"><a class=\"anchor\" href=\"#大小端存储\">#</a> 大小端存储</h2>\n<ul>\n<li>大端存储：高位存储在低字节中</li>\n<li>小端存储：低位存储在低字节中</li>\n</ul>\n<blockquote>\n<p>在 <code>Socket网络编程</code> 中，有主机字节序和网络字节序</p>\n</blockquote>\n<h2 id=\"内存对齐\"><a class=\"anchor\" href=\"#内存对齐\">#</a> 内存对齐</h2>\n<blockquote>\n<p>实际的内存读取时，是一组一组来读取的，一组内存在 n 个字节</p>\n</blockquote>\n<ul>\n<li>加快内存的获取速度</li>\n</ul>\n<h2 id=\"内存池\"><a class=\"anchor\" href=\"#内存池\">#</a> 内存池</h2>\n<ul>\n<li>预先申请分配一定数量的内存块留作备用，当有新的内存需求时，就从内存池中分出一部分内存块，对于使用完的内存块将其放回内存池。若内存池不够，在继续申请新的内存. （防止频繁的内存申请与释放所带来的开销，提高分配效率，同时可以避免内存碎片）</li>\n</ul>\n<h2 id=\"stl六大组件\"><a class=\"anchor\" href=\"#stl六大组件\">#</a> STL 六大组件</h2>\n<ul>\n<li>容器、算法、迭代器、适配器、仿函数、空间分配器</li>\n</ul>\n<h2 id=\"为什么stack的pop和top要分离\"><a class=\"anchor\" href=\"#为什么stack的pop和top要分离\">#</a> 为什么 stack 的 pop () 和 top () 要分离</h2>\n<ul>\n<li>通过 <code>pop()</code>  来弹出并返回栈顶值这种方式不安全，可能导致原始数据丢失；pop () 在函数返回时，会发生对象的拷贝，如果弹出对象比较大，同时堆内内存比较紧张，可能无法分配住够的内存会抛出异常，无法正确的返回栈顶元素，但是此时栈顶元素已经弹出.</li>\n<li>通过引用或者指针可以解决这个问题</li>\n</ul>\n<h2 id=\"map-set-multimap-multiset关联容器\"><a class=\"anchor\" href=\"#map-set-multimap-multiset关联容器\">#</a> map、set、multimap、multiset（关联容器）</h2>\n<ul>\n<li>底层实现是 <code>红黑树</code></li>\n<li><code>set</code>  和 <code>multiset</code>  会对元素进行排序， <code>set</code>  不存储重复元素， <code>multiset</code>  可以存储重复元素</li>\n<li><code>map</code>  和 <code>multimap</code>  存储的元素为 k-v 键值对，会更加 key 进行排序， <code>map</code>  中不允许重复 key， <code>multimap</code>  可以重复 key</li>\n</ul>\n<h2 id=\"unordered_set与set\"><a class=\"anchor\" href=\"#unordered_set与set\">#</a> unordered_set 与 set</h2>\n<ul>\n<li><code>unordered_set</code>  内部无序，通过哈希来实现，对于非标准类型需要提供判等函数，插入，查询，删除的时间复杂度都是 <code>O(1)</code> ，但是不稳定，当数据量大冲突大时，时间复杂度最坏退化为 <code>O(n)</code> ； <code>set</code>  内部有序，通过红黑树来实现，对于非标准类型需要提供比较函数，插入，查询，删除的时间复杂度比较稳定 <code>log2(n)</code> .</li>\n</ul>\n<h2 id=\"哈希函数\"><a class=\"anchor\" href=\"#哈希函数\">#</a> 哈希函数</h2>\n<ul>\n<li>平方取中发：去关键字的平方值的中间几位作为哈希地址</li>\n</ul>\n<h2 id=\"哈希冲突\"><a class=\"anchor\" href=\"#哈希冲突\">#</a> 哈希冲突</h2>\n<ul>\n<li>开放地址法（再散列）：线性探测，再平方探测、伪随机探测</li>\n<li>拉链法</li>\n<li>再哈希</li>\n</ul>\n<h2 id=\"vector的扩容机制\"><a class=\"anchor\" href=\"#vector的扩容机制\">#</a> vector 的扩容机制</h2>\n<ul>\n<li><code>vector</code>  是一个动态数组，当插入元素使，若 <code>capacity</code>  和 <code>size</code>  相等，则会发生扩容； <code>vector</code>  扩容并不是在原有空间进行扩充，而是在堆内申请一块更大空间的区域，将原来的数据复制过去，同时释放原有空间。至于这个扩容系数，得看具体的实现，得看取舍（内存和效率的取舍）， <code>GCC</code>  下的扩容系数是 2</li>\n</ul>\n<h2 id=\"vectorclear-swap-shrink_to_fitresizereserve\"><a class=\"anchor\" href=\"#vectorclear-swap-shrink_to_fitresizereserve\">#</a> vector（clear(), swap(), shrink_to_fit(),resize(),reserve()）</h2>\n<ul>\n<li><code>clear()</code> ：清空内容，不释放内存（capacity 不变，size 变成 0）</li>\n<li><code>swap()</code> ：清空内容，释放内存 (capacity，size 均变成 0)</li>\n<li><code>shrink_to_fit()</code> ：可能会释放内存，使 capacity 与 size 适配（capacity 与 size 相等）</li>\n<li><code>resize(n)</code> ：会改变 <code>vector</code>  的 size</li>\n<li><code>reserve()</code> ：不会改变 size，但是可能会改变 capacity. 主要目的是为了优化性能，避免在添加元素时频繁进行内存分配</li>\n</ul>\n<h2 id=\"vector与list\"><a class=\"anchor\" href=\"#vector与list\">#</a> vector 与 list</h2>\n<ul>\n<li><code>vector</code>  的内存空间是连续的，可以在 <code>o(1)</code>  内实现随机存取，但是需要再内部进行插入和删除时，需要 <code>O(n)</code> .</li>\n<li><code>list</code>  是双向链表，内存空间不一定连续，往往是离散的， <code>O(n)</code>  完成随机存取，但是可以 <code>O(1)</code>  实现删除和插入操作</li>\n</ul>\n<h2 id=\"clear的时间复杂度\"><a class=\"anchor\" href=\"#clear的时间复杂度\">#</a> clear 的时间复杂度</h2>\n<ul>\n<li>无论是顺序容器还是关联容器在使用 <code>clear()</code>  时，时间复杂度都是 <code>O(n)</code> ；因为执行 <code>clear()</code>  需要调用元素的析构函数，这个析构函数会逐个进行。不过当存储的数据类型是基本数据类型的时候，不需要虚构，系统可能会做一些优化， <code>vector</code>  容器可以使得复杂度降为常数级.</li>\n</ul>\n<h2 id=\"c智能指针c11\"><a class=\"anchor\" href=\"#c智能指针c11\">#</a> C<ins> 智能指针（C</ins>11）</h2>\n<ul>\n<li>\n<p>智能指针是一个类，用来存储指向动态内存空间的对象指针，负责自动释放动态内存，防止堆内存泄漏.</p>\n</li>\n<li>\n<p><code>auto_ptr</code> ：C<ins>98 引入，由于其不够安全，被 <code>unique_ptr</code>  取代，C</ins>11 废弃；</p>\n</li>\n<li>\n<p><code>unique_ptr</code> ：与 <code>auto_ptr</code>  一样采用所有权模式，同一时间只能有一个指针可以指向某个对象，但是 <code>unique_ptr</code>  禁止了拷贝操作， <code>unique_ptr</code>  采用了移动赋值 <code>move()</code>  函数来进行控制权转移.</p>\n</li>\n<li>\n<p><code>share_ptr</code> ：共享所有权的一个智能指针。允许多个指针指针指向同一个对象，并使用引用计数来管理指向对象的指针（成员函数 <code>use_count()</code>  可获得引用计数），该对象和相关资源会在最后一个引用被销毁时释放</p>\n<ul>\n<li>\n<p><code>share_ptr</code> ：内部的引用计数是线程安全的，但是对象的读取需要加锁.</p>\n</li>\n<li>\n<p><code>shared_ptr</code>  循环计数问题：创建了两个 <code>shared_ptr</code>  分别指向两个对象，而这两个对象内的一个共享指针分别又指向了对方，造成了循环计数，使得两个对象的空间都无法被释放.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> _data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>ListNode<span class=\"token operator\">></span> ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~ListNode()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>ListNode<span class=\"token operator\">></span> <span class=\"token function\">node1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>ListNode<span class=\"token operator\">></span> <span class=\"token function\">node2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> node1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> node2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tnode1<span class=\"token operator\">-></span>ptr <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tnode2<span class=\"token operator\">-></span>ptr <span class=\"token operator\">=</span> node1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> node1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> node2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 常用的解决方案是讲成员函数内的 shared_pre 改成弱指针 weak_ptr</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><code>weak_ptr</code> ：一种不控制对象生命周期的智能指针，不会影响 <code>share_ptr</code>  的引用计数，只是提供一种访问其管理对象的方式</p>\n</li>\n</ul>\n<h2 id=\"内存泄漏\"><a class=\"anchor\" href=\"#内存泄漏\">#</a> 内存泄漏</h2>\n<ul>\n<li>堆内存泄漏（ <code>Heap leak</code> ）</li>\n<li>在释放对象数组时没有使用 <code>delete []</code>  而使用 <code>delete</code></li>\n<li>没有将基类的析构函数定义为虚函数</li>\n<li>缺少拷贝构造函数和拷贝赋值函数</li>\n</ul>\n<blockquote>\n<p>Linux 下内存泄漏检查工具：<strong>Valgrind</strong></p>\n</blockquote>\n<h2 id=\"深拷贝与浅拷贝\"><a class=\"anchor\" href=\"#深拷贝与浅拷贝\">#</a> 深拷贝与浅拷贝</h2>\n<ul>\n<li>浅拷贝：C++ 默认的方式（如果程序员不主动编写拷贝构造函数和赋值构造，编译器将以浅拷贝的方式生成缺省的函数），简单的将成员函数值进行复制. （当成员变量出现指针时，则会导致多个指针指向同一片内存空间，新旧对象共享内存，当其中一个对象释放内存，再调释放其他对象时就会出现问题，同一片内存空间被释放了多次）</li>\n<li>深拷贝：必须显示的提供拷贝构造函数和赋值构造，新旧对象不共享内存</li>\n</ul>\n<h2 id=\"c类默认生成的函数\"><a class=\"anchor\" href=\"#c类默认生成的函数\">#</a> C++ 类默认生成的函数</h2>\n<ul>\n<li>无参构造函数、析构函数、拷贝构造函数、拷贝赋值函数、移动构造函数、移动赋值函数、重载取地址符，均是 <code>public</code></li>\n</ul>\n<h2 id=\"对象复用与零拷贝\"><a class=\"anchor\" href=\"#对象复用与零拷贝\">#</a> 对象复用与零拷贝</h2>\n<h2 id=\"stl内存优化\"><a class=\"anchor\" href=\"#stl内存优化\">#</a> STL 内存优化</h2>\n<h2 id=\"const-2\"><a class=\"anchor\" href=\"#const-2\">#</a>  <code>const</code></h2>\n<ul>\n<li>\n<p>当以编译初始化的方式定义了一个 <code>const</code>  对象时，例如 <code>const int bufsize=512</code> ，编译器将在编译过程中把用到该变量的地方都替换成对应的值。</p>\n</li>\n<li>\n<p><code>const</code>  对象被设定为仅在文件内有效，当多个文件中出现了同名的 <code>const</code>  变量时，其实等同于在不同文件下分别定义了独立的变量；当某一个 <code>const</code>  对象需要再多个文件间共享时，我们需要对于 <code>const</code>  变量不管是声明还是定义都添加 <code>extern</code>  关键字。</p>\n</li>\n</ul>\n<h3 id=\"对常量的引用\"><a class=\"anchor\" href=\"#对常量的引用\">#</a> 对常量的引用</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> dval <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>r <span class=\"token operator\">=</span> dval<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>等价于</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> dval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>r <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>系统在内部会将对常数的引用绑定在一个临时对象上，实际并未绑定 <code>dval</code> ；通过这种设计可以防止非法的操作。</p>\n<h2 id=\"顺序容器\"><a class=\"anchor\" href=\"#顺序容器\">#</a> 顺序容器</h2>\n<ul>\n<li><code>vector</code> ：可变长数组。支持快速随机访问。在尾部之外的其他位置插入或者删除元素可能比较慢</li>\n<li><code>deque</code> ：双端队列。支持快速随机访问。在头部或者尾部插入、删除元素速度很快</li>\n<li><code>list</code> ：双向列表。</li>\n<li><code>forward_list</code> ：单向列表。</li>\n<li><code>array</code> ：固定大小数组。支持快速随机访问。不能添加或者删除元素。</li>\n<li><code>string</code> ：与 <code>vector</code>  类似，但专门用于存储字符</li>\n</ul>\n<h2 id=\"原始字面量\"><a class=\"anchor\" href=\"#原始字面量\">#</a> 原始字面量</h2>\n<p><strong>定义方式</strong>：<em>R×××(原始字符串)×××</em></p>\n<p>其中 <code>()</code>  两侧的字符串 <code>×××</code>  可以省略，原始字面量 <code>R</code>  可以直接表示字符串的实际含义（不进行转义）</p>\n<h2 id=\"指针空值类型\"><a class=\"anchor\" href=\"#指针空值类型\">#</a> 指针空值类型</h2>\n<p>C 与 C<ins> 内定义的 <code>NULL</code>  含义不同；C</ins> 内定义： <code>#define NULL 0</code> , 而 C 内的定义： <code>#define NULL ((void *)0)</code> .C 与 C<ins> 都是强类型语言，从 C 到 C</ins> 语言的类型定义变的更加严格，C++ 内不允许 <code>void( *)</code>  类型的变量隐式转化为其他类型。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 宏定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\"><span class=\"token constant\">NULL</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NULL</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NULL</span>  <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p><code>nullptr</code>  无法隐式的转化为整形，但是可以隐式匹配指针类型</p>\n<h2 id=\"constexpr\"><a class=\"anchor\" href=\"#constexpr\">#</a> constexpr</h2>\n<p>const 的双重语义：<em>变量只读</em>和<em>修饰常量</em></p>\n<p>c++ 程序从编写完成到执行分为四个阶段：<em>预处理</em>、<em>编译</em>、<em>汇编</em>和<em>链接</em>。非常量表达式只能在运行阶段计算出结果，但常量表达式计算发生程序编译阶段，这可以大大提高程序的执行效率。</p>\n<p>为了提高 C++ 程序的执行效率，我们可以将程序中值不需要发生变化的变量定义为常量，也可以使用 <code>constexpr</code>  修饰函数返回值，这种函数被称作常量表达式函数，这写函数主要包括一下几种：普通函数、类成员函数、类构造函数、模版函数。</p>\n<ol>\n<li>函数必须要用返回值，并且 <code>return</code>  返回的表达式必须是常量表达式</li>\n<li>函数在使用之前，必须有对应的定义语句</li>\n<li>整个函数的函数体中，不能出现非常量表达式之外的语句（ <code>using, typedef, static_assert, return</code>  语句除外）</li>\n</ol>\n<p>C++11 语法中， <code>constexpr</code>  可以修饰模版函数，但由于模版中类型的不确定性，因此模版函数实例化后的函数是否符合常量表达式函数的要求也是不确定的。如果 <code>constexpr</code>  修饰的模版函数实例化结果不满足常量表达式函数的要求，则 <code>constexpr</code>  会被自动忽略，即该函数就等同于一个普通函数</p>\n<h2 id=\"auto\"><a class=\"anchor\" href=\"#auto\">#</a> auto</h2>\n<p><code>auto</code>  可以自动推导变量类型；使用 <code>auto</code>  声明的变量必须要进行初始化，以让编译器推导出它的实际类型，在编译阶段将 <code>auto</code>  占位符替换成其真正的类型。</p>\n<ul>\n<li>当变量不是指针或者引用类型时，推导的结果中不会保留 <code>const和、volatile</code>  关键字</li>\n<li>当变量是指针或者引用类型时，推导的结果中会保留 <code>const和、volatile</code>  关键字</li>\n</ul>\n<h3 id=\"auto的限制\"><a class=\"anchor\" href=\"#auto的限制\">#</a> auto 的限制</h3>\n<ul>\n<li>不能作为函数参数使用。因为只有在函数被调用的时候才会给函数参数传递实参， <code>auto</code>  要求必须给修饰的变量赋值。</li>\n<li>不能用于类的非静态成员变量的初始化（类的非静态成员不属于类，而属于对象，只有对象被创建出来之后，才能给非静态成员变量赋值）</li>\n<li>不能使用 <code>auto</code>  关键字定义数组</li>\n<li>无法使用 <code>auto</code>  推导出模版</li>\n</ul>\n<h2 id=\"使用结构化绑定来解包绑定的返回值\"><a class=\"anchor\" href=\"#使用结构化绑定来解包绑定的返回值\">#</a> 使用结构化绑定来解包绑定的返回值</h2>\n<p>结构化绑定是 C++17 新特性，其可以结合语法糖自动推导类型，并可以从组对、元祖和结构体中提取单独的变量（解包）</p>\n<ol>\n<li>\n<p>使用结构化绑定是为了能过更加简单的为绑定的多个变量进行赋值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//  对 pair 的结构化绑定</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">divide_remainder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dividend<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> divisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">divide_remainder</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//  对 tuple 进行结构化绑定</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>tuple<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>system_clock<span class=\"token double-colon punctuation\">::</span>time_point<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> valid_time<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">stock_info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INTC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//  对自定义结构体进行结构化绑定</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">employee</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    string name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    string role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>employee<span class=\"token operator\">></span> employees<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/* 注意：在适当时候使用引用，尽量减少不必要的复制 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> employees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Name: \"</span> <span class=\"token operator\">&lt;&lt;</span> name</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Role: \"</span> <span class=\"token operator\">&lt;&lt;</span> role</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Salary: \"</span> <span class=\"token operator\">&lt;&lt;</span> salary <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>STL</code>  中的基础数据结构都能通过结构化绑定来直接进行访问</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">></span> animal_population<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>species<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> animal_population<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"There are \"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> species</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" on this planet.\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>Node：与 C 的语法特征不同，将复杂结构体作为返回值传回会耗费大量的时间，因为对象需要在返回函数中进行初始化，之后将这个对象拷贝到相应容器中返回给调用端。现代编译器支持<a href=\"https://zh.wikipedia.org/wiki/%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%98%E5%8C%96\"><strong>返回值优化</strong></a> (RVO, <em>return value optimization</em>) 技术，这项技术可以省略中间副本的拷贝。</p>\n</blockquote>\n<h2 id=\"带初始化的if和switch\"><a class=\"anchor\" href=\"#带初始化的if和switch\">#</a> 带初始化的 if 和 switch</h2>\n<h2 id=\"括号初始化\"><a class=\"anchor\" href=\"#括号初始化\">#</a> 括号初始化</h2>\n<p><code>C++11</code>  引入了新的括号初始化语法 <code>&#123;&#125;</code> ，其不仅允许集合式的初始化，而且还是对常规构造函数的调用。遗憾的是，当与 <code>auto</code>  类型变量结合使用时，这种方式很容易出现错误， <code>c++17</code>  增强了这一系列初始化规则。</p>\n",
            "tags": [
                "面试题"
            ]
        },
        {
            "id": "http://example.com/value/%E9%87%91%E5%B1%B1%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F",
            "url": "http://example.com/value/%E9%87%91%E5%B1%B1%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F",
            "title": "金山会议室预约系统",
            "date_published": "2023-12-15T07:40:37.498Z",
            "content_html": "<h1 id=\"金山会议室预约系统\"><a class=\"anchor\" href=\"#金山会议室预约系统\">#</a> 金山会议室预约系统</h1>\n<h2 id=\"操作系统\"><a class=\"anchor\" href=\"#操作系统\">#</a> 操作系统</h2>\n<p><strong>Linux Ubuntu20.04</strong></p>\n<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<ul>\n<li><a href=\"#%E9%9C%80%E6%B1%82%E8%AF%B4%E6%98%8E\">需求说明</a></li>\n<li><a href=\"#Mysql%E9%85%8D%E7%BD%AE\">Mysql 配置</a></li>\n<li><a href=\"#%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C\">系统运行</a></li>\n<li><a href=\"#%E7%B3%BB%E7%BB%9F%E6%BC%94%E7%A4%BA\">系统演示</a></li>\n<li><a href=\"#%E8%AE%BE%E8%AE%A1%E9%80%BB%E8%BE%91(%E7%8A%B6%E6%80%81%E6%9C%BA%E6%A8%A1%E5%9E%8B)\">设计逻辑 (状态机模型)</a></li>\n</ul>\n<h2 id=\"需求说明\"><a class=\"anchor\" href=\"#需求说明\">#</a> 需求说明</h2>\n<ul>\n<li>首先进入登录界面，可选登录身份有：\n<ul>\n<li>业务人员</li>\n<li>行政人员</li>\n<li>系统管理员</li>\n<li>退出</li>\n</ul>\n</li>\n<li>选择上述自己身份后，进入子菜单，每个身份都需要进行验证后，输入下列信息：\n<ul>\n<li>账号</li>\n<li>密码</li>\n</ul>\n</li>\n<li>验证通过后，根据自己不同的身份，进入对应二级子菜单\n<ul>\n<li>业务人员\n<ul>\n<li>申请预约 —— 预约会议室</li>\n<li>查看所有预约 —— 查看全部预约信息以及预约状态</li>\n<li>查看自己预约 —— 查看自己的预约状态</li>\n<li>取消预约 —— 取消会议室的预约</li>\n<li>退出 —— 退出登录</li>\n</ul>\n</li>\n<li>行政人员\n<ul>\n<li>查看所有预约 —— 查看全部预约信息以及预约状态</li>\n<li>审批预约 —— 对职员的预约进行审批</li>\n<li>退出 —— 退出登录</li>\n</ul>\n</li>\n<li>管理员具体功能\n<ul>\n<li>添加账户 —— 添加业务人员或行政的账户，账户名具有唯一性。\n<ul>\n<li>添加信息 —— 工号、姓名、用户名、密码</li>\n</ul>\n</li>\n<li>查看账户\n<ul>\n<li>查看业务人员账户</li>\n<li>查看行政人员账户</li>\n</ul>\n</li>\n<li>查看会议室信息 —— 可以查看所有会议室的名称、容量、预约信息</li>\n<li>清空预约 —— 清空所有预约记录</li>\n<li>退出 —— 退出登录</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://github.com/Special-JiaHao/images/blob/main/%E9%9C%80%E6%B1%82%E8%AF%B4%E6%98%8E.png?raw=true\" alt=\"需求说明\" /></p>\n<h2 id=\"mysql配置\"><a class=\"anchor\" href=\"#mysql配置\">#</a> Mysql 配置</h2>\n<p>mysql 数据库需要预先生成 <code>administrator</code>  (管理员身份表),  <code>business_user</code>  (业务人员身份表),  <code>staff</code>  (行政人员身份表) 以及 <code>records</code>  (预约记录表), sql 命令如下:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> administrator<span class=\"token punctuation\">(</span><span class=\"token keyword\">user</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> password <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> business_user<span class=\"token punctuation\">(</span>jid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> password <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> staff<span class=\"token punctuation\">(</span>jid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> password <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> records<span class=\"token punctuation\">(</span>rid <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span> jid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> period <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">status</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> room_id <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>数据库配置文件在 <code>s1.cpp</code>  中进行相应的修改，修改内容如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 数据库配置参数 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> HOST<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* IP 127.0.0.1 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> USER<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* User root */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> PASSWORD<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* password root */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> DATABASE<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"reservation_system\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* database reservation_system */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> PORT <span class=\"token operator\">=</span> <span class=\"token number\">3306</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* port 3306 */</span></pre></td></tr></table></figure><h2 id=\"系统运行\"><a class=\"anchor\" href=\"#系统运行\">#</a> 系统运行</h2>\n<ul>\n<li>编译</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">make</span></pre></td></tr></table></figure><ul>\n<li>运行服务端</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token builtin class-name\">cd</span> bin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> ./app_server</pre></td></tr></table></figure><ul>\n<li>运行客户端</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token builtin class-name\">cd</span> bin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> ./app_client1     <span class=\"token comment\"># 运行客户端 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> ./app_client2     <span class=\"token comment\"># 运行客户端 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> ./app_client3     <span class=\"token comment\"># 运行客户端 3</span></pre></td></tr></table></figure><h2 id=\"系统演示\"><a class=\"anchor\" href=\"#系统演示\">#</a> 系统演示</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1NwZWNpYWwtSmlhSGFvL2ltYWdlcy9tYWluLyVFOSU4NyU5MSVFNSVCMSVCMSVFOSVBMiU4NCVFNyVCQSVBNiVFNyVCMyVCQiVFNyVCQiU5RiVFNiU5RSVCNiVFNiU5RSU4NC5wbmc=\">【Bilibili 金山预约系统演示】</span></p>\n<h2 id=\"系统架构cs\"><a class=\"anchor\" href=\"#系统架构cs\">#</a> 系统架构 C/S</h2>\n<ul>\n<li>系统采用 C/S 架构，服务端开启监听端口，用于接收客户端的访问请求，使用多线程去分别处理用户请求，同时服务端与 Mysql 数据库进行数据传输；客户端通过服务端开启的端口与服务端建立连接，同时接收用户输入发送响应的请求.<br />\n<img data-src=\"https://github.com/Special-JiaHao/images/blob/main/%E9%87%91%E5%B1%B1%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84.png?raw=true\" alt=\"系统架构\" /></li>\n</ul>\n<h2 id=\"设计逻辑状态机模型\"><a class=\"anchor\" href=\"#设计逻辑状态机模型\">#</a> 设计逻辑（状态机模型）</h2>\n<p><img data-src=\"https://github.com/Special-JiaHao/images/blob/main/%E9%87%91%E5%B1%B1%E7%B3%BB%E7%BB%9F%E9%80%BB%E8%BE%91.png?raw=true\" alt=\"状态机模型\" /></p>\n",
            "tags": [
                "Project"
            ]
        },
        {
            "id": "http://example.com/value/stl_list",
            "url": "http://example.com/value/stl_list",
            "title": "STL List",
            "date_published": "2023-10-03T07:35:12.758Z",
            "content_html": "<h1 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> List</h1>\n<h2 id=\"list-node设计\"><a class=\"anchor\" href=\"#list-node设计\">#</a> list node 设计</h2>\n<p>list 是由 list 节点串联而成，需要分开设计。SGI STL 内设计的 list 为双向链表，故 list 节点需要三个成员变量。</p>\n<h3 id=\"核心实现\"><a class=\"anchor\" href=\"#核心实现\">#</a> 核心实现</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">list_node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tlist_node<span class=\"token operator\">*</span> prev<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tlist_node<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tT data<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"sgi-stl内源码实现\"><a class=\"anchor\" href=\"#sgi-stl内源码实现\">#</a> SGI STL 内源码实现：</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_List_node_base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  _List_node_base<span class=\"token operator\">*</span> _M_next<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 后继</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  _List_node_base<span class=\"token operator\">*</span> _M_prev<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 前驱</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 节点 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Tp</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_List_node</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">_List_node_base</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  _Tp _M_data<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">//  数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/list_node.png\" alt=\"\" title=\"list node\" height=\"350px\" width=\"700px\" /></p>\n<h2 id=\"list的迭代器\"><a class=\"anchor\" href=\"#list的迭代器\">#</a> list 的迭代器</h2>\n<h2 id=\"list的数据结构\"><a class=\"anchor\" href=\"#list的数据结构\">#</a> list 的数据结构</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Tp</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">_Alloc</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">_List_base</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _Alloc allocator_type<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 空间配置器类型 allocator_type</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  allocator_type <span class=\"token function\">get_allocator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">_List_base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">//  构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    _M_node <span class=\"token operator\">=</span> <span class=\"token function\">_M_get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    _M_node<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">=</span> _M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    _M_node<span class=\"token operator\">-></span>_M_prev <span class=\"token operator\">=</span> _M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">_List_base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">_M_put_node</span><span class=\"token punctuation\">(</span>_M_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">typedef</span> simple_alloc<span class=\"token operator\">&lt;</span>_List_node<span class=\"token operator\">&lt;</span>_Tp<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span> _Alloc_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  _List_node<span class=\"token operator\">&lt;</span>_Tp<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token function\">_M_get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _Alloc_type<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_put_node</span><span class=\"token punctuation\">(</span>_List_node<span class=\"token operator\">&lt;</span>_Tp<span class=\"token operator\">></span><span class=\"token operator\">*</span> __p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> _Alloc_type<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">deallocate</span><span class=\"token punctuation\">(</span>__p<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  _List_node<span class=\"token operator\">&lt;</span>_Tp<span class=\"token operator\">></span><span class=\"token operator\">*</span> _M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Tp</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">_Alloc</span> <span class=\"token operator\">=</span> <span class=\"token function\">__STL_DEFAULT_ALLOCATOR</span><span class=\"token punctuation\">(</span>_Tp<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">list</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">_List_base</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">_Tp</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">_Alloc</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// requirements:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">__STL_CLASS_REQUIRES</span><span class=\"token punctuation\">(</span>_Tp<span class=\"token punctuation\">,</span> _Assignable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _List_base<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span> _Base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> _Void_pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>      </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _Tp value_type<span class=\"token punctuation\">;</span>                              <span class=\"token comment\">//  数据类型 : value_type</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">typedef</span> value_type<span class=\"token operator\">*</span> pointer<span class=\"token punctuation\">;</span>                         <span class=\"token comment\">//  指针 : pointer</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">const</span> value_type<span class=\"token operator\">*</span> const_pointer<span class=\"token punctuation\">;</span>             <span class=\"token comment\">//  常量指针 : const_pointer</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">typedef</span> value_type<span class=\"token operator\">&amp;</span> reference<span class=\"token punctuation\">;</span>                       <span class=\"token comment\">//  引用 : reference</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">const</span> value_type<span class=\"token operator\">&amp;</span> const_reference<span class=\"token punctuation\">;</span>           <span class=\"token comment\">//  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _List_node<span class=\"token operator\">&lt;</span>_Tp<span class=\"token operator\">></span> _Node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">typedef</span> size_t size_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">typedef</span> ptrdiff_t difference_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">_Base</span><span class=\"token double-colon punctuation\">::</span>allocator_type allocator_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  allocator_type <span class=\"token function\">get_allocator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _Base<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_allocator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _List_iterator<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span>_Tp<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span>_Tp<span class=\"token operator\">*</span><span class=\"token operator\">></span>             iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _List_iterator<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">*</span><span class=\"token operator\">></span> const_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_CLASS_PARTIAL_SPECIALIZATION</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">typedef</span> reverse_iterator<span class=\"token operator\">&lt;</span>const_iterator<span class=\"token operator\">></span> const_reverse_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">typedef</span> reverse_iterator<span class=\"token operator\">&lt;</span>iterator<span class=\"token operator\">></span>       reverse_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span> <span class=\"token comment\">/* __STL_CLASS_PARTIAL_SPECIALIZATION */</span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">typedef</span> reverse_bidirectional_iterator<span class=\"token operator\">&lt;</span>const_iterator<span class=\"token punctuation\">,</span>value_type<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                                         const_reference<span class=\"token punctuation\">,</span>difference_type<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          const_reverse_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">typedef</span> reverse_bidirectional_iterator<span class=\"token operator\">&lt;</span>iterator<span class=\"token punctuation\">,</span>value_type<span class=\"token punctuation\">,</span>reference<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                                         difference_type<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          reverse_iterator<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_CLASS_PARTIAL_SPECIALIZATION */</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_HAS_NAMESPACES</span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token keyword\">using</span> _Base<span class=\"token double-colon punctuation\">::</span>_M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">using</span> _Base<span class=\"token double-colon punctuation\">::</span>_M_put_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">using</span> _Base<span class=\"token double-colon punctuation\">::</span>_M_get_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_HAS_NAMESPACES */</span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  _Node<span class=\"token operator\">*</span> <span class=\"token function\">_M_create_node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    _Node<span class=\"token operator\">*</span> __p <span class=\"token operator\">=</span> <span class=\"token function\">_M_get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    __STL_TRY <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token function\">_Construct</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>__p<span class=\"token operator\">-></span>_M_data<span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">__STL_UNWIND</span><span class=\"token punctuation\">(</span><span class=\"token function\">_M_put_node</span><span class=\"token punctuation\">(</span>__p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">return</span> __p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  _Node<span class=\"token operator\">*</span> <span class=\"token function\">_M_create_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    _Node<span class=\"token operator\">*</span> __p <span class=\"token operator\">=</span> <span class=\"token function\">_M_get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    __STL_TRY <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token function\">_Construct</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>__p<span class=\"token operator\">-></span>_M_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token function\">__STL_UNWIND</span><span class=\"token punctuation\">(</span><span class=\"token function\">_M_put_node</span><span class=\"token punctuation\">(</span>__p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">return</span> __p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token keyword\">explicit</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span> __a <span class=\"token operator\">=</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>             <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>_Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_M_node<span class=\"token operator\">-></span>_M_next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  const_iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>_Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_M_node<span class=\"token operator\">-></span>_M_next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>             <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _M_node<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  const_iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _M_node<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  const_reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">const_reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  const_reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">const_reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token comment\">/* 判空函数 empty */</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _M_node<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">==</span> _M_node<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  size_type <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    size_type __result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">return</span> __result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  size_type <span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">size_type</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  reference <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  const_reference <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  reference <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  const_reference <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token comment\">/* 交换 swap */</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> __STD<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_M_node<span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token comment\">/* 插入 insert */</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  iterator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    _Node<span class=\"token operator\">*</span> __tmp <span class=\"token operator\">=</span> <span class=\"token function\">_M_create_node</span><span class=\"token punctuation\">(</span>__x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    __tmp<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    __tmp<span class=\"token operator\">-></span>_M_prev <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">=</span> __tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev <span class=\"token operator\">=</span> __tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token keyword\">return</span> __tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  iterator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>__position<span class=\"token punctuation\">,</span> <span class=\"token function\">_Tp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_MEMBER_TEMPLATES</span></span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token comment\">// Check whether it's an integral type.  If so, it's not an iterator.</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Integer</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_insert_dispatch</span><span class=\"token punctuation\">(</span>iterator __pos<span class=\"token punctuation\">,</span> _Integer __n<span class=\"token punctuation\">,</span> _Integer __x<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                          __true_type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token function\">_M_fill_insert</span><span class=\"token punctuation\">(</span>__pos<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>size_type<span class=\"token punctuation\">)</span> __n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_Tp<span class=\"token punctuation\">)</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_insert_dispatch</span><span class=\"token punctuation\">(</span>iterator __pos<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                          _InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                          __false_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __pos<span class=\"token punctuation\">,</span> _InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">_Is_integer</span><span class=\"token operator\">&lt;</span>_InputIterator<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>_Integral _Integral<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token function\">_M_insert_dispatch</span><span class=\"token punctuation\">(</span>__pos<span class=\"token punctuation\">,</span> __first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">,</span> <span class=\"token function\">_Integral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">*</span> __first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">*</span> __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>              const_iterator __first<span class=\"token punctuation\">,</span> const_iterator __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __pos<span class=\"token punctuation\">,</span> size_type __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">_M_fill_insert</span><span class=\"token punctuation\">(</span>__pos<span class=\"token punctuation\">,</span> __n<span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_fill_insert</span><span class=\"token punctuation\">(</span>iterator __pos<span class=\"token punctuation\">,</span> size_type __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  iterator <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    _List_node_base<span class=\"token operator\">*</span> __next_node <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    _List_node_base<span class=\"token operator\">*</span> __prev_node <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    _Node<span class=\"token operator\">*</span> __n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    __prev_node<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">=</span> __next_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    __next_node<span class=\"token operator\">-></span>_M_prev <span class=\"token operator\">=</span> __prev_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token function\">_Destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>__n<span class=\"token operator\">-></span>_M_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token function\">_M_put_node</span><span class=\"token punctuation\">(</span>__n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> __next_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  iterator <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iterator __first<span class=\"token punctuation\">,</span> iterator __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> _Base<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_type __new_size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_type __new_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>__new_size<span class=\"token punctuation\">,</span> <span class=\"token function\">_Tp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    iterator __tmp <span class=\"token operator\">=</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>__tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>size_type __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __value<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>       <span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span> __a <span class=\"token operator\">=</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __n<span class=\"token punctuation\">,</span> __value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>  <span class=\"token keyword\">explicit</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>size_type __n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span><span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __n<span class=\"token punctuation\">,</span> <span class=\"token function\">_Tp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre></pre></td></tr><tr><td data-num=\"176\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_MEMBER_TEMPLATES</span></span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>  <span class=\"token comment\">// We don't need any dispatching tricks here, because insert does all of</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>  <span class=\"token comment\">// that anyway.  </span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>_InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>       <span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span> __a <span class=\"token operator\">=</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre></pre></td></tr><tr><td data-num=\"186\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">*</span> __first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">*</span> __last<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>       <span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span> __a <span class=\"token operator\">=</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>const_iterator __first<span class=\"token punctuation\">,</span> const_iterator __last<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>       <span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span> __a <span class=\"token operator\">=</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__x<span class=\"token punctuation\">.</span><span class=\"token function\">get_allocator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>  list<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre></pre></td></tr><tr><td data-num=\"205\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>  <span class=\"token comment\">// assign(), a generalized assignment member function.  Two</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>  <span class=\"token comment\">// versions: one that takes a count, and one that takes a range.</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>  <span class=\"token comment\">// The range version is a member template, so we dispatch on whether</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>  <span class=\"token comment\">// or not the type is an integer.</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>size_type __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">_M_fill_assign</span><span class=\"token punctuation\">(</span>__n<span class=\"token punctuation\">,</span> __val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_fill_assign</span><span class=\"token punctuation\">(</span>size_type __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre></pre></td></tr><tr><td data-num=\"215\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_MEMBER_TEMPLATES</span></span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>_InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">_Is_integer</span><span class=\"token operator\">&lt;</span>_InputIterator<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>_Integral _Integral<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>    <span class=\"token function\">_M_assign_dispatch</span><span class=\"token punctuation\">(</span>__first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">,</span> <span class=\"token function\">_Integral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Integer</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_assign_dispatch</span><span class=\"token punctuation\">(</span>_Integer __n<span class=\"token punctuation\">,</span> _Integer __val<span class=\"token punctuation\">,</span> __true_type<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">_M_fill_assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_type<span class=\"token punctuation\">)</span> __n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_Tp<span class=\"token punctuation\">)</span> __val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_assign_dispatch</span><span class=\"token punctuation\">(</span>_InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>                          __false_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre></pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre></pre></td></tr><tr><td data-num=\"233\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> iterator __first<span class=\"token punctuation\">,</span> iterator __last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__position <span class=\"token operator\">!=</span> __last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>      <span class=\"token comment\">// Remove [first, last) from its old position.</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>      __last<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token operator\">-></span>_M_next     <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>      __first<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token operator\">-></span>_M_next    <span class=\"token operator\">=</span> __last<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>      __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">=</span> __first<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"240\"></td><td><pre></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>      <span class=\"token comment\">// Splice [first, last) into its new position.</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>      _List_node_base<span class=\"token operator\">*</span> __tmp      <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>      __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev <span class=\"token operator\">=</span> __last<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>      __last<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev     <span class=\"token operator\">=</span> __first<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"245\"></td><td><pre>      __first<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev    <span class=\"token operator\">=</span> __tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre></pre></td></tr><tr><td data-num=\"249\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> list<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>__x<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"252\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>__position<span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> list<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> iterator __i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>    iterator __j <span class=\"token operator\">=</span> __i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>    <span class=\"token operator\">++</span>__j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__position <span class=\"token operator\">==</span> __i <span class=\"token operator\">||</span> __position <span class=\"token operator\">==</span> __j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>__position<span class=\"token punctuation\">,</span> __i<span class=\"token punctuation\">,</span> __j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> list<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> iterator __first<span class=\"token punctuation\">,</span> iterator __last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__first <span class=\"token operator\">!=</span> __last<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"262\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>__position<span class=\"token punctuation\">,</span> __first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre></pre></td></tr><tr><td data-num=\"270\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_MEMBER_TEMPLATES</span></span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Predicate</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove_if</span><span class=\"token punctuation\">(</span>_Predicate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_BinaryPredicate</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span>_BinaryPredicate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_StrictWeakOrdering</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> _StrictWeakOrdering<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_StrictWeakOrdering</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>_StrictWeakOrdering<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "STL"
            ]
        }
    ]
}