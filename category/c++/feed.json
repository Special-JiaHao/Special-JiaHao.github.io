{
    "version": "https://jsonfeed.org/version/1",
    "title": "繁華落盡 似水流年 • All posts by \"c++\" category",
    "description": "编程日记 & 随笔",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/value/%E9%87%91%E5%B1%B1%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F",
            "url": "http://example.com/value/%E9%87%91%E5%B1%B1%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F",
            "title": "金山会议室预约系统",
            "date_published": "2023-12-15T07:40:37.498Z",
            "content_html": "<h1 id=\"金山会议室预约系统\"><a class=\"anchor\" href=\"#金山会议室预约系统\">#</a> 金山会议室预约系统</h1>\n<h2 id=\"操作系统\"><a class=\"anchor\" href=\"#操作系统\">#</a> 操作系统</h2>\n<p><strong>Linux Ubuntu20.04</strong></p>\n<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<ul>\n<li><a href=\"#%E9%9C%80%E6%B1%82%E8%AF%B4%E6%98%8E\">需求说明</a></li>\n<li><a href=\"#Mysql%E9%85%8D%E7%BD%AE\">Mysql 配置</a></li>\n<li><a href=\"#%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C\">系统运行</a></li>\n<li><a href=\"#%E7%B3%BB%E7%BB%9F%E6%BC%94%E7%A4%BA\">系统演示</a></li>\n<li><a href=\"#%E8%AE%BE%E8%AE%A1%E9%80%BB%E8%BE%91(%E7%8A%B6%E6%80%81%E6%9C%BA%E6%A8%A1%E5%9E%8B)\">设计逻辑 (状态机模型)</a></li>\n</ul>\n<h2 id=\"需求说明\"><a class=\"anchor\" href=\"#需求说明\">#</a> 需求说明</h2>\n<ul>\n<li>首先进入登录界面，可选登录身份有：\n<ul>\n<li>业务人员</li>\n<li>行政人员</li>\n<li>系统管理员</li>\n<li>退出</li>\n</ul>\n</li>\n<li>选择上述自己身份后，进入子菜单，每个身份都需要进行验证后，输入下列信息：\n<ul>\n<li>账号</li>\n<li>密码</li>\n</ul>\n</li>\n<li>验证通过后，根据自己不同的身份，进入对应二级子菜单\n<ul>\n<li>业务人员\n<ul>\n<li>申请预约 —— 预约会议室</li>\n<li>查看所有预约 —— 查看全部预约信息以及预约状态</li>\n<li>查看自己预约 —— 查看自己的预约状态</li>\n<li>取消预约 —— 取消会议室的预约</li>\n<li>退出 —— 退出登录</li>\n</ul>\n</li>\n<li>行政人员\n<ul>\n<li>查看所有预约 —— 查看全部预约信息以及预约状态</li>\n<li>审批预约 —— 对职员的预约进行审批</li>\n<li>退出 —— 退出登录</li>\n</ul>\n</li>\n<li>管理员具体功能\n<ul>\n<li>添加账户 —— 添加业务人员或行政的账户，账户名具有唯一性。\n<ul>\n<li>添加信息 —— 工号、姓名、用户名、密码</li>\n</ul>\n</li>\n<li>查看账户\n<ul>\n<li>查看业务人员账户</li>\n<li>查看行政人员账户</li>\n</ul>\n</li>\n<li>查看会议室信息 —— 可以查看所有会议室的名称、容量、预约信息</li>\n<li>清空预约 —— 清空所有预约记录</li>\n<li>退出 —— 退出登录</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://github.com/Special-JiaHao/images/blob/main/%E9%9C%80%E6%B1%82%E8%AF%B4%E6%98%8E.png?raw=true\" alt=\"需求说明\" /></p>\n<h2 id=\"mysql配置\"><a class=\"anchor\" href=\"#mysql配置\">#</a> Mysql 配置</h2>\n<p>mysql 数据库需要预先生成 <code>administrator</code>  (管理员身份表),  <code>business_user</code>  (业务人员身份表),  <code>staff</code>  (行政人员身份表) 以及 <code>records</code>  (预约记录表), sql 命令如下:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> administrator<span class=\"token punctuation\">(</span><span class=\"token keyword\">user</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> password <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> business_user<span class=\"token punctuation\">(</span>jid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> password <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> staff<span class=\"token punctuation\">(</span>jid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> password <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> records<span class=\"token punctuation\">(</span>rid <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span> jid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> period <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">status</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> room_id <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>数据库配置文件在 <code>s1.cpp</code>  中进行相应的修改，修改内容如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 数据库配置参数 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> HOST<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* IP 127.0.0.1 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> USER<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* User root */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> PASSWORD<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* password root */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> DATABASE<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"reservation_system\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* database reservation_system */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> PORT <span class=\"token operator\">=</span> <span class=\"token number\">3306</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* port 3306 */</span></pre></td></tr></table></figure><h2 id=\"系统运行\"><a class=\"anchor\" href=\"#系统运行\">#</a> 系统运行</h2>\n<ul>\n<li>编译</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">make</span></pre></td></tr></table></figure><ul>\n<li>运行服务端</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token builtin class-name\">cd</span> bin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> ./app_server</pre></td></tr></table></figure><ul>\n<li>运行客户端</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token builtin class-name\">cd</span> bin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> ./app_client1     <span class=\"token comment\"># 运行客户端 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> ./app_client2     <span class=\"token comment\"># 运行客户端 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> ./app_client3     <span class=\"token comment\"># 运行客户端 3</span></pre></td></tr></table></figure><h2 id=\"系统演示\"><a class=\"anchor\" href=\"#系统演示\">#</a> 系统演示</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1NwZWNpYWwtSmlhSGFvL2ltYWdlcy9tYWluLyVFOSU4NyU5MSVFNSVCMSVCMSVFOSVBMiU4NCVFNyVCQSVBNiVFNyVCMyVCQiVFNyVCQiU5RiVFNiU5RSVCNiVFNiU5RSU4NC5wbmc=\">【Bilibili 金山预约系统演示】</span></p>\n<h2 id=\"系统架构cs\"><a class=\"anchor\" href=\"#系统架构cs\">#</a> 系统架构 C/S</h2>\n<ul>\n<li>系统采用 C/S 架构，服务端开启监听端口，用于接收客户端的访问请求，使用多线程去分别处理用户请求，同时服务端与 Mysql 数据库进行数据传输；客户端通过服务端开启的端口与服务端建立连接，同时接收用户输入发送响应的请求.<br />\n<img data-src=\"https://github.com/Special-JiaHao/images/blob/main/%E9%87%91%E5%B1%B1%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84.png?raw=true\" alt=\"系统架构\" /></li>\n</ul>\n<h2 id=\"设计逻辑状态机模型\"><a class=\"anchor\" href=\"#设计逻辑状态机模型\">#</a> 设计逻辑（状态机模型）</h2>\n<p><img data-src=\"https://github.com/Special-JiaHao/images/blob/main/%E9%87%91%E5%B1%B1%E7%B3%BB%E7%BB%9F%E9%80%BB%E8%BE%91.png?raw=true\" alt=\"状态机模型\" /></p>\n",
            "tags": [
                "Project"
            ]
        },
        {
            "id": "http://example.com/value/stl_list",
            "url": "http://example.com/value/stl_list",
            "title": "STL List",
            "date_published": "2023-10-03T07:35:12.758Z",
            "content_html": "<h1 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> List</h1>\n<h2 id=\"list-node设计\"><a class=\"anchor\" href=\"#list-node设计\">#</a> list node 设计</h2>\n<p>list 是由 list 节点串联而成，需要分开设计。SGI STL 内设计的 list 为双向链表，故 list 节点需要三个成员变量。</p>\n<h3 id=\"核心实现\"><a class=\"anchor\" href=\"#核心实现\">#</a> 核心实现</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">list_node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tlist_node<span class=\"token operator\">*</span> prev<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tlist_node<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tT data<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"sgi-stl内源码实现\"><a class=\"anchor\" href=\"#sgi-stl内源码实现\">#</a> SGI STL 内源码实现：</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_List_node_base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  _List_node_base<span class=\"token operator\">*</span> _M_next<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 后继</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  _List_node_base<span class=\"token operator\">*</span> _M_prev<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 前驱</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 节点 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Tp</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_List_node</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">_List_node_base</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  _Tp _M_data<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">//  数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/list_node.png\" alt=\"\" title=\"list node\" height=\"350px\" width=\"700px\" /></p>\n<h2 id=\"list的迭代器\"><a class=\"anchor\" href=\"#list的迭代器\">#</a> list 的迭代器</h2>\n<h2 id=\"list的数据结构\"><a class=\"anchor\" href=\"#list的数据结构\">#</a> list 的数据结构</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Tp</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">_Alloc</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">_List_base</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _Alloc allocator_type<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 空间配置器类型 allocator_type</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  allocator_type <span class=\"token function\">get_allocator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">_List_base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">//  构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    _M_node <span class=\"token operator\">=</span> <span class=\"token function\">_M_get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    _M_node<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">=</span> _M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    _M_node<span class=\"token operator\">-></span>_M_prev <span class=\"token operator\">=</span> _M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">_List_base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">_M_put_node</span><span class=\"token punctuation\">(</span>_M_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">typedef</span> simple_alloc<span class=\"token operator\">&lt;</span>_List_node<span class=\"token operator\">&lt;</span>_Tp<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span> _Alloc_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  _List_node<span class=\"token operator\">&lt;</span>_Tp<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token function\">_M_get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _Alloc_type<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_put_node</span><span class=\"token punctuation\">(</span>_List_node<span class=\"token operator\">&lt;</span>_Tp<span class=\"token operator\">></span><span class=\"token operator\">*</span> __p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> _Alloc_type<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">deallocate</span><span class=\"token punctuation\">(</span>__p<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  _List_node<span class=\"token operator\">&lt;</span>_Tp<span class=\"token operator\">></span><span class=\"token operator\">*</span> _M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Tp</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">_Alloc</span> <span class=\"token operator\">=</span> <span class=\"token function\">__STL_DEFAULT_ALLOCATOR</span><span class=\"token punctuation\">(</span>_Tp<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">list</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">_List_base</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">_Tp</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">_Alloc</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// requirements:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">__STL_CLASS_REQUIRES</span><span class=\"token punctuation\">(</span>_Tp<span class=\"token punctuation\">,</span> _Assignable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _List_base<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span> _Base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> _Void_pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>      </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _Tp value_type<span class=\"token punctuation\">;</span>                              <span class=\"token comment\">//  数据类型 : value_type</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">typedef</span> value_type<span class=\"token operator\">*</span> pointer<span class=\"token punctuation\">;</span>                         <span class=\"token comment\">//  指针 : pointer</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">const</span> value_type<span class=\"token operator\">*</span> const_pointer<span class=\"token punctuation\">;</span>             <span class=\"token comment\">//  常量指针 : const_pointer</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">typedef</span> value_type<span class=\"token operator\">&amp;</span> reference<span class=\"token punctuation\">;</span>                       <span class=\"token comment\">//  引用 : reference</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">const</span> value_type<span class=\"token operator\">&amp;</span> const_reference<span class=\"token punctuation\">;</span>           <span class=\"token comment\">//  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _List_node<span class=\"token operator\">&lt;</span>_Tp<span class=\"token operator\">></span> _Node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">typedef</span> size_t size_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">typedef</span> ptrdiff_t difference_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">_Base</span><span class=\"token double-colon punctuation\">::</span>allocator_type allocator_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  allocator_type <span class=\"token function\">get_allocator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _Base<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_allocator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _List_iterator<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span>_Tp<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span>_Tp<span class=\"token operator\">*</span><span class=\"token operator\">></span>             iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">typedef</span> _List_iterator<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">*</span><span class=\"token operator\">></span> const_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_CLASS_PARTIAL_SPECIALIZATION</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">typedef</span> reverse_iterator<span class=\"token operator\">&lt;</span>const_iterator<span class=\"token operator\">></span> const_reverse_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">typedef</span> reverse_iterator<span class=\"token operator\">&lt;</span>iterator<span class=\"token operator\">></span>       reverse_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span> <span class=\"token comment\">/* __STL_CLASS_PARTIAL_SPECIALIZATION */</span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">typedef</span> reverse_bidirectional_iterator<span class=\"token operator\">&lt;</span>const_iterator<span class=\"token punctuation\">,</span>value_type<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                                         const_reference<span class=\"token punctuation\">,</span>difference_type<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          const_reverse_iterator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">typedef</span> reverse_bidirectional_iterator<span class=\"token operator\">&lt;</span>iterator<span class=\"token punctuation\">,</span>value_type<span class=\"token punctuation\">,</span>reference<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                                         difference_type<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          reverse_iterator<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_CLASS_PARTIAL_SPECIALIZATION */</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_HAS_NAMESPACES</span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token keyword\">using</span> _Base<span class=\"token double-colon punctuation\">::</span>_M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">using</span> _Base<span class=\"token double-colon punctuation\">::</span>_M_put_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">using</span> _Base<span class=\"token double-colon punctuation\">::</span>_M_get_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_HAS_NAMESPACES */</span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  _Node<span class=\"token operator\">*</span> <span class=\"token function\">_M_create_node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    _Node<span class=\"token operator\">*</span> __p <span class=\"token operator\">=</span> <span class=\"token function\">_M_get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    __STL_TRY <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token function\">_Construct</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>__p<span class=\"token operator\">-></span>_M_data<span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">__STL_UNWIND</span><span class=\"token punctuation\">(</span><span class=\"token function\">_M_put_node</span><span class=\"token punctuation\">(</span>__p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">return</span> __p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  _Node<span class=\"token operator\">*</span> <span class=\"token function\">_M_create_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    _Node<span class=\"token operator\">*</span> __p <span class=\"token operator\">=</span> <span class=\"token function\">_M_get_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    __STL_TRY <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token function\">_Construct</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>__p<span class=\"token operator\">-></span>_M_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token function\">__STL_UNWIND</span><span class=\"token punctuation\">(</span><span class=\"token function\">_M_put_node</span><span class=\"token punctuation\">(</span>__p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">return</span> __p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token keyword\">explicit</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span> __a <span class=\"token operator\">=</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>             <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>_Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_M_node<span class=\"token operator\">-></span>_M_next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  const_iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>_Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_M_node<span class=\"token operator\">-></span>_M_next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>             <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _M_node<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  const_iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _M_node<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  const_reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">const_reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  const_reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">const_reverse_iterator</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token comment\">/* 判空函数 empty */</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> _M_node<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">==</span> _M_node<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  size_type <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    size_type __result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">return</span> __result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  size_type <span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">size_type</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  reference <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  const_reference <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  reference <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  const_reference <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token comment\">/* 交换 swap */</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> __STD<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_M_node<span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token comment\">/* 插入 insert */</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  iterator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    _Node<span class=\"token operator\">*</span> __tmp <span class=\"token operator\">=</span> <span class=\"token function\">_M_create_node</span><span class=\"token punctuation\">(</span>__x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    __tmp<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    __tmp<span class=\"token operator\">-></span>_M_prev <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">=</span> __tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev <span class=\"token operator\">=</span> __tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token keyword\">return</span> __tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  iterator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>__position<span class=\"token punctuation\">,</span> <span class=\"token function\">_Tp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_MEMBER_TEMPLATES</span></span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token comment\">// Check whether it's an integral type.  If so, it's not an iterator.</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Integer</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_insert_dispatch</span><span class=\"token punctuation\">(</span>iterator __pos<span class=\"token punctuation\">,</span> _Integer __n<span class=\"token punctuation\">,</span> _Integer __x<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                          __true_type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token function\">_M_fill_insert</span><span class=\"token punctuation\">(</span>__pos<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>size_type<span class=\"token punctuation\">)</span> __n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_Tp<span class=\"token punctuation\">)</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_insert_dispatch</span><span class=\"token punctuation\">(</span>iterator __pos<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                          _InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                          __false_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __pos<span class=\"token punctuation\">,</span> _InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">_Is_integer</span><span class=\"token operator\">&lt;</span>_InputIterator<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>_Integral _Integral<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token function\">_M_insert_dispatch</span><span class=\"token punctuation\">(</span>__pos<span class=\"token punctuation\">,</span> __first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">,</span> <span class=\"token function\">_Integral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">*</span> __first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">*</span> __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>              const_iterator __first<span class=\"token punctuation\">,</span> const_iterator __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>iterator __pos<span class=\"token punctuation\">,</span> size_type __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">_M_fill_insert</span><span class=\"token punctuation\">(</span>__pos<span class=\"token punctuation\">,</span> __n<span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_fill_insert</span><span class=\"token punctuation\">(</span>iterator __pos<span class=\"token punctuation\">,</span> size_type __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  iterator <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    _List_node_base<span class=\"token operator\">*</span> __next_node <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    _List_node_base<span class=\"token operator\">*</span> __prev_node <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    _Node<span class=\"token operator\">*</span> __n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    __prev_node<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">=</span> __next_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    __next_node<span class=\"token operator\">-></span>_M_prev <span class=\"token operator\">=</span> __prev_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token function\">_Destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>__n<span class=\"token operator\">-></span>_M_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token function\">_M_put_node</span><span class=\"token punctuation\">(</span>__n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> __next_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  iterator <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iterator __first<span class=\"token punctuation\">,</span> iterator __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> _Base<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_type __new_size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_type __new_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>__new_size<span class=\"token punctuation\">,</span> <span class=\"token function\">_Tp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    iterator __tmp <span class=\"token operator\">=</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>__tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>size_type __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __value<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>       <span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span> __a <span class=\"token operator\">=</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __n<span class=\"token punctuation\">,</span> __value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>  <span class=\"token keyword\">explicit</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>size_type __n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span><span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __n<span class=\"token punctuation\">,</span> <span class=\"token function\">_Tp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre></pre></td></tr><tr><td data-num=\"176\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_MEMBER_TEMPLATES</span></span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>  <span class=\"token comment\">// We don't need any dispatching tricks here, because insert does all of</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>  <span class=\"token comment\">// that anyway.  </span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>_InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>       <span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span> __a <span class=\"token operator\">=</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre></pre></td></tr><tr><td data-num=\"186\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">*</span> __first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">*</span> __last<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>       <span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span> __a <span class=\"token operator\">=</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>const_iterator __first<span class=\"token punctuation\">,</span> const_iterator __last<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>       <span class=\"token keyword\">const</span> allocator_type<span class=\"token operator\">&amp;</span> __a <span class=\"token operator\">=</span> <span class=\"token function\">allocator_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_Base</span><span class=\"token punctuation\">(</span>__x<span class=\"token punctuation\">.</span><span class=\"token function\">get_allocator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>  list<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list<span class=\"token operator\">&lt;</span>_Tp<span class=\"token punctuation\">,</span> _Alloc<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre></pre></td></tr><tr><td data-num=\"205\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>  <span class=\"token comment\">// assign(), a generalized assignment member function.  Two</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>  <span class=\"token comment\">// versions: one that takes a count, and one that takes a range.</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>  <span class=\"token comment\">// The range version is a member template, so we dispatch on whether</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>  <span class=\"token comment\">// or not the type is an integer.</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>size_type __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">_M_fill_assign</span><span class=\"token punctuation\">(</span>__n<span class=\"token punctuation\">,</span> __val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_fill_assign</span><span class=\"token punctuation\">(</span>size_type __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre></pre></td></tr><tr><td data-num=\"215\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_MEMBER_TEMPLATES</span></span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>_InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">_Is_integer</span><span class=\"token operator\">&lt;</span>_InputIterator<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>_Integral _Integral<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>    <span class=\"token function\">_M_assign_dispatch</span><span class=\"token punctuation\">(</span>__first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">,</span> <span class=\"token function\">_Integral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Integer</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_assign_dispatch</span><span class=\"token punctuation\">(</span>_Integer __n<span class=\"token punctuation\">,</span> _Integer __val<span class=\"token punctuation\">,</span> __true_type<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">_M_fill_assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_type<span class=\"token punctuation\">)</span> __n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_Tp<span class=\"token punctuation\">)</span> __val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_InputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">_M_assign_dispatch</span><span class=\"token punctuation\">(</span>_InputIterator __first<span class=\"token punctuation\">,</span> _InputIterator __last<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>                          __false_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre></pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre></pre></td></tr><tr><td data-num=\"233\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> iterator __first<span class=\"token punctuation\">,</span> iterator __last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__position <span class=\"token operator\">!=</span> __last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>      <span class=\"token comment\">// Remove [first, last) from its old position.</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>      __last<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token operator\">-></span>_M_next     <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>      __first<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token operator\">-></span>_M_next    <span class=\"token operator\">=</span> __last<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>      __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token operator\">-></span>_M_next <span class=\"token operator\">=</span> __first<span class=\"token punctuation\">.</span>_M_node<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"240\"></td><td><pre></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>      <span class=\"token comment\">// Splice [first, last) into its new position.</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>      _List_node_base<span class=\"token operator\">*</span> __tmp      <span class=\"token operator\">=</span> __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>      __position<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev <span class=\"token operator\">=</span> __last<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>      __last<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev     <span class=\"token operator\">=</span> __first<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"245\"></td><td><pre>      __first<span class=\"token punctuation\">.</span>_M_node<span class=\"token operator\">-></span>_M_prev    <span class=\"token operator\">=</span> __tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre></pre></td></tr><tr><td data-num=\"249\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> list<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>__x<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"252\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>__position<span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> __x<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> list<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> iterator __i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>    iterator __j <span class=\"token operator\">=</span> __i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>    <span class=\"token operator\">++</span>__j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__position <span class=\"token operator\">==</span> __i <span class=\"token operator\">||</span> __position <span class=\"token operator\">==</span> __j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>__position<span class=\"token punctuation\">,</span> __i<span class=\"token punctuation\">,</span> __j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>iterator __position<span class=\"token punctuation\">,</span> list<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> iterator __first<span class=\"token punctuation\">,</span> iterator __last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__first <span class=\"token operator\">!=</span> __last<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"262\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>__position<span class=\"token punctuation\">,</span> __first<span class=\"token punctuation\">,</span> __last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _Tp<span class=\"token operator\">&amp;</span> __value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&amp;</span> __x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre></pre></td></tr><tr><td data-num=\"270\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__STL_MEMBER_TEMPLATES</span></span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Predicate</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove_if</span><span class=\"token punctuation\">(</span>_Predicate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_BinaryPredicate</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span>_BinaryPredicate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_StrictWeakOrdering</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> _StrictWeakOrdering<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">_StrictWeakOrdering</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>_StrictWeakOrdering<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* __STL_MEMBER_TEMPLATES */</span></span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "STL"
            ]
        }
    ]
}