<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>繁華落盡 似水流年 • Posts by &#34;mysql&#34; category</title>
        <link>http://example.com</link>
        <description>编程日记 &amp; 随笔</description>
        <language>en</language>
        <pubDate>Sat, 30 Mar 2024 09:58:45 +0800</pubDate>
        <lastBuildDate>Sat, 30 Mar 2024 09:58:45 +0800</lastBuildDate>
        <category>mathematics</category>
        <category>语法</category>
        <category>C++</category>
        <category>VMware</category>
        <category>install</category>
        <category>数据库</category>
        <category>STL</category>
        <category>CNN</category>
        <category>Project</category>
        <category>面试题</category>
        <category>日常</category>
        <category>校招</category>
        <category>算法</category>
        <category>Leetcode双周赛</category>
        <category>Algorithm</category>
        <category>Leetcode周赛</category>
        <category>设计模式</category>
        <category>多线程</category>
        <category>池化技术</category>
        <category>MySQL</category>
        <category>操作系统</category>
        <category>计算机网络</category>
        <category>CMake</category>
        <category>线程池</category>
        <category>Go</category>
        <category>Redis</category>
        <category>Linux</category>
        <category>json</category>
        <category>Python</category>
        <category>牛客</category>
        <category>Git</category>
        <category>normalization</category>
        <category>推理加速</category>
        <category>LLM</category>
        <category>AI算法</category>
        <category>Pytorch</category>
        <category>激活函数</category>
        <category>部署</category>
        <category>DolphinScheduler</category>
        <item>
            <guid isPermalink="true">http://example.com/value/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95</guid>
            <title>MySQL基础语法</title>
            <link>http://example.com/value/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95</link>
            <category>数据库</category>
            <category>MySQL</category>
            <pubDate>Sat, 30 Mar 2024 09:58:45 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;mysql基础语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql基础语法&#34;&gt;#&lt;/a&gt; MySQL 基础语法&lt;/h1&gt;
&lt;h2 id=&#34;create创建数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create创建数据库&#34;&gt;#&lt;/a&gt;  &lt;code&gt;create&lt;/code&gt;  创建数据库&lt;/h2&gt;
&lt;p&gt;建数据库基本语法：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;database&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;exists&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; database_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;character&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt; charset_name&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;collate&lt;/span&gt; collation_name&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 如果创建的 database_name 已存在，则执行会导致错误。添加 if not exists 可以避免&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# charset_name 可以指定字符集（？）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# collation_name 指定排列规则（？）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;drop删除数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#drop删除数据库&#34;&gt;#&lt;/a&gt;  &lt;code&gt;drop&lt;/code&gt;  删除数据库&lt;/h2&gt;
&lt;p&gt;使用普通用户登录 &lt;code&gt;MySQL&lt;/code&gt;  服务器，需要特定的权限才可以删除或创建数据库.&lt;/p&gt;
&lt;p&gt;删除数据库基本语法：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;drop&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;database&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;exists&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; database_name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;use选择数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#use选择数据库&#34;&gt;#&lt;/a&gt;  &lt;code&gt;use&lt;/code&gt;  选择数据库&lt;/h2&gt;
&lt;p&gt;选择数据库基础语法：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;use&lt;/span&gt; database_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;基本数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本数据类型&#34;&gt;#&lt;/a&gt; 基本数据类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数值类型&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;tinyint&lt;/code&gt; ：1 字节.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;smallint&lt;/code&gt; ：2 字节&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mediumint&lt;/code&gt; ：3 字节&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; ：4 字节&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bigint&lt;/code&gt; ：8 字节&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt; ：4 字节，单精度浮点数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt; ：8 字节，双进度浮点数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日期和时间类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串类型&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;char&lt;/code&gt; ：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;varchar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;create创建数据库表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create创建数据库表&#34;&gt;#&lt;/a&gt;  &lt;code&gt;create&lt;/code&gt;  创建数据库表&lt;/h2&gt;
&lt;p&gt;创建数据库表基本语法：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt; table_name&amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	coloumn1 datatype&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	colomun2 datatype&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;character&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt; charset_name&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;collate&lt;/span&gt; collation_name&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;engine_name&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;字段属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Primary key&lt;/code&gt; ：主键&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto_increment&lt;/code&gt; ：自增，一般用于主键&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not null&lt;/code&gt; ：非空，若输入的记录该字段为空，则会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;drop删除数据库表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#drop删除数据库表&#34;&gt;#&lt;/a&gt;  &lt;code&gt;drop&lt;/code&gt;  删除数据库表&lt;/h2&gt;
&lt;p&gt;删除数据库表基本语法：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;drop&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;exists&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; table_name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;alter修改表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#alter修改表&#34;&gt;#&lt;/a&gt;  &lt;code&gt;alter&lt;/code&gt;  修改表&lt;/h2&gt;
&lt;p&gt;修改表结构基本语法&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;alter&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt; table_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;add&lt;/span&gt; column_name datatype&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;drop&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;column&lt;/span&gt; column_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;modify&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;column&lt;/span&gt; column_name datatype&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;insert插入数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#insert插入数据&#34;&gt;#&lt;/a&gt;  &lt;code&gt;insert&lt;/code&gt;  插入数据&lt;/h2&gt;
&lt;p&gt;插入数据基本语法：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; table_name&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;column1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;values1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; values2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;values1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; values2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果主键为自增的列，可使用 &lt;code&gt;NULL&lt;/code&gt;  占位符替代&lt;/p&gt;
&lt;h2 id=&#34;delete删除数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#delete删除数据&#34;&gt;#&lt;/a&gt;  &lt;code&gt;delete&lt;/code&gt;  删除数据&lt;/h2&gt;
&lt;p&gt;删除记录基本语法：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;delete&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; table_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; condition&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;select查询数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#select查询数据&#34;&gt;#&lt;/a&gt;  &lt;code&gt;select&lt;/code&gt;  查询数据&lt;/h2&gt;
&lt;p&gt;查询语句基本语法：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; column1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; table_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; condition&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt; column_name &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;ASC&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DESC&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;limit&lt;/span&gt; number&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		&lt;span class=&#34;token comment&#34;&gt;# 用于限制返回的行数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;wherer子句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wherer子句&#34;&gt;#&lt;/a&gt;  &lt;code&gt;wherer&lt;/code&gt;  子句&lt;/h2&gt;
&lt;p&gt;where 用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可用于 &lt;code&gt;delete&lt;/code&gt;  或 &lt;code&gt;update&lt;/code&gt;  操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询语句中你可以使用一个或者多个表，表之间使用逗号 **,** 分割，并使用 WHERE 语句来设定查询条件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以在 WHERE 子句中指定任何条件&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;等于条件 &lt;code&gt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不能与条件 &lt;code&gt;!=&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;大于条件 &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;大于等于条件 &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;小于条件 &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;小于等于条件 &lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;组合条件 &lt;code&gt;and&lt;/code&gt; 、 &lt;code&gt;or&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;模糊匹配 &lt;code&gt;like&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not in&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;between&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is not null&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;update更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#update更新&#34;&gt;#&lt;/a&gt;  &lt;code&gt;update&lt;/code&gt;  更新&lt;/h2&gt;
&lt;p&gt;记录更新基本语法：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;update&lt;/span&gt; table_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt; column1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; value1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; value2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; condition&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;like子句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#like子句&#34;&gt;#&lt;/a&gt;  &lt;code&gt;like&lt;/code&gt;  子句&lt;/h2&gt;
&lt;p&gt;模式串的语法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; ：表示零个或者多个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt; ：表示一个字符&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;union&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#union&#34;&gt;#&lt;/a&gt;  &lt;code&gt;union&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;union&lt;/code&gt;  用于连接两个或者两个以上的 &lt;code&gt;select&lt;/code&gt;  语句的结果，组成一个集合（取出重复行）；使用 &lt;code&gt;union all&lt;/code&gt;  可以不去除重复的行&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; column1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; table1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; condition1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;union&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; column1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; table2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; condition2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt; column1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;order-by语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#order-by语句&#34;&gt;#&lt;/a&gt;  &lt;code&gt;order by&lt;/code&gt;  语句&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;order by&lt;/code&gt;  默认升序排序&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; column1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; table_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; column1 &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;ASC&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DESC&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column2 &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;ASC&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DESC&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 可以使用数子替换列名（数字表示列的位置）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;可以使用 &lt;code&gt;nulls first&lt;/code&gt;  或 &lt;code&gt;nulls last&lt;/code&gt;  来处理 &lt;code&gt;null&lt;/code&gt;  值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;group-by分组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#group-by分组&#34;&gt;#&lt;/a&gt;  &lt;code&gt;group by&lt;/code&gt;  分组&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;group by&lt;/code&gt;  语句是根据一个或多个列对结果集进行分组，在分组的列上我们可以使用 &lt;code&gt;sum、count、avg&lt;/code&gt;  等函数，其基本语法：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; column1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; aggregate_function&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;column2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; table_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; condition&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;group&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt; column1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;with rollup&lt;/code&gt;  可以实现在分组统计数据基础上再进行相同的统计，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mysql&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;coalesce&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;总数&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;SUM&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;signin&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; signin_count &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt;  employee_tbl &lt;span class=&#34;token keyword&#34;&gt;GROUP&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; name &lt;span class=&#34;token keyword&#34;&gt;WITH ROLLUP&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;--------------------------+--------------+&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;coalesce&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;总数&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; signin_count &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;--------------------------+--------------+&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; 小丽                   &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;            &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; 小明                   &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;            &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; 小王                   &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;            &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; 总数                   &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;           &lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;--------------------------+--------------+&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.01&lt;/span&gt; sec&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;having&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#having&#34;&gt;#&lt;/a&gt;  &lt;code&gt;having&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;having&lt;/code&gt;  作为 &lt;code&gt;where&lt;/code&gt;  的补充功能， &lt;code&gt;having&lt;/code&gt;  子句中可以使用聚集函数&lt;/p&gt;
&lt;h2 id=&#34;连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接&#34;&gt;#&lt;/a&gt; 连接&lt;/h2&gt;
&lt;p&gt;JOIN 按照功能大致分为如下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;inner join&lt;/code&gt; ：内连接 / 等值连接，返回两个表中满足连接条件的匹配行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/inner_join.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; column1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; table1 &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;join&lt;/span&gt; table2 &lt;span class=&#34;token keyword&#34;&gt;on&lt;/span&gt; table1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;column_name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; table2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;column_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;left join&lt;/code&gt; ：返回左表的所有行，并包括右表中匹配的行，如果右表中没有匹配的行，将使用 &lt;code&gt;null&lt;/code&gt;  填充相应字段&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/left_join.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; column1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; table1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;left&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;join&lt;/span&gt; table2 &lt;span class=&#34;token keyword&#34;&gt;on&lt;/span&gt; table1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;column_name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; table2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;column_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;right join&lt;/code&gt; ：返回右表的所以行，并包含左表匹配的行，如果左表中没有匹配的行，将使用 &lt;code&gt;null&lt;/code&gt;  填充相应字段&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/right_join.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; column1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; table1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;right&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;join&lt;/span&gt; table2 &lt;span class=&#34;token keyword&#34;&gt;on&lt;/span&gt; table1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;column_name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; table2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;column_name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cross join&lt;/code&gt; ：对两个表做一个笛卡尔积，最终返回的表的记录可能非常大&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/cross_join.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; olumn1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; table1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CROSS&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;JOIN&lt;/span&gt; table2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;slef join&lt;/code&gt; ：自连接&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;null值的处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#null值的处理&#34;&gt;#&lt;/a&gt;  &lt;code&gt;null&lt;/code&gt;  值的处理&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;MySQL&lt;/code&gt;  中 &lt;code&gt;null&lt;/code&gt;  表示缺失或未知的数据，处理 &lt;code&gt;null&lt;/code&gt;  值需要特别处理，在  &lt;code&gt;MySQL&lt;/code&gt;  中， &lt;code&gt;NULL&lt;/code&gt;  值与任何其它值的比较（即使是  &lt;code&gt;NULL&lt;/code&gt; ）永远返回  &lt;code&gt;NULL&lt;/code&gt; ，即  &lt;code&gt;NULL = NULL&lt;/code&gt;  返回  &lt;code&gt;NULL&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL 中处理 NULL 值的常见注意事项和技巧&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;is null&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;is not null&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; ：比较操作符（不同于 = 运算符），当比较的的两个值相等或者都为 NULL 时返回 true&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;coalesce&lt;/code&gt;  函数替换 &lt;code&gt;null&lt;/code&gt;  值，它接收 &lt;code&gt;多个参数&lt;/code&gt; ，返回参数列表中第一个非 &lt;code&gt;null&lt;/code&gt;  的值&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; product_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;COALESCE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;column1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; column1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;AS&lt;/span&gt; actual_quantity&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; products&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;ifnull&lt;/code&gt;  函数处理 &lt;code&gt;null&lt;/code&gt; ， &lt;code&gt;ifnull&lt;/code&gt;  函数是 &lt;code&gt;coalesce&lt;/code&gt;  的 MySQL 特定版本，它接受两个参数，如果第一个参数为 NULL，则返回第二个参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;null&lt;/code&gt;  排序，在使用 &lt;code&gt;order by&lt;/code&gt;  子句进行排序时， &lt;code&gt;null&lt;/code&gt;  会默认排在最后。如果希望 &lt;code&gt;null&lt;/code&gt;  排在前面，可以使用 &lt;code&gt;NULLS FIRST&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; product_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; price&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; products&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; price &lt;span class=&#34;token keyword&#34;&gt;ASC&lt;/span&gt; NULLS &lt;span class=&#34;token keyword&#34;&gt;FIRST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;聚合函数 &lt;code&gt;count/sum/avg&lt;/code&gt;  会忽略 &lt;code&gt;null&lt;/code&gt;  值，如果希望将 &lt;code&gt;null&lt;/code&gt;  视为 0，可以使用 &lt;code&gt;coalesce&lt;/code&gt;  或 &lt;code&gt;ifnull&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;exists&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#exists&#34;&gt;#&lt;/a&gt;  &lt;code&gt;exists&lt;/code&gt;&lt;/h2&gt;
&lt;h2 id=&#34;any-all&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#any-all&#34;&gt;#&lt;/a&gt;  &lt;code&gt;any、all&lt;/code&gt;&lt;/h2&gt;
&lt;h2 id=&#34;case&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#case&#34;&gt;#&lt;/a&gt;  &lt;code&gt;case&lt;/code&gt;&lt;/h2&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CASE&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;WHEN&lt;/span&gt; condition1 &lt;span class=&#34;token keyword&#34;&gt;THEN&lt;/span&gt; result1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;WHEN&lt;/span&gt; condition2 &lt;span class=&#34;token keyword&#34;&gt;THEN&lt;/span&gt; result2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;WHEN&lt;/span&gt; conditionN &lt;span class=&#34;token keyword&#34;&gt;THEN&lt;/span&gt; resultN&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;ELSE&lt;/span&gt; result&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;END&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;例子：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; OrderID&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Quantity&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CASE&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;WHEN&lt;/span&gt; Quantity &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;THEN&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;The quantity is greater than 30&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;WHEN&lt;/span&gt; Quantity &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;THEN&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;The quantity is 30&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;ELSE&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;The quantity is under 30&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;END&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;AS&lt;/span&gt; QuantityText&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; OrderDetails&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务&#34;&gt;#&lt;/a&gt; 事务&lt;/h2&gt;
&lt;h2 id=&#34;索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引&#34;&gt;#&lt;/a&gt; 索引&lt;/h2&gt;
&lt;h2 id=&#34;函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数&#34;&gt;#&lt;/a&gt; 函数&lt;/h2&gt;
&lt;h2 id=&#34;参考文章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考文章&#34;&gt;#&lt;/a&gt; 参考文章&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC10dXRvcmlhbC5odG1s&#34;&gt;MySQL 教程 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9teXNxbC9kZWZhdWx0LmFzcA==&#34;&gt;MySQL Tutorial (w3schools.com)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98</guid>
            <title>MySQL面试题</title>
            <link>http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98</link>
            <category>面试题</category>
            <category>MySQL</category>
            <pubDate>Wed, 13 Mar 2024 14:46:17 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;mysql面试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql面试题&#34;&gt;#&lt;/a&gt; MySQL 面试题&lt;/h1&gt;
&lt;h2 id=&#34;关系型数据库和非关系型数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关系型数据库和非关系型数据库&#34;&gt;#&lt;/a&gt; 关系型数据库和非关系型数据库&lt;/h2&gt;
&lt;h2 id=&#34;myisam和innodb的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#myisam和innodb的区别&#34;&gt;#&lt;/a&gt;  &lt;code&gt;MyISAM&lt;/code&gt;  和 &lt;code&gt;InnoDB&lt;/code&gt;  的区别&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;MyISAM&lt;/code&gt; ： &lt;code&gt;B+树&lt;/code&gt; 的叶子节点的 &lt;code&gt;data&lt;/code&gt;  域存放的是数据的地址（非聚簇索引），即其索引文件和数据文件是分离的.&lt;br /&gt;
 &lt;code&gt;InnoDB&lt;/code&gt; ：主键索引的 &lt;code&gt;B+树&lt;/code&gt; 的叶子节点的 &lt;code&gt;data&lt;/code&gt;  域存放的是数据本身（聚簇索引），而对于非自建索引（辅助索引 / 二级索引）的 &lt;code&gt;B+树&lt;/code&gt; 的叶子节点的 &lt;code&gt;data&lt;/code&gt;  域存放的是主键的 &lt;code&gt;id&lt;/code&gt;  值，需要对齐进行回表操作才能查到到全部的数据.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;MyISAM&lt;/code&gt;  索引采用的是非聚簇索引，索引的数据域存储数据的指针，而 &lt;code&gt;InnoDB&lt;/code&gt;  主键采用的是聚簇索引，非主键采用非聚簇索引，索引的数据域存储主键的 id.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MyISAM&lt;/code&gt;  不支持事务，但是每次查询都是原子操作； &lt;code&gt;Innodb&lt;/code&gt;  支持 &lt;code&gt;ACID&lt;/code&gt;  的事务，支持事务的四种隔离级别&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MyISAM&lt;/code&gt;  存储表的总行数； &lt;code&gt;InnoDB&lt;/code&gt;  不存储表的总行数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MyISAM&lt;/code&gt;  不支持外键约束，而 &lt;code&gt;InnoDB&lt;/code&gt;  支持&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MyISAM&lt;/code&gt;  支持最小粒度所为表级锁； &lt;code&gt;InnoDB&lt;/code&gt;  支持行级锁&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;覆盖索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#覆盖索引&#34;&gt;#&lt;/a&gt; 覆盖索引&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;索引的值包含所需要查询的字段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;为什么使用索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么使用索引&#34;&gt;#&lt;/a&gt; 为什么使用索引&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;索引是一种能过帮助数据库，高效的从磁盘中检索数据的一种数据结构.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在关系型数据库中，通常使用 &lt;code&gt;B-Tree&lt;/code&gt;  或哈希表等索引结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引可以提高查询效率，建立索引的原则如下.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;区分度高的列作为索引可以加快查询速度&lt;/li&gt;
&lt;li&gt;经常出现在 &lt;code&gt;where&lt;/code&gt;  中的列&lt;/li&gt;
&lt;li&gt;表记录较少索引效果不好，没有必要建立索引&lt;/li&gt;
&lt;li&gt;定义有外键的数据列一定要建立索引&lt;/li&gt;
&lt;li&gt;更新频繁的数据列不适合建立索引&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引会降低插入、删除、更新表的速度，因为在执行这些操作时，还需要操作索引文件，增大了系统开销.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引需要占用物理空间，除了索引表需要占用空间之外，每个索引也需要占用额外的存储空间。同时如果非聚餐索引很多，一旦聚簇索引改变，那么非聚簇索引也需要跟着改变，代价比较大&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;MySQL 中使用较多的是 &lt;code&gt;Hash索引&lt;/code&gt; 和 &lt;code&gt;B+树索引&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于哈希索引来说，底层的数据结构就是哈希表，因此对于绝大多数需求为单挑记录的查询的时候，可以选择哈希索引，查询性能高，其余的绝大多数场景使用 B + 树所以&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;聚簇索引和非聚簇索引的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#聚簇索引和非聚簇索引的区别&#34;&gt;#&lt;/a&gt; 聚簇索引和非聚簇索引的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;聚簇索引：主键索引&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;将数据存储在索引树的叶子节点上，可以减少一次查询（查询索引树的同时就能获得数据）&lt;/li&gt;
&lt;li&gt;当需要对数据进行修改或删除时，需要更新索引树，增加系统开销（聚簇索引保证顺序，当中间有数据需要插入时，可能引起分页）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非聚簇索引：二级索引 / 辅助索引&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;不将数据存储在索引树中，而是存储在数据页中；查询数据时需要两次查询，一次用于查询索引树，获取数据页的地址，在通过数据页的地址来查询数据（如果索引覆盖的话实际上不用回表）&lt;/li&gt;
&lt;li&gt;当需要对数据进行修改或删除时，不需要更新索引树，减少了系统开销&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;唯一索引与普通索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#唯一索引与普通索引&#34;&gt;#&lt;/a&gt; 唯一索引与普通索引&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;区别：唯一索引的索引值必须唯一，但允许有空值（即可以是单列唯一索引也可以是联合唯一索引）；普通索引索引值不一定唯一，且允许有空值.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;唯一索引可以保证数据的唯一性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;联合索引-组合索引-复合索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#联合索引-组合索引-复合索引&#34;&gt;#&lt;/a&gt; 联合索引、组合索引、复合索引&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;组合索引、联合索引、复合索引指代都是一个意思，一个索引包含多个列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;最左前缀匹配&lt;/code&gt; ：组合索引的第一个字段必须出现在查询语句中，还不能跳跃，只有这样才能让组合索引生效&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 假设给 username，age 创建了组合索引&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 组合索引生效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; username &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xujiahao&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; username &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xujiahao&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; username &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xujiahao&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 特殊情况&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 组合索引失效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; city &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;shenzhen&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;索引失效的情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引失效的情况&#34;&gt;#&lt;/a&gt; 索引失效的情况&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;like&lt;/code&gt;  查询并且左边带 &lt;code&gt;%&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;索引往往使用的是 B + 树结构，是一个有序排列的。百分号放在前面进行一个模糊查找时，前面都能匹配，很有可能就无法更具索引的有序性来进行查找了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐式类型转换。索引字段是 &lt;code&gt;int&lt;/code&gt; ，而使用字符串类型去查询&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;where&lt;/code&gt;  条件里面对索引使用运算或者函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;or&lt;/code&gt;  且存在非索引列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;where&lt;/code&gt;  条件中对两列作比较&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;in&lt;/code&gt; （和数据量有关系）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;order by&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;is null&lt;/code&gt; 、 &lt;code&gt;is not null&lt;/code&gt; 、 &lt;code&gt;≠&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;innodb为什么使用自增id作为主键&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#innodb为什么使用自增id作为主键&#34;&gt;#&lt;/a&gt;  &lt;code&gt;InnoDB&lt;/code&gt;  为什么使用自增 &lt;code&gt;id&lt;/code&gt;  作为主键&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用自增 &lt;code&gt;id&lt;/code&gt;  作为主键，那么在建立索引时，每次插入新的记录，记录会顺序添加到当前索引的后续位置，直到一页满为至才会开辟一个新的页&lt;/li&gt;
&lt;li&gt;如果使用非自增主键，由于每次插入的主键值比较随机，每次新纪录可能需要插入到现在索引的中间位置，会操作频繁的移动（内部单链表）和分页&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;b树与b树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#b树与b树&#34;&gt;#&lt;/a&gt; B 树与 B + 树&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;查询一个数据时，在数据页内往往使用二分查找&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;B 树：一种平衡的多叉搜索树&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;每个节点包含多个关键字和对应的指针，即 B 树的每个节点都会存储数据&lt;/li&gt;
&lt;li&gt;B 树的叶子节点之间是指针相连的，不支持顺序访问&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B + 树：一种平衡的多叉搜索树&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;所有的关键字都存储在叶子节点上，非叶子节点不存储数据，只存储索引和指向孩子节点的指针&lt;/li&gt;
&lt;li&gt;叶子节点通过指针连接起来，形成一个有序的链表，支持顺序访问和范围查找（MySQL 底层实际是一个双向链表）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL 选择 B + 树作为索引结构的原因&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;范围查询和顺序访问的性能更高：B + 树的叶子节点通过指针连接成一个双向链表，可以很好的支持数据库的范围查询，同时在连续的数据查询中，B + 树可以利用磁盘的预读特性，提高数据顺序访问性能，嫌少磁盘 I/O&lt;/li&gt;
&lt;li&gt;更少的磁盘 I/O：B + 树的非叶子节点只存储索引和指向孩子的节点指针，不存储数据，相比于 B 树，每个物理页中可以存储更多的关键字，减少了磁盘 I/O 次数（节点可以存储更多的关键字，可以使得 B + 树高更矮)&lt;/li&gt;
&lt;li&gt;数据检索方面，由于所以的数据均存储在叶子节点上，每次查询的 IO 次数稳定.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据库三大范式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库三大范式&#34;&gt;#&lt;/a&gt; 数据库三大范式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;数据库设计表结构时所遵循的规范，目的是为了减少冗余，提高数据存储和使用的效率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;第一范式：数据库表中的每个列都必须是原子性的，不可再分；同时每个表有一个主键.&lt;/li&gt;
&lt;li&gt;第二范式：表中非主键列必须完全依赖于主键，而不是部分依赖于主键. (如果有非主键列部分依赖于主键，需要将改列拆分并且放置于另外一张表中)&lt;/li&gt;
&lt;li&gt;第三范式：表中的非主键列之间不能存在传递依赖关系&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在实际的设计，经常也有反范式的现象，通过冗余的数据，来避免跨表的连接查询，以此来提高数据库的查询效率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;数据库表的连接方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库表的连接方式&#34;&gt;#&lt;/a&gt; 数据库表的连接方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内连接&lt;/li&gt;
&lt;li&gt;左连接&lt;/li&gt;
&lt;li&gt;右连接&lt;/li&gt;
&lt;li&gt;全连接&lt;/li&gt;
&lt;li&gt;自连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;char与varchar&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#char与varchar&#34;&gt;#&lt;/a&gt; char 与 varchar&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;char&lt;/code&gt; ：定长字符类型。如果存储的字符串长度小于指定长度，会使用空格进行填充&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;varchar&lt;/code&gt; ：变长字符类型。它实际占用的存储空间为字符串的实际空间和用于存储字符串长度信息的空间&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;存储效率： &lt;code&gt;char&lt;/code&gt;  定长，无论字符串的实际长度多少，它占用的存储空间是固定，会浪费一定的空间.  &lt;code&gt;varchar&lt;/code&gt;  是变长的，其占用的实际空间会随着字符串的大小而变动，存储效率较高&lt;/li&gt;
&lt;li&gt;查询效率： &lt;code&gt;char&lt;/code&gt;  在搜索和排序方面的操作效率要高于 &lt;code&gt;varchar&lt;/code&gt;  类型&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql锁的种类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql锁的种类&#34;&gt;#&lt;/a&gt; MySQL 锁的种类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;读写锁（锁的属性）&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;共享锁 &lt;code&gt;Share Lock&lt;/code&gt; ：读锁（ &lt;code&gt;S锁&lt;/code&gt; ），当一个事务为数据加上读锁之后，其他事务只能对该数据加读锁。为了支持高并发读取数据.&lt;/li&gt;
&lt;li&gt;排他锁 &lt;code&gt;Exclusive Lock&lt;/code&gt; ：写锁（ &lt;code&gt;X锁&lt;/code&gt; ），当一个事务为数据加上了写锁之后，其他请求不能再为这条数据加任何锁.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;锁的粒度&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;行锁：锁住表中的某一行或多行，粒度小，冲突小&lt;/li&gt;
&lt;li&gt;表锁：锁住整张表，粒度大，容易冲突&lt;/li&gt;
&lt;li&gt;记录数 &lt;code&gt;Record Lock&lt;/code&gt; ：是行锁的一种，锁住表中的一条记录（命中的条件字段是一定是唯一索引）&lt;/li&gt;
&lt;li&gt;页锁：一种粒度介于行所和表锁之间的一种锁。每次锁定相邻的一组记录.&lt;/li&gt;
&lt;li&gt;间隙锁 &lt;code&gt;Gap Lock&lt;/code&gt; ：属于行锁的一种&lt;/li&gt;
&lt;li&gt;临建锁 &lt;code&gt;Next-Key Lock&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;意向锁&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果当事务 A 加锁成功后设置一个状态告诉后面的人：已经有人对表里的行加了一个排他锁，不能再对整个表加共享锁或排他锁，那么后面需要对整个表加锁的人获取这个状态就知道是不是可以对表加锁，避免对这个索引表的每个节点扫描查看他们是否加锁，这个锁就是意向锁.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意向共享锁：当一个事务试图对整个表加共享锁时，首先需要获取这个表的意向共享锁&lt;/li&gt;
&lt;li&gt;意向排他锁：当一个事务试图对整个表加排他锁时，首先需要获取这个表的意向排他锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql执行计划&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql执行计划&#34;&gt;#&lt;/a&gt; MySQL 执行计划&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;执行计划： &lt;code&gt;sql&lt;/code&gt;  的执行查询的顺序，以及如何使用索引&lt;/p&gt;
&lt;p&gt;在语句前面添加 &lt;code&gt;explain&lt;/code&gt;  即可打印执行计划&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;执行计划参数&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; ：&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql中的死锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql中的死锁&#34;&gt;#&lt;/a&gt; MySQL 中的死锁&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的的一种互相等待的现象.&lt;/p&gt;
&lt;p&gt;产看死锁的命令： &lt;code&gt;show engine innodb status&lt;/code&gt; ；可以通过设置 &lt;code&gt;innodblockwait_timeout&lt;/code&gt;  来设置曹超时时间或主动回滚死锁中的某个事务.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;数据库的四大特性acid&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库的四大特性acid&#34;&gt;#&lt;/a&gt; 数据库的四大特性 ACID&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;原子性Atomicity&lt;/code&gt; ：保证多个 &lt;code&gt;DML&lt;/code&gt;  操作的原子性，要么都执行成功，要么执行失败&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;执行失败意味着原本执行成功的数据要进行回滚，其是由 &lt;code&gt;undo_log&lt;/code&gt;  表来保证（在事务执行的过程中，把修改之前的数据快照保存到表中，一旦出现错误，就直接从 &lt;code&gt;undo_log&lt;/code&gt;  表中读取数据，进行反向操作）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;一致性Consistency&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由其他三大特性共同来保证&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;隔离性Isolation&lt;/code&gt; ：多个并行事务对同一个数据进行操作的时候，避免多个事务之间的互相干扰导致数据混乱的问题.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;四种隔离级别： &lt;code&gt;RU/RC/RR/Serializable&lt;/code&gt; .  &lt;code&gt;InnoDB&lt;/code&gt;  默认采用的 &lt;code&gt;RR&lt;/code&gt;  隔离级别，通过 &lt;code&gt;MVCC&lt;/code&gt;  来解决脏读、不可重复度的问题，使用了行锁 / 表锁来解决幻读的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;持久性Durability&lt;/code&gt; ：只要事务提交成功，那么这个数据的结果的影响一定是永久的。不能因为数据库的宕机或其他原因导致数据变更失效的问题.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从理论上来说，事务提交之后，直接把数据放到磁盘即可，但是磁盘 IO 的读写效率很低，所以往往会先将数据放到缓冲区（ &lt;code&gt;InnoDB&lt;/code&gt;  的 &lt;code&gt;Buffer Pool&lt;/code&gt; ），也就是说当数据发生变更之后，先更新缓冲区中，然后在合适的时间再持久化到磁盘中，这样的优化设计可能由于宕机导致数据变更失效的问题。在 &lt;code&gt;InnoDB&lt;/code&gt;  中，通过 &lt;code&gt;redo_log&lt;/code&gt;  来保证数据库的持久性（存储了数据变更后的值），当我们通过事务进行数据变更的时候，除了修改内存缓冲区的数据以外，还会把本次修改的值追加到 &lt;code&gt;redo_log&lt;/code&gt;  日志中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事务隔离级别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务隔离级别&#34;&gt;#&lt;/a&gt; 事务隔离级别&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;InnoDB&lt;/code&gt;  中 隔离性是由 MySQL 的各种锁机制以及 &lt;code&gt;MVCC&lt;/code&gt;  来实现的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;读未提交 &lt;code&gt;read_uncommitted(RU)&lt;/code&gt; ：有脏读问题&lt;/li&gt;
&lt;li&gt;读已提交 &lt;code&gt;read_committed(RC)&lt;/code&gt; ：有不可重复读的问题&lt;/li&gt;
&lt;li&gt;可重复读 &lt;code&gt;repeatable-read(RR)&lt;/code&gt; ：会有幻读的问题&lt;/li&gt;
&lt;li&gt;串行化 &lt;code&gt;serializable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据库并发事务会带来哪些问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库并发事务会带来哪些问题&#34;&gt;#&lt;/a&gt; 数据库并发事务会带来哪些问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;脏读&lt;/li&gt;
&lt;li&gt;不可重复读&lt;/li&gt;
&lt;li&gt;幻读&lt;/li&gt;
&lt;li&gt;丢失修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mvcc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mvcc&#34;&gt;#&lt;/a&gt; MVCC&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;多版本并发控制：读取数据时通过一种类似于快照的方式将数据保存下来，这样读锁和写锁就不冲突了；不同的事务会看到特定版本的数据（版本链）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MVCC&lt;/code&gt;  只在读已提交和可重复读两个隔离级别下工作. ( &lt;code&gt;read_uncommited&lt;/code&gt;  总是读取最新的数据； &lt;code&gt;serializable&lt;/code&gt;  会对所以的读操作加锁)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;聚簇索引中有两个隐藏的列&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;trx_id&lt;/code&gt; ：存储每次对这条索引记录进行修改的 &lt;code&gt;事务ID&lt;/code&gt;  (事务 ID 根据时间顺序依次递增)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;roll_pointer&lt;/code&gt; ：上一版本的记录地址.（每次对聚簇索引记录有修改操作时，都会把老版本写入 &lt;code&gt;undo&lt;/code&gt;  日志中，而这个修改后的新记录的 &lt;code&gt;roll_pointer&lt;/code&gt;  则会指向日志中旧版本）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;ReadView&lt;/code&gt;  是快照读（普通的 &lt;code&gt;select&lt;/code&gt;  查询语句）执行时 &lt;code&gt;MVCC&lt;/code&gt;  提取数据的依据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;m_ids&lt;/code&gt; ：当前活跃的事务编号的集合（还未提交的事务集合）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min_trx_id&lt;/code&gt; ：最小活跃事务的编号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_trx_id&lt;/code&gt; ：预分配事务的编号，当前最大事务 ID+1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;creator_trx_id&lt;/code&gt; ： &lt;code&gt;ReadView&lt;/code&gt;  创建者的事务编号&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;当前读&lt;/code&gt; ：指执行如下指令对数据进行读取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Insert、Update、Delete、Select ... for Update、Select ... lock in share mode&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E7%89%88%E6%9C%AC%E9%93%BE.png&#34; alt=&#34;&#34; title=&#34;版本链&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;读已提交隔离级别下 MVCC 的工作方式：在每一次执行快照读的时候生成 &lt;code&gt;ReadView&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1. 判断版本链的 &lt;code&gt;trx_id&lt;/code&gt;  是否等于 &lt;code&gt;creator_trx_id&lt;/code&gt; ，若等于说明对该条记录的更新就是当前事务，则可以访问&lt;/p&gt;
&lt;p&gt;2. 判断版本链的 &lt;code&gt;trx_id&lt;/code&gt;  是否小于 &lt;code&gt;min_trx_id&lt;/code&gt; ，若小于说明对该记录的处理已经提交，可访问&lt;/p&gt;
&lt;p&gt;3. 判断版本链的 &lt;code&gt;trx_id&lt;/code&gt;  是否大于等于 &lt;code&gt;max_trx_id&lt;/code&gt; ，如果成立说明对该条记录的操作是在生成 &lt;code&gt;ReadView&lt;/code&gt;  之后，不可访问&lt;/p&gt;
&lt;p&gt;4. 判断版本链的 &lt;code&gt;trx_id&lt;/code&gt;  是否在 &lt;code&gt;m_idx&lt;/code&gt;  中，如果不存在，说明对该条记录的操作已提交，可以访问，若存在，则不可访问&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/ReadView.png&#34; alt=&#34;&#34; title=&#34;ReadView&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E8%AF%BB%E5%B7%B2%E6%8F%90%E4%BA%A4MVCC.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可重复读级别下 MVCC 的工作方式：仅在第一次执行快照读的时候生成 &lt;code&gt;ReadView&lt;/code&gt;  ，从而保证事务内对于一条记录的查询是一致的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BBMVCC.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多次连续的快照读， &lt;code&gt;ReadView&lt;/code&gt;  会复用，没有幻读问题。但是两次连续的 &lt;code&gt;快照读&lt;/code&gt; 之间存在 &lt;code&gt;当前读&lt;/code&gt; 时， &lt;code&gt;ReadView&lt;/code&gt;  会重新生成，导致产生幻读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BBMVCC%E5%B9%BB%E8%AF%BB%E9%97%AE%E9%A2%98.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql主从同步原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql主从同步原理&#34;&gt;#&lt;/a&gt; MySQL 主从同步原理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;MySQL主从同步&lt;/code&gt; 主要涉及到三个线程，主节点 master 上的 &lt;code&gt;binlog dump thread&lt;/code&gt; ，从节点 slave 上的 &lt;code&gt;IO thread&lt;/code&gt;  和 &lt;code&gt;sql thread&lt;/code&gt; . 主节点的 &lt;code&gt;binlog&lt;/code&gt;  维护的是主库记录的所以变更记录.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主节点的 &lt;code&gt;log dump&lt;/code&gt;  线程，当 &lt;code&gt;binlog&lt;/code&gt;  有变动时， &lt;code&gt;log dump&lt;/code&gt;  会读取 &lt;code&gt;binlog&lt;/code&gt;  日志变动的内容并发送到从节点&lt;/li&gt;
&lt;li&gt;从节点的 &lt;code&gt;IO thread&lt;/code&gt;  接收到 &lt;code&gt;binlog&lt;/code&gt;  内容 ，并将其写入 &lt;code&gt;relay log&lt;/code&gt;  文件中.&lt;/li&gt;
&lt;li&gt;从节点的 &lt;code&gt;sql thread&lt;/code&gt;  读取 &lt;code&gt;realy log&lt;/code&gt;  新增的内容并执行，最终保持主从数据库的一致性.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注：主节点使用 &lt;code&gt;binlog&lt;/code&gt;  文件和 &lt;code&gt;position&lt;/code&gt;  偏移量来定位主动同步的位置（增量同步）&lt;/p&gt;
&lt;p&gt;由于 MySQL 的默认的主从同步方式是异步 的，主节点把日志发送给从节点后不关系从库是否已经处理，这样会产生一个问题：主节点挂了，从节点处理失败了，那么这时从节点升级为主节点后，就会有一部分日志丢失了，有一下解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全同步复制：主节点写入 &lt;code&gt;binlog&lt;/code&gt;  并将数据同步到从节点时，需要等待所以的从节点执行完成之后，在将结果返回给客户端. (影响效率)&lt;/li&gt;
&lt;li&gt;半同步复制：主节点写入 &lt;code&gt;binlog&lt;/code&gt;  并将数据同步到从节点时，不需要等待所以的从节点执行完成，当收到至少一个从节点的同步完成就将结果返回给客户端.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;## 慢查询如何优化
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;检查是否建了索引，查询是否走了索引&lt;/li&gt;
&lt;li&gt;检查是否 &lt;code&gt;load&lt;/code&gt;  了多余的数据列&lt;/li&gt;
&lt;li&gt;返回的数据量太多&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql-ngram全文检索&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-ngram全文检索&#34;&gt;#&lt;/a&gt;  &lt;code&gt;MySQL Ngram&lt;/code&gt;  全文检索&lt;/h2&gt;
&lt;h2 id=&#34;跳表与b树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跳表与b树&#34;&gt;#&lt;/a&gt; 跳表与 B + 树&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;跳表：将部分链表节点提取出来，再构建出一个新的链表，一直递归的做上述的过程，形成的新的数据结构就是跳表。每次在进行查询操作的时候，先查询上层的链表，看落在那个范围，在递归去下层链表搜索. （跳表一条数据一个节点）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;跳表的写入性能比 B + 树好：B + 树在进行插入数据的时候，由于 B + 树的一个多叉的平衡树，可能会导致拆分合并索引数据页。跳表则是独立插入，并根据随机函数确定是否在上层中增加节点。没有旋转维持平衡的开销&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
    </channel>
</rss>
