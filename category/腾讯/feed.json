{
    "version": "https://jsonfeed.org/version/1",
    "title": "繁華落盡 似水流年 • All posts by \"腾讯\" category",
    "description": "编程日记 & 随笔",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/%E8%85%BE%E8%AE%AF%E6%A0%A1%E6%8B%9B",
            "url": "http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/%E8%85%BE%E8%AE%AF%E6%A0%A1%E6%8B%9B",
            "title": "腾讯校招",
            "date_published": "2024-03-18T12:59:34.915Z",
            "content_html": "<h2 id=\"一面心态爆炸\"><a class=\"anchor\" href=\"#一面心态爆炸\">#</a> 一面（心态爆炸）</h2>\n<blockquote>\n<ol>\n<li><code>一开始问了我的研究方向</code> ，讲一讲论文提出的方法.</li>\n<li>问我 <code>熟悉的语言</code> 是什么？ 我说 C++</li>\n<li><code>程序的空间分布？</code> 这里我居然还卡了一下，栈、堆、全局 / 静态存储区、常量存储区、代码区。栈区主要用于存储一些局部变量，空间由操作系统来管理；堆是动态内存空间，由程序员管理内存的申请和释放。全局 / 静态区用于存储全局变量和静态变量；面试官说先到这. (我当时紧张其实忘记了常量区，但是我记得有五个区，所以卡了)</li>\n<li><code>vector你了解吗？你知道它的内存管理吗?``vector</code>  是 <code>STL</code>  内的一个顺序容器，其空间是从堆上申请的， <code>vector</code>  可以通过 <code>size()</code>  来获取其实际存储的变量数目， <code>capacity()</code>  可以用于获取所占空间，当 <code>size()和capacity()</code>  相等时，会进行扩容的操作，这个扩容的系数依赖于不同的操作系统，它会去堆内找一片更大的空间分配给这个 <code>vector</code> ，将之前的内容复制过来，然后释放由来申请的空间.  <code>比较常用的扩容系数是什么?</code> ，我回答 2 或者 1.5.</li>\n<li><code>你说vecotr申请的空间是在堆上，那比如说我想要你去验证它所申请的空间是在堆的，你如何证明？</code> 这个我没有想到，但是面试官一直引导我，几乎快说出答案了，最后我才反应过来，这里直接说方法。首先在 <code>main</code>  函数内写 <code>int a[10000000000];</code>  程序会报段错误，其是栈空间溢出了（局部变量存储在栈中）; 然后换成另外一段程序 <code>vector&lt;int&gt; res(10000000000);</code>  程序顺利编译执行，说明 <code>vector</code>  所申请的空间和前面的语句所申请的空间不是同一片，所以应该是在堆上的.</li>\n<li><code>讲一下三次握手的流程？</code> 首先客户端发送 <code>SYN报文</code> 给服务端，服务端接收到 <code>SYN报文</code> 后，发送 <code>ACK确认</code> ，同时把 <code>SYN</code>  置为 1，客户端收到响应后，向服务端发送 <code>ACK确认</code> ，服务端收到确认后，三次握手连接建立成功.</li>\n<li><code>为什么是三次啊. </code> 首先 2 次是一定不可以的. TCP 是一个全双工的协议，而且 TCP 采用了确认机制，所以必须至少 4 次才能建立双向的连接。其次是在第二次握手的同时向客户端发送 <code>ACK确认</code> 可以和服务端建立连接的请求 <code>SYN=1</code>  合并.</li>\n<li><code>那么挥手是几次呢？</code> 四次.  <code>为什么呢？不可以三次吗？</code> 四次挥手中间的连接中断和 <code>ACK确认</code> 两个报文不能合并，因为当被动断开方收到断开连接请求的同时，可能还有数据没有发送完。此时不能仓促的将断开连接请求和 <code>ACK确认</code> 请求合并.</li>\n<li><code>TIME_WAIT状态你了解吗？是哪一方的状态，是主动断开连接方还是被动断开连接方.</code>  被动断开连接方</li>\n<li><code>你平时有没有用过一些抓包工具啊. 比如说我想看一些客户端和服务端的一些状态.</code>  wireless shark，但是我用的并不多.</li>\n<li><code>那在Linux下呢？有什么命令可以查看网络状态. </code> 我说记不太清楚了，其实我并不知道，后来查了一下。可以用 <code> netstat</code> ，具体还得再去看看</li>\n<li><code>TCP是可靠传输的吗？它是怎么保证可靠传输的. </code> 是可靠传输的，它有很多机制来保证。超时重传、序号和确认、流量控制、拥塞控制。于是他又问 <code>TCP里面是不是有一个字段也可以保证这个可靠传输?</code>  校验和</li>\n<li><code>既然TCP有这么多机制来保证可靠校验，传输层只是网络协议的一层，那么在应用层，为什么还需要做额外的可靠性校验.</code>  这里我回答不上。面试官也引导了我，可惜我不会！后来面试官说先到这里，让我写两道题.</li>\n<li><code>股票买卖,一次交易</code></li>\n<li><code>链表逆置</code></li>\n</ol>\n<p>最后就结束了！比较令人烦的是腾讯会议搞的这个 <code>面呗</code> ，不知道是我不会用还是设计的有问题，题目也没办法调试，没有输入输出，我也没办法验证我写的对不对。最后特意写了一个输入输出，还需要写一个链表.</p>\n<ol start=\"17\">\n<li>最后简单聊了一些，问我有什么问题需要问他的？我随便问了一些，他说就一个问题吗？当时面的巨烂，瑟瑟发抖，于是乎又问了几个。最后结束的时候问我实验室，发现面试官是一个实验室的学长！那还挺幸运. hh</li>\n</ol>\n</blockquote>\n",
            "tags": [
                "校招"
            ]
        }
    ]
}