{
    "version": "https://jsonfeed.org/version/1",
    "title": "繁華落盡 似水流年 • All posts by \"操作系统\" category",
    "description": "编程日记 & 随笔",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/value/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98",
            "url": "http://example.com/value/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98",
            "title": "操作系统面试题",
            "date_published": "2024-03-13T01:21:27.470Z",
            "content_html": "<h1 id=\"操作系统面试题\"><a class=\"anchor\" href=\"#操作系统面试题\">#</a> 操作系统面试题</h1>\n<h2 id=\"主机启动\"><a class=\"anchor\" href=\"#主机启动\">#</a> 主机启动</h2>\n<blockquote>\n<p><code>BIOS</code> ：I/O 处理系统，开机时可以自动检测各种外设</p>\n<p><code>Bootloader</code> ：加载 OS</p>\n</blockquote>\n<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h2 id=\"进程与线程\"><a class=\"anchor\" href=\"#进程与线程\">#</a> 进程与线程</h2>\n<ul>\n<li>进程是资源分配的基本单位，线程是资源调度的基本单位</li>\n<li>一个线程属于一个进程，每个进程可以包含多个不同的线程</li>\n<li>每个进程有多个线程组层，但只有一个主线程，它们共享内存空间（堆、全局变量），但是有各自的栈空间</li>\n<li>系统开销</li>\n</ul>\n<h2 id=\"进程调度算法\"><a class=\"anchor\" href=\"#进程调度算法\">#</a> 进程调度算法</h2>\n<ul>\n<li>先来先服务 <code>FCFS(First Come First Serverd)</code> ：按照请求的顺序进行调度（不利于短作业，不会导致饿死）</li>\n<li>短作业优先 <code>SJF(Shortest Job First)</code> ：按估计运行时间最短的顺序进行调度（不利于长作业，会导致饿死）</li>\n<li>时间片轮转</li>\n<li>优先级调度</li>\n<li>多级反馈队列</li>\n</ul>\n<h2 id=\"进程间通信方式\"><a class=\"anchor\" href=\"#进程间通信方式\">#</a> 进程间通信方式</h2>\n<ul>\n<li>管道</li>\n<li>共享内存</li>\n<li>消息队列</li>\n<li>套接字：适用于不同主机之间的通信，也可以用于同一主机两个进程之间的通信</li>\n<li>信号：</li>\n<li>信号量</li>\n</ul>\n<h2 id=\"进程同步的四种方式\"><a class=\"anchor\" href=\"#进程同步的四种方式\">#</a> 进程同步的四种方式</h2>\n<h2 id=\"动态分区分配算法\"><a class=\"anchor\" href=\"#动态分区分配算法\">#</a> 动态分区分配算法</h2>\n<ul>\n<li>\n<p>首次适应算法：每次都从地地址开始查找，找到第一个能满足大小的空闲分区</p>\n</li>\n<li>\n<p>最佳适应算法：选择尽可能小的内存分区分配给进程</p>\n<blockquote>\n<p>空闲分区按照容量递增次序链接，每次分配内存时按顺序查找空闲分区链，找到第一个能满足要求的空闲分区</p>\n</blockquote>\n</li>\n<li>\n<p>最坏适应算法：每次分配时使用最大的空闲内存区，为了过多的内存碎片</p>\n<blockquote>\n<p>空闲分区安容量递减的次序链接，每次分配内存时按顺序查找空闲分区链，找到第一个能过满足要求的空闲分区</p>\n</blockquote>\n</li>\n<li>\n<p>邻近适应算法： <code>首次适应算法</code> 每次都要从链表头开始查找，这可能会导致地地址部分出现很多小的空闲分区，每次查找时需要进过这些分区，增加了查找开销。如果每次都从上次查找结束的位置开始检索，就能解决这个问题.</p>\n</li>\n</ul>\n<h2 id=\"虚拟技术\"><a class=\"anchor\" href=\"#虚拟技术\">#</a> 虚拟技术</h2>\n<blockquote>\n<p>虚拟技术是把一个物理实体转化为多个逻辑实体</p>\n</blockquote>\n<ul>\n<li>\n<p>时空复用技术</p>\n<blockquote>\n<p>多进程与多线程：多个进程能在同一个处理器上并发执行使用了时空复用技术，当每个进程轮流占用 CPU</p>\n</blockquote>\n</li>\n<li>\n<p>空分复用技术</p>\n<blockquote>\n<p>虚拟内存：将物理内存抽象为地址空间，每个进程都有各自的地址空间.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"虚拟内存的目的\"><a class=\"anchor\" href=\"#虚拟内存的目的\">#</a> 虚拟内存的目的</h2>\n<h2 id=\"进程状态切换\"><a class=\"anchor\" href=\"#进程状态切换\">#</a> 进程状态切换</h2>\n<h2 id=\"虚拟地址转换位物理地址的过程\"><a class=\"anchor\" href=\"#虚拟地址转换位物理地址的过程\">#</a> 虚拟地址转换位物理地址的过程</h2>\n",
            "tags": [
                "面试题"
            ]
        }
    ]
}