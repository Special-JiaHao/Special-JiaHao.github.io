<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>繁華落盡 似水流年 • Posts by &#34;操作系统&#34; category</title>
        <link>http://example.com</link>
        <description>编程日记 &amp; 随笔</description>
        <language>en</language>
        <pubDate>Wed, 13 Mar 2024 09:21:27 +0800</pubDate>
        <lastBuildDate>Wed, 13 Mar 2024 09:21:27 +0800</lastBuildDate>
        <category>mathematics</category>
        <category>语法</category>
        <category>C++</category>
        <category>VMware</category>
        <category>项目构建工具</category>
        <category>install</category>
        <category>数据库</category>
        <category>STL</category>
        <category>CNN</category>
        <category>Project</category>
        <category>面试题</category>
        <category>日常</category>
        <category>校招</category>
        <category>算法</category>
        <category>Leetcode双周赛</category>
        <category>Algorithm</category>
        <item>
            <guid isPermalink="true">http://example.com/value/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98</guid>
            <title>操作系统面试题</title>
            <link>http://example.com/value/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98</link>
            <category>面试题</category>
            <pubDate>Wed, 13 Mar 2024 09:21:27 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;操作系统面试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作系统面试题&#34;&gt;#&lt;/a&gt; 操作系统面试题&lt;/h1&gt;
&lt;h2 id=&#34;主机启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主机启动&#34;&gt;#&lt;/a&gt; 主机启动&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;BIOS&lt;/code&gt; ：I/O 处理系统，开机时可以自动检测各种外设&lt;br /&gt;
 &lt;code&gt;Bootloader&lt;/code&gt; ：加载 OS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;中断和异常的处理过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中断和异常的处理过程&#34;&gt;#&lt;/a&gt; 中断和异常的处理过程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;外中断是指由 CPU 执行指令以外的时间引起的，如 IO 完成中断、时钟中断；内中断（异常）是由 CPU 执行指令内部事件引起的，如地址越界、除 0、算术溢出等.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;硬件&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;设置中断标记&lt;/li&gt;
&lt;li&gt;操作系统根据这个标记（中断号）去找到对应的处理程序&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;保存现场：把当前执行程序的相关数据保存在寄存器中，然后入栈&lt;/li&gt;
&lt;li&gt;开中断：以便于响应优先级更高的中断请求&lt;/li&gt;
&lt;li&gt;中断服务程序处理&lt;/li&gt;
&lt;li&gt;关中断：保证恢复现场时不被中断&lt;/li&gt;
&lt;li&gt;恢复现场&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统调用&#34;&gt;#&lt;/a&gt; 系统调用&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;应用程序需要操作系统提供服务，而这些服务不能由应用程序直接执行。需要操作系统提供接 --- 系统调用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;用户态&lt;/code&gt; 转化到 &lt;code&gt;内核态&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;操作系统功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作系统功能&#34;&gt;#&lt;/a&gt; 操作系统功能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;进程管理&lt;/li&gt;
&lt;li&gt;内存管理：负责管理内存的分配、回收。在进程创建时分配内存以及在进程结束时回收内存，协调内存资源&lt;/li&gt;
&lt;li&gt;设备管理&lt;/li&gt;
&lt;li&gt;文件管理&lt;/li&gt;
&lt;li&gt;提供用户接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cpu内部结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu内部结构&#34;&gt;#&lt;/a&gt; CPU 内部结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;计算逻辑单元 ALU&lt;/li&gt;
&lt;li&gt;寄存器&lt;/li&gt;
&lt;li&gt;控制器&lt;/li&gt;
&lt;li&gt;缓存&lt;/li&gt;
&lt;li&gt;内存管理单元 MMU&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程与线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程与线程&#34;&gt;#&lt;/a&gt; 进程与线程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;进程的组成：
&lt;ul&gt;
&lt;li&gt;进程控制块 &lt;code&gt;PCB&lt;/code&gt; （ &lt;code&gt;PID&lt;/code&gt; ：唯一标识进程）&lt;/li&gt;
&lt;li&gt;代码段&lt;/li&gt;
&lt;li&gt;程序段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;进程是资源分配的基本单位，线程是资源调度的基本单位&lt;/li&gt;
&lt;li&gt;一个线程属于一个进程，每个进程可以包含多个不同的线程&lt;/li&gt;
&lt;li&gt;每个进程有多个线程组层，但只有一个主线程，它们共享内存空间（堆、全局变量），但是有各自的栈空间&lt;/li&gt;
&lt;li&gt;系统开销：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;进程切换：切换页表、切换内核栈和硬件上下文（进程切换之后，新程序的虚拟地址在 TLB 内失效，会导致频繁的访存）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;进程调度算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程调度算法&#34;&gt;#&lt;/a&gt; 进程调度算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;先来先服务 &lt;code&gt;FCFS(First Come First Serverd)&lt;/code&gt; ：按照请求的顺序进行调度（不利于短作业，不会导致饿死）&lt;/li&gt;
&lt;li&gt;短作业优先 &lt;code&gt;SJF(Shortest Job First)&lt;/code&gt; ：按估计运行时间最短的顺序进行调度（不利于长作业，会导致饿死）&lt;/li&gt;
&lt;li&gt;最短剩余时间有优先&lt;/li&gt;
&lt;li&gt;时间片轮转&lt;/li&gt;
&lt;li&gt;优先级调度&lt;/li&gt;
&lt;li&gt;多级反馈队列&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程状态切换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程状态切换&#34;&gt;#&lt;/a&gt; 进程状态切换&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81.jpg&#34; alt=&#34;&#34; title=&#34;进程状态切换&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;进程间通信ipc方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程间通信ipc方式&#34;&gt;#&lt;/a&gt; 进程间通信 IPC 方式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;两个或多个进程之间产生的数据交互&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;管道：半双工通信，数据只能单向流动，而且往往是在父子进程关系中使用. (一种特殊的共享文件 &lt;code&gt;pipe&lt;/code&gt; ，其实就是在内存中开辟的一块固定大小的缓冲区)&lt;/li&gt;
&lt;li&gt;共享内存：由一个进程创建，多个进程都可以访问的一段内存空间.&lt;/li&gt;
&lt;li&gt;消息队列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Socket&lt;/code&gt;  套接字：适用于不同主机之间的通信，也可以用于同一主机两个进程之间的通信&lt;/li&gt;
&lt;li&gt;信号&lt;/li&gt;
&lt;li&gt;信号量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程同步的四种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程同步的四种方式&#34;&gt;#&lt;/a&gt; 进程同步的四种方式&lt;/h2&gt;
&lt;h2 id=&#34;多线程模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多线程模型&#34;&gt;#&lt;/a&gt; 多线程模型&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;用户级线程&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;死锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁&#34;&gt;#&lt;/a&gt; 死锁&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;两个或多个进程无期限的堵塞、互相等待的一种状态.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;死锁的四个必要条件&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;互传条件&lt;/li&gt;
&lt;li&gt;请求与保持条件&lt;/li&gt;
&lt;li&gt;不剥夺条件&lt;/li&gt;
&lt;li&gt;循环等待条件&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;连续内存分配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连续内存分配&#34;&gt;#&lt;/a&gt; 连续内存分配&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单一连续分配&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内存中只有一道用户程序用户独占整个用户区空间，无外部碎片，有内部碎片；可以使用覆盖技术进行逻辑扩容，不需要采用内存保护&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%8D%95%E4%B8%80%E8%BF%9E%E7%BB%AD%E5%88%86%E9%85%8D.png&#34; alt=&#34;&#34; title=&#34;单一连续分配&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;固定分区分配（无外部碎片，会产生内部碎片）&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;分区大小相等（固定）：缺乏灵活性&lt;/li&gt;
&lt;li&gt;分区大小不等（固定）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%9B%BA%E5%AE%9A%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D.png&#34; alt=&#34;&#34; title=&#34;固定分区分配&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态内存分配：不会预先划分内存空间&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;首次适应算法：每次都从地地址开始查找，找到第一个能满足大小的空闲分区&lt;/li&gt;
&lt;li&gt;最佳适应算法：选择尽可能小的内存分区分配给进程；空闲分区按照容量递增次序链接，每次分配内存时按顺序查找空闲分区链，找到第一个能满足要求的空闲分区&lt;/li&gt;
&lt;li&gt;最坏适应算法：每次分配时使用最大的空闲内存区，为了过多的内存碎片；空闲分区安容量递减的次序链接，每次分配内存时按顺序查找空闲分区链，找到第一个能过满足要求的空闲分区&lt;/li&gt;
&lt;li&gt;邻近适应算法： &lt;code&gt;首次适应算法&lt;/code&gt; 每次都要从链表头开始查找，这可能会导致低地址部分出现很多小的空闲分区，每次查找时需要进过这些分区，增加了查找开销。如果每次都从上次查找结束的位置开始检索，就能解决这个问题.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;空闲内存的管理方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空闲内存的管理方式&#34;&gt;#&lt;/a&gt; 空闲内存的管理方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;空闲链表&lt;/li&gt;
&lt;li&gt;位图&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内存紧缩与交换式碎片整理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存紧缩与交换式碎片整理&#34;&gt;#&lt;/a&gt; 内存紧缩与交换式碎片整理&lt;/h2&gt;
&lt;h2 id=&#34;非连续内存分配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非连续内存分配&#34;&gt;#&lt;/a&gt; 非连续内存分配&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;连续内存空间分配，需要给程序分配连续空间，同时会产生外部碎片，内存利用率不高&lt;/li&gt;
&lt;li&gt;非连续内存分配优点：
&lt;ul&gt;
&lt;li&gt;程序的物理地址空间是非连续的，更好的利用内存空间&lt;/li&gt;
&lt;li&gt;允许共享代码与数据&lt;/li&gt;
&lt;li&gt;支持动态加载和动态链接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非连续内存分配缺点：建立虚拟地址空间到物理地址空间的转换&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分段&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;分段的寻址方式&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%88%86%E6%AE%B5%E9%80%89%E5%9D%80%E6%96%B9%E5%BC%8F.png&#34; alt=&#34;&#34; title=&#34;分段的寻址方式&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分页&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;逻辑页 &lt;code&gt;page&lt;/code&gt;  和物理页 &lt;code&gt;frame(帧)&lt;/code&gt;  的大小一致&lt;/li&gt;
&lt;li&gt;不是所有的页都有对应的帧&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%88%86%E9%A1%B5%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F.png&#34; alt=&#34;&#34; title=&#34;分页寻址方式&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分段与分页的区别&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;分页对程序员是透明的，但是分段需要程序员显示的划分每个段&lt;/li&gt;
&lt;li&gt;页的大小不可改变，段的大小可动态变化&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;页表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页表&#34;&gt;#&lt;/a&gt; 页表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;标志位&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;访问位：表示当前页之前是否被访问过&lt;/li&gt;
&lt;li&gt;修改位：表示当前页之前是否被修改过&lt;/li&gt;
&lt;li&gt;保护位：表示是否允许对该页做任何类型的操作（读、写、可执行等)&lt;/li&gt;
&lt;li&gt;驻留位：表示该页是在 &lt;code&gt;内存&lt;/code&gt; 中还是在 &lt;code&gt;外存&lt;/code&gt; 中&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;帧号&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%84.png&#34; alt=&#34;&#34; title=&#34;页表结构&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;由于逻辑空间很大，导致程序对应的页表会很大，无法存储在 CPU 内，所以页表一般放置在内存中，如没有任何其他优化机制，使用分页存储访问一个内存空间需要 2 次访存.&lt;/li&gt;
&lt;li&gt;时间优化：TLB&lt;/li&gt;
&lt;li&gt;空间优化：多级页表、反向页表&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tlb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tlb&#34;&gt;#&lt;/a&gt; TLB&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;TLB(Translation Look-aside Buffer)&lt;/code&gt; ：在 CPU 内的 MMU 中，用于缓存近期访问的页帧转换表项；使用相关存储器实现，时间局部性原理；若 TLB 命中则只需要一次访存，若 TLB missing，则需要两次访存.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/TLB.png&#34; alt=&#34;&#34; title=&#34;TLB&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;多级页表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多级页表&#34;&gt;#&lt;/a&gt; 多级页表&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%A4%9A%E7%BA%A7%E9%A1%B5%E8%A1%A8.png&#34; alt=&#34;&#34; title=&#34;多级页表&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;反向页表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反向页表&#34;&gt;#&lt;/a&gt; 反向页表&lt;/h2&gt;
&lt;h2 id=&#34;覆盖技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#覆盖技术&#34;&gt;#&lt;/a&gt; 覆盖技术&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;需要程序员自己把挣个程序划分为若干个小的功能模块，并确定各个模块之间的覆盖关系，增加程序员的负担&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;交换技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交换技术&#34;&gt;#&lt;/a&gt; 交换技术&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;以程序作为交换单位，需要把进程的整个地址空间都换进换出，增加了处理器的开销&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;虚拟技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟技术&#34;&gt;#&lt;/a&gt; 虚拟技术&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;虚拟技术是把一个物理实体转化为多个逻辑实体&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;时空复用技术&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多进程与多线程：多个进程能在同一个处理器上并发执行使用了时空复用技术，当每个进程轮流占用 CPU&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空分复用技术&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虚拟内存：将物理内存抽象为地址空间，每个进程都有各自的地址空间.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;虚拟内存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟内存&#34;&gt;#&lt;/a&gt; 虚拟内存&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;将物理空间扩充为更大的逻辑空间&lt;/li&gt;
&lt;li&gt;在装入程序时，不必将其全部装入内存，而只需将当前需要执行的部分页面或段装入内存，就可以让程序开始执行&lt;/li&gt;
&lt;li&gt;在程序执行过程中，如果执行的指令或访问的数据不在内存中（ &lt;code&gt;缺页&lt;/code&gt; 或 &lt;code&gt;缺段&lt;/code&gt; ），则由处理器通知操作系统将相应的页面或段调入内存，然后继续执行程序&lt;/li&gt;
&lt;li&gt;另一方面，操作系统将内存中暂时不适用的页面或段调出保存到磁盘中，从而腾出更多的空闲空间存放将要装入的程序&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;缺页中断处理过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺页中断处理过程&#34;&gt;#&lt;/a&gt; 缺页中断处理过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;页面置换算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页面置换算法&#34;&gt;#&lt;/a&gt; 页面置换算法&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;当缺页中断发生时，需要调入新的页面而内存已满时，选择内存当中那个物理页面进行替换（更可能减少换入换出的次数）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;最优页面置换算法：将未来最久不会被访问的页面置换出去（理想情况）&lt;/li&gt;
&lt;li&gt;先进先出算法&lt;/li&gt;
&lt;li&gt;最近最久未使用 &lt;code&gt;LRU,Least Recently Used&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;时钟页面置换算法&lt;/li&gt;
&lt;li&gt;二次机会法&lt;/li&gt;
&lt;li&gt;最不常用算法 &lt;code&gt;LFU,Least Frequently Used&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Belady&lt;/code&gt;  现象：分配的物理页面数增加，缺页率反而提高的异常现象（没有考虑进程访问的动态特征导致的， &lt;code&gt;FIFO&lt;/code&gt; ）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;虚拟地址转换位物理地址的过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟地址转换位物理地址的过程&#34;&gt;#&lt;/a&gt; 虚拟地址转换位物理地址的过程&lt;/h2&gt;
&lt;h2 id=&#34;磁盘调度算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘调度算法&#34;&gt;#&lt;/a&gt; 磁盘调度算法&lt;/h2&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考资料&#34;&gt;#&lt;/a&gt; 参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVlFNDExRDduSC8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT0zZmNhYTQ5NjM0NDM1MzcyM2ExZWMwZWEzZDAxMDQxZQ==&#34;&gt;王道计算机考研 操作系统_哔哩哔哩_bilibili&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXVXNDExZjcybi8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2s=&#34;&gt;清华 操作系统原理_哔哩哔哩_bilibili&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;[3] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zODA4NzI5MjA=&#34;&gt;操作系统常见面试题&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;[4] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xODE1OTY1&#34;&gt;这 50 道操作系统面试题，真牛批！&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
