{
    "version": "https://jsonfeed.org/version/1",
    "title": "繁華落盡 似水流年 • All posts by \"tools\" category",
    "description": "编程日记 & 随笔",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/value/CPP/jsoncpp",
            "url": "http://example.com/value/CPP/jsoncpp",
            "title": "jsoncpp",
            "date_published": "2024-04-06T02:28:27.024Z",
            "content_html": "<h1 id=\"jsoncpp\"><a class=\"anchor\" href=\"#jsoncpp\">#</a>  <code>jsoncpp</code></h1>\n<h2 id=\"ubuntu编译\"><a class=\"anchor\" href=\"#ubuntu编译\">#</a>  <code>ubuntu</code>  编译</h2>\n<ul>\n<li>\n<p><code>github</code>  地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW4tc291cmNlLXBhcnNlcnMvanNvbmNwcC9yZWxlYXNlcw==\">https://github.com/open-source-parsers/jsoncpp/releases</span></p>\n</li>\n<li>\n<p>解压 (后面跟上你压缩包名称)</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> xzvf jsoncpp-1.9.5.tar.gz</pre></td></tr></table></figure></li>\n<li>\n<p>编译</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure></li>\n<li>\n<p>生成的静态库文件和动态库文件在 <code>build/lib</code>  下方</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>one@one-virtual-machine:~/下载/jsoncpp-1.9.5/build/lib$ <span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>libjsoncpp.a  libjsoncpp.so  libjsoncpp.so.1.9.5  libjsoncpp.so.25</pre></td></tr></table></figure></li>\n<li>\n<p>将生成的静态库 / 动态库、头文件 <code>./include/json</code>  放置于你的项目目录下</p>\n</li>\n</ul>\n<h2 id=\"jsoncpp-api\"><a class=\"anchor\" href=\"#jsoncpp-api\">#</a>  <code>jsoncpp API</code></h2>\n<p><code>jsoncpp</code>  库中的类被定义在 <code>Json</code>  的命名空间中，使用 <code>jsoncpp</code>  解析 <code>json</code>  格式的数据，常用的一下几个类:</p>\n<h3 id=\"value\"><a class=\"anchor\" href=\"#value\">#</a>  <code>Value</code></h3>\n<p>封装了 <code>jsoncpp</code>  支持解析的数据类型，有如下几种：</p>\n<ul>\n<li><code>nullValue</code></li>\n<li><code>intValue</code></li>\n<li><code>uintValue</code></li>\n<li><code>realValue</code></li>\n<li><code>stringValue</code></li>\n<li><code>booleanValue</code></li>\n<li><code>arrayValue</code></li>\n<li><code>objectValue</code></li>\n</ul>\n<ol>\n<li>\n<p><strong>构造函数</strong></p>\n<pre><code class=\"language-cpp\"></code></pre>\n</li>\n<li>\n<p><strong>成员方法</strong></p>\n<pre><code class=\"language-cpp\"></code></pre>\n</li>\n</ol>\n<h3 id=\"fastwriter\"><a class=\"anchor\" href=\"#fastwriter\">#</a>  <code>FastWriter</code></h3>\n<p>将 <code>Value</code>  对象中的数据序列化为字符串</p>\n<h3 id=\"reader\"><a class=\"anchor\" href=\"#reader\">#</a>  <code>Reader</code></h3>\n<p>将 <code>json</code>  字符串反序列化为 <code>Value</code>  对象</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">Reader</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string document<span class=\"token punctuation\">,</span> Value<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> collectComments <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// C++ 风格</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>参数：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t1. document: json 格式的字符串</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t2. root: 传出参数，保留解析出的数据（存储在 Value 对象中）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t3. collectComments: 是否保存 json 字符串中的注释信息</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">Reader</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>beginDoc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> endDoc<span class=\"token punctuation\">,</span> Value<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> collectComments <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// C 风格</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">Reader</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> Value<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> collectComments <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "json"
            ]
        },
        {
            "id": "http://example.com/value/CPP/CMake",
            "url": "http://example.com/value/CPP/CMake",
            "title": "CMake",
            "date_published": "2023-12-19T08:01:14.989Z",
            "content_html": "<h1 id=\"cmake\"><a class=\"anchor\" href=\"#cmake\">#</a>  <code>CMake</code></h1>\n<h2 id=\"指定cmake最低版本依赖\"><a class=\"anchor\" href=\"#指定cmake最低版本依赖\">#</a> 指定 <code>CMake</code>  最低版本依赖</h2>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"项目名称\"><a class=\"anchor\" href=\"#项目名称\">#</a> 项目名称</h2>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>project_name <span class=\"token property\">VERSION</span> v1<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"生成可执行文件\"><a class=\"anchor\" href=\"#生成可执行文件\">#</a> 生成可执行文件</h2>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>project_name 源文件<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"构建-编译与运行\"><a class=\"anchor\" href=\"#构建-编译与运行\">#</a> 构建、编译与运行</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">mkdir</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">make</span></pre></td></tr></table></figure><h2 id=\"搜索源文件\"><a class=\"anchor\" href=\"#搜索源文件\">#</a> 搜索源文件</h2>\n<h2 id=\"参考博文\"><a class=\"anchor\" href=\"#参考博文\">#</a> 参考博文：</h2>\n<ul>\n<li>[1] <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbWFrZS5vcmcvY21ha2UvaGVscC9ib29rL21hc3RlcmluZy1jbWFrZS9jbWFrZS9IZWxwL2d1aWRlL3R1dG9yaWFsL2luZGV4Lmh0bWw=\">CMake Tutorial — Mastering CMake</span></li>\n</ul>\n<h2 id=\"cmake的使用\"><a class=\"anchor\" href=\"#cmake的使用\">#</a>  <code>cmake</code>  的使用</h2>\n<p><code>cmake</code>  是一个项目构建工具，并且是跨平台的。</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># CMake 使用 #来进行注释， 使用 #[[]] 来注释一整块代码</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>cmake_minimum_required(VERSION 3.0)</code> ：指定最低版本（非必要，推荐）</p>\n</li>\n<li>\n<p><code>project</code> ：定义工程文件名，（可指定工程版本，工程描述、web 主页，支持的语言）</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>add_executable</code></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>可执行程序名 源文件名称<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 源文件名称可能是一个个可能是多个，如果有多个可以用空格或；间隔</span></pre></td></tr></table></figure></li>\n<li>\n<p>执行 <code>cmake</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake CMakeLists.txt文件所在路径</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用 set 来定义一个变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>var value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 使用 $&#123;变量名&#125; 来取变量值</span></pre></td></tr></table></figure><ul>\n<li>\n<p>指定使用的 C++ 标准</p>\n<ul>\n<li>\n<p>方法一： <code>CMakeLists.txt</code>  中指定</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>方法二：执行 <code>cmake</code>  命令值指定</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake CMakeLists.txt文件路径 <span class=\"token parameter variable\">-DCMAKE_CXX_STANDARD</span><span class=\"token operator\">=</span><span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  cmake CMakeLists.txt文件路径 <span class=\"token parameter variable\">-DCMAKE_CXX_STANDARD</span><span class=\"token operator\">=</span><span class=\"token number\">14</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  cmake CMakeLists.txt文件路径 <span class=\"token parameter variable\">-DCMAKE_CXX_STANDARD</span><span class=\"token operator\">=</span><span class=\"token number\">17</span></pre></td></tr></table></figure></li>\n<li>\n<p>指定输出路径</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>home /home/robin/linux/sort<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">EXECUTABLE_OUTPUT_PATH</span> <span class=\"token punctuation\">$&#123;</span>home<span class=\"token punctuation\">&#125;</span>/bin<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"搜索文件\"><a class=\"anchor\" href=\"#搜索文件\">#</a> 搜索文件</h2>\n<ul>\n<li><code>aux_source_directory(dir var)</code> ：查找某个路径下的所以源文件</li>\n<li><code>file(GLOB/GLOB_RECURSE var 要搜索的文件路径和文件类型)</code></li>\n</ul>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 两个宏定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">PROJECT_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span> \t\t<span class=\"token comment\"># CMakeLists.txt 所在的路径</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">CMAKE_CURRENT_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\"># CMakeLists.txt 所在的路径</span></pre></td></tr></table></figure><h2 id=\"包含头文件\"><a class=\"anchor\" href=\"#包含头文件\">#</a> 包含头文件</h2>\n<ul>\n<li><code>include_directories(header_path)</code></li>\n</ul>\n<h2 id=\"制作静态库与动态库\"><a class=\"anchor\" href=\"#制作静态库与动态库\">#</a> 制作静态库与动态库</h2>\n<ul>\n<li>\n<p>制作静态库： <code>add_libray(库名称 STATIC 源文件1 源文件2 )</code></p>\n</li>\n<li>\n<p>制作动态库： <code>add_libray(库文件 SHARED 源文件1 源文件2)</code></p>\n<p><code>LIBRARY_OUTPUT_PATH</code>  ：用于指定生成的动态库 / 静态库的存放路径，动态库也可以使用 <code>EXECUTABLE_OUTPUT_PATH</code></p>\n</li>\n</ul>\n<h2 id=\"包含库文件静态库文件与动态库文件\"><a class=\"anchor\" href=\"#包含库文件静态库文件与动态库文件\">#</a> 包含库文件（静态库文件与动态库文件）</h2>\n<ul>\n<li>\n<p>链接静态库： <code>link_libraries(静态库名称)</code></p>\n<p>静态库名称可以是全称，例如 <code>libxxx.a</code> ；也可以是掐头去尾之后的名称 <code>xxx</code></p>\n</li>\n<li>\n<p>链接动态库： <code>target_link_libraries(目标文件 动态库文件)</code></p>\n</li>\n</ul>\n<blockquote>\n<p>如果静态库或动态库不是系统提供的，需要指定静态库 / 动态库的路径；</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">link_directories</span><span class=\"token punctuation\">(</span>对应的路径<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"日志\"><a class=\"anchor\" href=\"#日志\">#</a> 日志</h2>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">message</span><span class=\"token punctuation\">(</span>[STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR] 输出的消息<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>消息类型：</p>\n<ul>\n<li><code>（无）</code> ：重要消息</li>\n<li><code>STATUS</code> ：主要消息</li>\n<li><code>WARNING</code> ： <code>CMake</code>  警告</li>\n<li><code>AUTHOR_WARNING</code> ： <code>CMake</code>  警告</li>\n<li><code>SEND_ERROR</code> ： <code>CMake</code>  错误，跳过生成过程</li>\n<li><code>FATAL_ERROR</code> ： <code>CMake</code>  错误，终止所以处理过程</li>\n</ul>\n<h2 id=\"变量操作\"><a class=\"anchor\" href=\"#变量操作\">#</a> 变量操作</h2>\n<h3 id=\"字符串拼接\"><a class=\"anchor\" href=\"#字符串拼接\">#</a> 字符串拼接</h3>\n<ul>\n<li>\n<p>使用 <code>set</code></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>res <span class=\"token punctuation\">$&#123;</span>var1<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">$&#123;</span>var2<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 <code>list</code></p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>APPEND 变量名 需要追加的字符串<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"字符串移除\"><a class=\"anchor\" href=\"#字符串移除\">#</a> 字符串移除</h3>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>REMOVE_ITEM 变量名 移除的元素值<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"获取列表的长度\"><a class=\"anchor\" href=\"#获取列表的长度\">#</a> 获取列表的长度</h3>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 获取列表内元素个数，而非字符串长度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>LENGTH 变量名 outputVar<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"获取列表指定索引值\"><a class=\"anchor\" href=\"#获取列表指定索引值\">#</a> 获取列表指定索引值</h3>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>GET 变量名 &lt;element index<span class=\"token punctuation\">></span> ... &lt;output variable<span class=\"token punctuation\">></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>索引从 0 开始编号，索引也可以是负数，比如 <code>-1</code>  表示最后一个元素；超过列表长度则会报错</p>\n<h3 id=\"指定连接符拼接\"><a class=\"anchor\" href=\"#指定连接符拼接\">#</a> 指定连接符拼接</h3>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">list</span><span class=\"token punctuation\">(</span>JOIN 变量名<span class=\"token number\">1</span> 变量名<span class=\"token number\">2</span> ... 连接符 &lt;output variable<span class=\"token punctuation\">></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"查找指定元素\"><a class=\"anchor\" href=\"#查找指定元素\">#</a> 查找指定元素</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"在列表指定位置插入元素\"><a class=\"anchor\" href=\"#在列表指定位置插入元素\">#</a> 在列表指定位置插入元素</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"在列表头部插入元素\"><a class=\"anchor\" href=\"#在列表头部插入元素\">#</a> 在列表头部插入元素</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"在列表尾部元素删除\"><a class=\"anchor\" href=\"#在列表尾部元素删除\">#</a> 在列表尾部元素删除</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"移除列表头部元素\"><a class=\"anchor\" href=\"#移除列表头部元素\">#</a> 移除列表头部元素</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"移除指定索引的元素\"><a class=\"anchor\" href=\"#移除指定索引的元素\">#</a> 移除指定索引的元素</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"移除列表中的重复元素\"><a class=\"anchor\" href=\"#移除列表中的重复元素\">#</a> 移除列表中的重复元素</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"列表翻转\"><a class=\"anchor\" href=\"#列表翻转\">#</a> 列表翻转</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h3 id=\"列表排序\"><a class=\"anchor\" href=\"#列表排序\">#</a> 列表排序</h3>\n<pre><code class=\"language-cmake\">\n</code></pre>\n<h2 id=\"宏定义\"><a class=\"anchor\" href=\"#宏定义\">#</a> 宏定义</h2>\n<h3 id=\"内置宏\"><a class=\"anchor\" href=\"#内置宏\">#</a> 内置宏</h3>\n<ul>\n<li><code>VERSION</code> ： <code>CMake</code>  版本号</li>\n<li><code>CMAKE_CXX_STANDARD</code> ： <code>C++</code>  标准</li>\n<li><code>EXECUTABLE_OUTPUT_PATH</code> ：可执行文件的输出路径</li>\n</ul>\n",
            "tags": [
                "C++",
                "CMake"
            ]
        }
    ]
}