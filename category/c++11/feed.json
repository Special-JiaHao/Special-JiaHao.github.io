{
    "version": "https://jsonfeed.org/version/1",
    "title": "繁華落盡 似水流年 • All posts by \"c++11\" category",
    "description": "编程日记 & 随笔",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/value/CPP/C++11",
            "url": "http://example.com/value/CPP/C++11",
            "title": "C++11新特性",
            "date_published": "2024-04-02T00:53:23.525Z",
            "content_html": "<h1 id=\"c11\"><a class=\"anchor\" href=\"#c11\">#</a>  <code>C++11</code></h1>\n<blockquote>\n<p><strong>C++11</strong> is the second major version of C++ and the most important update since C<ins>98. A large number of changes were introduced to both standardize existing practices and improve the abstractions available to the C</ins> programmers.</p>\n</blockquote>\n<h2 id=\"原始字面量\"><a class=\"anchor\" href=\"#原始字面量\">#</a> 原始字面量</h2>\n<p><code>C++11</code>  中定义原始字面量的方式： <code>R&quot;×××(原始字面量)×××&quot;</code> ，其中 <code>()</code>  两边的字符可以省略。原始字面量可以直接表示字符串的实际含义，而不需要额外的转义字符。以下三条语句是等效的：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string path1 <span class=\"token operator\">=</span> <span class=\"token string\">\"D:\\\\Desktop\\\\tmp.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string path2 <span class=\"token operator\">=</span> <span class=\"token raw-string string\">R\"(D:\\Desktop\\tmp.txt)\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"指针空值类型nullptr\"><a class=\"anchor\" href=\"#指针空值类型nullptr\">#</a> 指针空值类型 <code>nullptr</code></h2>\n<p><code>nullptr</code>  是一个空指针类型，在 <code>C++</code>  中其可以隐式的转化为任何其他类型的空指针类型.</p>\n<blockquote>\n<p><code>NULL</code>  在 <code>C++</code>  中被定义为 0，这一点的设置主要是让目前的 C++ 兼容之前的 C 程序，0 可以隐式转化为其他类型的空指针类型。所以在 <code>C++</code>  程序中如果想要表达的是空指针，建议使用 <code>nullptr</code> ，如果使用 <code>NULL</code>  则可能导致出乎意料的结果.</p>\n</blockquote>\n<h2 id=\"常量表达式constexpr\"><a class=\"anchor\" href=\"#常量表达式constexpr\">#</a> 常量表达式 <code>constexpr</code></h2>\n<p><code>const</code>  在 <code>C++</code>  中有两个语义，变量只读和修饰常量。当 <code>const</code>  修饰常量时，其值在编译阶段就已经确定，而修饰变量时，则需要等到运行时才确定.  <code>C++</code>  为了区别这两种语义引入常量表达式 <code>constexpr</code> ，用于修饰常量，在编译阶段确定其值.</p>\n<p><code>constexpr</code>  可以用于修饰函数（常量表达式函数），可以用于修饰普通函数 / 类成员函数、类的构造函数、模版函数。修饰函数时，需要满足如下条件：</p>\n<ul>\n<li>函数必须有返回值，并且 <code>return</code>  返回的表达式必须是常量表达式</li>\n<li>整个函数体中不能出现非常量表达式之外语句</li>\n<li>修饰构造函数时，成员必须初始化，且初始化需要使用初始化列表</li>\n</ul>\n<h2 id=\"自动类型推导auto\"><a class=\"anchor\" href=\"#自动类型推导auto\">#</a> 自动类型推导 <code>auto</code></h2>\n<ul>\n<li><code>auto</code>  可以自动推导变量类型；使用 <code>auto</code>  声明的变量必须要进行初始化，以让编译器推导出它的实际类型，在编译阶段将 <code>auto</code>  占位符替换成其真正的类型.</li>\n<li>对于有 <code>const</code>  和 <code>volatile</code>  修饰的变量， <code>auto</code>  只能推断底层 <code>const</code>  或 <code>volatile</code> ，顶层 <code>const</code>  或 <code>volatile</code>  会被忽略，需要自己添加</li>\n<li>不能在函数的参数中使用，不能用于定义数组，不能用于类的非静态成员的初始化（只能用于类的静态常量成员变量的初始化）</li>\n<li>不能用于模版参数的类型推导</li>\n</ul>\n<h2 id=\"自动类型推导decltype\"><a class=\"anchor\" href=\"#自动类型推导decltype\">#</a> 自动类型推导 <code>decltype</code></h2>\n<blockquote>\n<p>我们希望从表达式（函数返回值）中推断出想要定义的变量的类型，但是却不想用表达式的值去初始化变量，这种情况 <code>auto</code>  显得无力了</p>\n</blockquote>\n<ul>\n<li>\n<p>推断表达式类型作为变量的定义类型</p>\n</li>\n<li>\n<p>推断函数返回值（实际不会调用，仅推断），推导出的对象类型与函数返回值一致</p>\n<blockquote>\n<p>当函数返回的是一个纯右值，需要忽略掉前面的 <code>const</code>  或 <code>volatile</code></p>\n</blockquote>\n</li>\n<li>\n<p>无论是底层 <code>const</code>  或 <code>volatile</code>  还是顶层 <code>const</code>  或 <code>volatile</code>  都会被保留</p>\n</li>\n<li>\n<p>表达式是一个左值，或者被 <code>()</code>  包围，使用 <code>decltype</code>  推导出来是表达式类型的引用（如果有 <code>const</code>  或 <code>volatile</code>  则需要加上）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//b 的类型为 int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//c 的类型为 int&amp;，绑定 a 对象</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"返回值类型后置\"><a class=\"anchor\" href=\"#返回值类型后置\">#</a> 返回值类型后置</h2>\n<h2 id=\"final\"><a class=\"anchor\" href=\"#final\">#</a>  <code>final</code></h2>\n<ul>\n<li>当用于修饰类时，表示该类不能被继承， <code>final</code>  卸载类名后面</li>\n<li>当修饰成员函数时，只能修饰虚函数，表示这个虚函数不能被重写， <code>final</code>  写在函数后</li>\n</ul>\n<h2 id=\"override\"><a class=\"anchor\" href=\"#override\">#</a>  <code>override</code></h2>\n<p>明确表明派生类中的函数重写了基类的虚函数， <code>override</code>  写在派生类函数（重写了基类虚函数）后面.</p>\n<h2 id=\"default\"><a class=\"anchor\" href=\"#default\">#</a>  <code>default</code></h2>\n<p><code>C++</code>  会为类默认生成一些特殊的成员函数，当我们想要使用时，可以不写让其默认生成，页可以使用 <code>default</code>  方式来显示定义</p>\n<blockquote>\n<p>当我们自定义了有参构造函数时，系统也就不会生成默认构造函数，这是往往需要我们自定义或者使用 <code>default</code>  来显示定义无参构造函数，否则当程序调用无参构造函数时，会引发错误.</p>\n</blockquote>\n<h2 id=\"delete\"><a class=\"anchor\" href=\"#delete\">#</a>  <code>delete</code></h2>\n<p><code>c++</code>  中，如果开发人员没有定义特殊成员函数，那么编译器在需要特殊成员函数时候会隐式自动生成一个默认的特殊成员函数，而我们有时候想禁止对象的拷贝与赋值，可以使用 delete 修饰.</p>\n<blockquote>\n<p><code>delete</code>  关键字的用处： <code>std::unique_ptr就是通过delete修饰来禁止对象的拷贝</code> ，单例模式.</p>\n</blockquote>\n<h2 id=\"explicit\"><a class=\"anchor\" href=\"#explicit\">#</a>  <code>explicit</code></h2>\n<p>专门用于修饰构造函数，表示只能显示的构造，不能被隐式转换.（用于防止调用构造函数隐式转换）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">m_data</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> m_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Test tp <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  \t\t<span class=\"token comment\">//  right!  进行了隐式的类型转换</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/* ------------------------ */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">m_data</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> m_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Test tp <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  \t\t<span class=\"token comment\">//  error!</span></pre></td></tr></table></figure><h2 id=\"long-long\"><a class=\"anchor\" href=\"#long-long\">#</a>  <code>long long</code></h2>\n<h2 id=\"带作用域的枚举类型enum\"><a class=\"anchor\" href=\"#带作用域的枚举类型enum\">#</a> 带作用域的枚举类型 <code>enum</code></h2>\n<ul>\n<li>不带作用域的枚举类型</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">AColor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    kRed<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    kGreen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    kBlue</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">BColor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    kWhite<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    kBlack<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    kYellow</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>kRed <span class=\"token operator\">==</span> kWhite<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 1</span></pre></td></tr></table></figure><p>不带作用域的枚举类型可以自动转换成整形，且不同的枚举可以相互比较，代码中的红色居然可以和白色比较，这都是潜在的难以调试的 bug，而这种完全可以通过有作用域的枚举来规避.</p>\n<ul>\n<li>带作用域的枚举类型</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AColor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    kRed<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    kGreen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    kBlue</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BColor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    kWhite<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    kBlack<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    kYellow</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>AColor<span class=\"token double-colon punctuation\">::</span>kRed <span class=\"token operator\">==</span> BColor<span class=\"token double-colon punctuation\">::</span>kWhite<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// compile error!</span></pre></td></tr></table></figure><h2 id=\"非受限联合体union\"><a class=\"anchor\" href=\"#非受限联合体union\">#</a> 非受限联合体 <code>union</code></h2>\n<h2 id=\"函数模版默认模版参数\"><a class=\"anchor\" href=\"#函数模版默认模版参数\">#</a> 函数模版默认模版参数</h2>\n<p>在 <code>C++98/03</code>  标准中，类模版可以有默认的模版参数，如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>T tp<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>tp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>a <span class=\"token operator\">=</span> tp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    T a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Test<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span> <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token number\">20.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>t1<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 20</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Test<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token number\">20.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>t2<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 20.1</span></pre></td></tr></table></figure><p>但是不支持函数模版的默认模版参数， <code>C++11</code>  添加了对函数模版的默认参数的支持。当默认模版参数和模版参数自动推导同时使用时：</p>\n<ul>\n<li>如果可以推导出参数类型，则使用推导出的参数类型</li>\n<li>如果无法推导出参数类型，则使用模版默认的参数类型</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>T t <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">,</span> U u <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> t <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&lt;&lt;</span> u <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// func&lt;int, int></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//  func&lt;int, char></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// func&lt;char, char></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// func&lt;int, int></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t  <span class=\"token comment\">// func&lt;long long, int></span></pre></td></tr></table></figure><h2 id=\"using定义别名\"><a class=\"anchor\" href=\"#using定义别名\">#</a>  <code>using</code>  定义别名</h2>\n<p>在 <code>C++</code>  中，通过 <code>typedef</code>  重定义一个类型，语法格式为 <code>typedef 旧的类型名 新的类型名;</code>  通过 <code>using</code>  来定义类型别名语法格式 <code>using 新的类型 旧的类型;</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 给数据类型定义别名 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 给函数指针定义别名 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> func <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* 给模版定义别名 */</span></pre></td></tr></table></figure><h2 id=\"委托构造函数\"><a class=\"anchor\" href=\"#委托构造函数\">#</a> 委托构造函数</h2>\n<p>委托构造函数允许在同一个类的一个构造函数中调用该类内的其他构造函数，这样一来可以简化对变量进行初始化的操作了（不过调用关系中药防止闭环）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>c <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"继承构造函数\"><a class=\"anchor\" href=\"#继承构造函数\">#</a> 继承构造函数</h2>\n<p>继承构造函数可以让派生类直接使用基类的构造函数，如果有一个派生类，我们希望派生类采用和积基类一样的构造方法，可以直接使用基类的构造函数，而不是重新写一遍构造函数.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>c <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">using</span> Base<span class=\"token double-colon punctuation\">::</span>Base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Derived <span class=\"token function\">tp</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>除此之外，我们可以使用 <code>using</code>  在派生类中引入基类中被隐藏的成员函数 (重写)</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t在派生类 Derived 中我们需要重定义 fun 成员函数，这样一来会导致基类中的所有 fun 函数（被重载）都会被隐藏，如果我们只是想修改 fun 无参函数的功能，其他 fun 有参的成员函数保留，就需要使用 using </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>c <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base fun\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"fun(\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">using</span> Base<span class=\"token double-colon punctuation\">::</span>Base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">using</span> Base<span class=\"token double-colon punctuation\">::</span>fun<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derived fun\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"列表初始化\"><a class=\"anchor\" href=\"#列表初始化\">#</a> 列表初始化</h2>\n<h2 id=\"stdinitializer_list\"><a class=\"anchor\" href=\"#stdinitializer_list\">#</a>  <code>std::initializer_list</code></h2>\n<h2 id=\"可调用对象\"><a class=\"anchor\" href=\"#可调用对象\">#</a> 可调用对象</h2>\n<h2 id=\"基于范围的for循环\"><a class=\"anchor\" href=\"#基于范围的for循环\">#</a> 基于范围的 <code>for</code>  循环</h2>\n<h2 id=\"lamada表达式\"><a class=\"anchor\" href=\"#lamada表达式\">#</a>  <code>lamada</code>  表达式</h2>\n<ul>\n<li>声明式的编程风格：就地匿名定义目标函数或函数对象，不需要额外写一个命名函数或函数对象</li>\n<li>避免的代码膨胀和功能分散</li>\n<li>在需要的时间和地点实现功能闭包</li>\n</ul>\n<h2 id=\"右值引用\"><a class=\"anchor\" href=\"#右值引用\">#</a> 右值引用</h2>\n<ul>\n<li>\n<p>左值 <code>(location value, lvalue)</code> ，存储在内存中，有明确的存储地址（可取地址）的数据，是具名的</p>\n</li>\n<li>\n<p>右值 <code>(read value, rvalue)</code> ，可以提供数据值的数据，不可取地址，是匿名的</p>\n<blockquote>\n<ol>\n<li>纯右值：非引用返回的临时变量、运算表达式产生的临时变量、原始字面量和 <code>lambda</code>  表达式</li>\n<li>将亡值：</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>右值引用就是对一个右值的引用。因为右值是匿名的，我们只能通过引用的方式来找到它。通过右值引用，该右值可 <code>重获新生</code> ，其生命周期与右值引用类型变量的生命周期一样.</p>\n</li>\n</ul>\n<h2 id=\"智能指针\"><a class=\"anchor\" href=\"#智能指针\">#</a> 智能指针</h2>\n<ul>\n<li><code>shared_ptr</code>\n<ol>\n<li>初始化方法：构造函数初始化、通过拷贝和移动构造函数、 <code>make_shared()</code> 、 <code>reset</code></li>\n<li>查看引用计数 <code>use_count()</code></li>\n<li>获取原始指针 <code>get()</code></li>\n</ol>\n</li>\n<li><code>unique_ptr</code></li>\n<li><code>werk_ptr</code></li>\n</ul>\n<h2 id=\"并发\"><a class=\"anchor\" href=\"#并发\">#</a> 并发</h2>\n<h2 id=\"参考博文\"><a class=\"anchor\" href=\"#参考博文\">#</a> 参考博文</h2>\n<ul>\n<li>[1] <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdWJpbmd3ZW4uY24vY2F0ZWdvcmllcy9DLw==\">爱编程的大丙 (subingwen.cn)</span></li>\n<li>[2] <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwLzEx\">C++11 - cppreference.com</span></li>\n<li>[3] <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMzk1MTU0Mzk=\">c++11 新特性，所有知识点都在这了！ - 知乎 (zhihu.com)</span></li>\n</ul>\n",
            "tags": [
                "C++"
            ]
        }
    ]
}