<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>繁華落盡 似水流年 • Posts by &#34;面试题&#34; category</title>
    <link href="http://example.com" />
    <updated>2024-03-13T06:46:17.113Z</updated>
    <category term="mathematics" />
    <category term="语法" />
    <category term="C++" />
    <category term="VMware" />
    <category term="install" />
    <category term="数据库" />
    <category term="STL" />
    <category term="CNN" />
    <category term="Project" />
    <category term="面试题" />
    <category term="日常" />
    <category term="校招" />
    <category term="算法" />
    <category term="Leetcode双周赛" />
    <category term="Algorithm" />
    <category term="Leetcode周赛" />
    <category term="设计模式" />
    <category term="多线程" />
    <category term="池化技术" />
    <category term="MySQL" />
    <category term="操作系统" />
    <category term="计算机网络" />
    <category term="CMake" />
    <category term="线程池" />
    <category term="Go" />
    <category term="Redis" />
    <category term="Linux" />
    <category term="json" />
    <category term="机器学习" />
    <entry>
        <id>http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98</id>
        <title>MySQL面试题</title>
        <link rel="alternate" href="http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98"/>
        <content type="html">&lt;h1 id=&#34;mysql面试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql面试题&#34;&gt;#&lt;/a&gt; MySQL 面试题&lt;/h1&gt;
&lt;h2 id=&#34;关系型数据库和非关系型数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关系型数据库和非关系型数据库&#34;&gt;#&lt;/a&gt; 关系型数据库和非关系型数据库&lt;/h2&gt;
&lt;h2 id=&#34;myisam和innodb的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#myisam和innodb的区别&#34;&gt;#&lt;/a&gt;  &lt;code&gt;MyISAM&lt;/code&gt;  和 &lt;code&gt;InnoDB&lt;/code&gt;  的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;MyISAM&lt;/code&gt;  索引采用的是非聚簇索引，索引的数据域存储数据的指针，而 &lt;code&gt;InnoDB&lt;/code&gt;  主键采用的是聚簇索引，非主键采用非聚簇索引，索引的数据域存储主键的 id.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MyISAM&lt;/code&gt;  不支持事务，但是每次查询都是原子操作； &lt;code&gt;Innodb&lt;/code&gt;  支持 &lt;code&gt;ACID&lt;/code&gt;  的事务，支持事务的四种隔离级别&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MyISAM&lt;/code&gt;  存储表的总行数； &lt;code&gt;InnoDB&lt;/code&gt;  不存储表的总行数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MyISAM&lt;/code&gt;  不支持外键约束，而 &lt;code&gt;InnoDB&lt;/code&gt;  支持&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MyISAM&lt;/code&gt;  支持最小粒度所为表级锁； &lt;code&gt;InnoDB&lt;/code&gt;  支持行级锁&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;覆盖索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#覆盖索引&#34;&gt;#&lt;/a&gt; 覆盖索引&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;索引的值包含所需要查询的字段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;innodb的索引与myisam的所索引的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#innodb的索引与myisam的所索引的区别&#34;&gt;#&lt;/a&gt;  &lt;code&gt;InnoDB&lt;/code&gt;  的索引与 &lt;code&gt;MyISAM&lt;/code&gt;  的所索引的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;MyISAM&lt;/code&gt;  索引文件和数据文件是分离的，使用 B + 树来实现，主键索引和辅助索引实现基本一致（非主键不保证唯一）；叶子节点仅保存数据和数据的地址（非聚簇索引）.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InnoDB&lt;/code&gt;  索引分两种，聚簇索引和非聚簇索引，聚簇索引的叶子节点同 时也会存储数据。非聚簇索引的索引数据域保存主键的 id&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;为什么使用索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么使用索引&#34;&gt;#&lt;/a&gt; 为什么使用索引&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;索引是数据库中用于加速数据访问的一种数据结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在关系型数据库中，通常使用 &lt;code&gt;B-Tree&lt;/code&gt;  或哈希表等索引结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引可以提高查询效率，建立索引的原则如下.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;区分度高的列作为索引可以加快查询速度&lt;/li&gt;
&lt;li&gt;经常出现在 &lt;code&gt;where&lt;/code&gt;  中的列&lt;/li&gt;
&lt;li&gt;表记录较少索引效果不好，没有必要建立索引&lt;/li&gt;
&lt;li&gt;定义有外键的数据列一定要建立索引&lt;/li&gt;
&lt;li&gt;更新频繁的数据列不适合建立索引&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引会降低插入、删除、更新表的速度，因为在执行这些操作时，还需要操作索引文件.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引需要占用物理空间，除了索引表需要占用空间之外，每个索引也需要占用额外的存储空间。同时如果非聚餐索引很多，一旦聚簇索引改变，那么非聚簇索引也需要跟着改变，代价比较大&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;MySQL 中使用较多的是 &lt;code&gt;Hash索引&lt;/code&gt; 和 &lt;code&gt;B+树索引&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于哈希索引来说，底层的数据结构就是哈希表，因此对于绝大多数需求为单挑记录的查询的时候，可以选择哈希索引，查询性能高，其余的绝大多数场景使用 B + 树所以&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;聚簇索引和非聚簇索引的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#聚簇索引和非聚簇索引的区别&#34;&gt;#&lt;/a&gt; 聚簇索引和非聚簇索引的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;聚簇索引：主键索引&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;将数据存储在索引树的叶子节点上，可以减少一次查询（查询索引树的同时就能获得数据）&lt;/li&gt;
&lt;li&gt;当需要对数据进行修改或删除时，需要更新索引树，增加系统开销（聚簇索引保证顺序，当中间有数据需要插入时，可能引起分页）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非聚簇索引：二级索引 / 辅助索引&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;不将数据存储在索引树中，而是存储在数据页中；查询数据时需要两次查询，一次用于查询索引树，获取数据页的地址，在通过数据页的地址来查询数据（如果索引覆盖的话实际上不用回表）&lt;/li&gt;
&lt;li&gt;当需要对数据进行修改或删除时，不需要更新索引树，减少了系统开销&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;唯一索引与普通索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#唯一索引与普通索引&#34;&gt;#&lt;/a&gt; 唯一索引与普通索引&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;区别：唯一索引的索引值必须唯一，但允许有空值（即可以是单列唯一索引也可以是联合唯一索引）；普通索引索引值不一定唯一，且允许有空值.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;唯一索引可以保证数据的唯一性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;联合索引-组合索引-复合索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#联合索引-组合索引-复合索引&#34;&gt;#&lt;/a&gt; 联合索引、组合索引、复合索引&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;组合索引、联合索引、复合索引指代都是一个意思，一个索引包含多个列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;最左前缀匹配&lt;/code&gt; ：组合索引的第一个字段必须出现在查询语句中，还不能跳跃，只有这样才能让组合索引生效&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 假设给 username，age 创建了组合索引&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 组合索引生效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; username &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xujiahao&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; username &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xujiahao&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; username &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xujiahao&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 特殊情况&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 组合索引失效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; city &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;shenzhen&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;索引失效的情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引失效的情况&#34;&gt;#&lt;/a&gt; 索引失效的情况&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;like&lt;/code&gt;  查询并且左边带 &lt;code&gt;%&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;索引往往使用的是 B + 树结构，是一个有序排列的。百分号放在前面进行一个模糊查找时，前面都能匹配，很有可能就无法更具索引的有序性来进行查找了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐式类型转换。索引字段是 &lt;code&gt;int&lt;/code&gt; ，而使用字符串类型去查询&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;where&lt;/code&gt;  条件里面对索引使用运算或者函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;or&lt;/code&gt;  且存在非索引列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;where&lt;/code&gt;  条件中对两列作比较&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;in&lt;/code&gt; （和数据量有关系）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;order by&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;is null&lt;/code&gt; 、 &lt;code&gt;is not null&lt;/code&gt; 、 &lt;code&gt;≠&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;innodb为什么使用自增id作为主键&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#innodb为什么使用自增id作为主键&#34;&gt;#&lt;/a&gt;  &lt;code&gt;InnoDB&lt;/code&gt;  为什么使用自增 &lt;code&gt;id&lt;/code&gt;  作为主键&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用自增 &lt;code&gt;id&lt;/code&gt;  作为主键，那么在建立索引时，每次插入新的记录，记录会顺序添加到当前索引的后续位置，直到一页满为至才会开辟一个新的页&lt;/li&gt;
&lt;li&gt;如果使用非自增主键，由于每次插入的主键值比较随机，每次新纪录可能需要插入到现在索引的中间位置，会操作频繁的移动（内部单链表）和分页&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;b树与b树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#b树与b树&#34;&gt;#&lt;/a&gt; B 树与 B + 树&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;查询一个数据时，在数据页内往往使用二分查找&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;B 树：一种平衡的多叉搜索树&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;每个节点包含多个关键字和对应的指针，即 B 数的每个节点都会存储数据&lt;/li&gt;
&lt;li&gt;B 树的叶子节点之间是指针相连的，不支持顺序访问&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B + 树：一种平衡的多叉搜索树&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;所以的关键字都存储在叶子节点上，非叶子节点不存储数据，只存储索引和指向孩子节点的指针&lt;/li&gt;
&lt;li&gt;叶子节点通过指针连接起来，形成一个有序的链表，支持顺序访问和范围查找（MySQL 底层实际是一个双向链表）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL 选择 B + 树作为索引结构的原因&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;范围查询和顺序访问的性能更高：B + 树的叶子节点通过指针连接成一个双向链表，可以很好的支持数据库的范围查询，同时在连续的数据查询中，B + 树可以利用磁盘的预读特性，提高数据顺序访问性能，嫌少磁盘 I/O&lt;/li&gt;
&lt;li&gt;更少的磁盘 I/O：B + 树的非叶子节点只存储索引和指向孩子的节点指针，不存储数据，相比于 B 树，每个节点可以存储更多的关键字，减少了磁盘 I/O 次数（节点可以存储更多的关键字，可以使得 B + 树高更矮)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据库三大范式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库三大范式&#34;&gt;#&lt;/a&gt; 数据库三大范式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;数据库设计表结构时所遵循的规范，目的是为了减少冗余，提高数据存储和使用的效率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;第一范式：数据库表中的每个列都必须是原子性的，不可再分；同时每个表有一个主键.&lt;/li&gt;
&lt;li&gt;第二范式：表中非主键列必须完全依赖于主键，而不是部分依赖于主键. (如果有非主键列部分依赖于主键，需要将改列拆分并且放置于另外一张表中)&lt;/li&gt;
&lt;li&gt;第三范式：表中的非主键列之间不能存在传递依赖关系&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在实际的设计，经常也有反范式的现象，通过冗余的数据，来避免跨表的连接查询，以此来提高数据库的查询效率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;数据库表的连接方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库表的连接方式&#34;&gt;#&lt;/a&gt; 数据库表的连接方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内连接&lt;/li&gt;
&lt;li&gt;左连接&lt;/li&gt;
&lt;li&gt;右连接&lt;/li&gt;
&lt;li&gt;全连接&lt;/li&gt;
&lt;li&gt;自连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;char与varchar&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#char与varchar&#34;&gt;#&lt;/a&gt; char 与 varchar&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;char&lt;/code&gt; ：定长字符类型。如果存储的字符串长度小于指定长度，会使用空格进行填充&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;varchar&lt;/code&gt; ：变长字符类型。它实际占用的存储空间为字符串的实际空间和用于存储字符串长度信息的空间&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;存储效率： &lt;code&gt;char&lt;/code&gt;  定长，无论字符串的实际长度多少，它占用的存储空间是固定，会浪费一定的空间.  &lt;code&gt;varchar&lt;/code&gt;  是变长的，其占用的实际空间会随着字符串的大小而变动，存储效率较高&lt;/li&gt;
&lt;li&gt;查询效率： &lt;code&gt;char&lt;/code&gt;  在搜索和排序方面的操作效率要高于 &lt;code&gt;varchar&lt;/code&gt;  类型&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql锁的种类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql锁的种类&#34;&gt;#&lt;/a&gt; MySQL 锁的种类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;读写锁（锁的属性）&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;共享锁 &lt;code&gt;Share Lock&lt;/code&gt; ：读锁（ &lt;code&gt;S锁&lt;/code&gt; ），当一个事务为数据加上读锁之后，其他事务只能对该数据加读锁。为了支持高并发读取数据.&lt;/li&gt;
&lt;li&gt;排他锁 &lt;code&gt;Exclusive Lock&lt;/code&gt; ：写锁（ &lt;code&gt;X锁&lt;/code&gt; ），当一个事务为数据加上了写锁之后，其他请求不能再为这条数据加任何锁.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;锁的粒度&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;行锁：锁住表中的某一行或多行，粒度小，冲突小&lt;/li&gt;
&lt;li&gt;表锁：锁住整张表，粒度大，容易冲突&lt;/li&gt;
&lt;li&gt;记录数 &lt;code&gt;Record Lock&lt;/code&gt; ：是行锁的一种，锁住表中的一条记录（命中的条件字段是一定是唯一索引）&lt;/li&gt;
&lt;li&gt;页锁：一种粒度介于行所和表锁之间的一种锁。每次锁定相邻的一组记录.&lt;/li&gt;
&lt;li&gt;间隙锁 &lt;code&gt;Gap Lock&lt;/code&gt; ：属于行锁的一种&lt;/li&gt;
&lt;li&gt;临建锁 &lt;code&gt;Next-Key Lock&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;意向锁&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果当事务 A 加锁成功后设置一个状态告诉后面的人：已经有人对表里的行加了一个排他锁，不能再对整个表加共享锁或排他锁，那么后面需要对整个表加锁的人获取这个状态就知道是不是可以对表加锁，避免对这个索引表的每个节点扫描查看他们是否加锁，这个锁就是意向锁.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意向共享锁：当一个事务试图对整个表加共享锁时，首先需要获取这个表的意向共享锁&lt;/li&gt;
&lt;li&gt;意向排他锁：当一个事务试图对整个表加排他锁时，首先需要获取这个表的意向排他锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql执行计划&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql执行计划&#34;&gt;#&lt;/a&gt; MySQL 执行计划&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;执行计划： &lt;code&gt;sql&lt;/code&gt;  的执行查询的顺序，以及如何使用索引&lt;/p&gt;
&lt;p&gt;在语句前面添加 &lt;code&gt;explain&lt;/code&gt;  即可打印执行计划&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;执行计划参数&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; ：&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql中的死锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql中的死锁&#34;&gt;#&lt;/a&gt; MySQL 中的死锁&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的的一种互相等待的现象.&lt;/p&gt;
&lt;p&gt;产看死锁的命令： &lt;code&gt;show engine innodb status&lt;/code&gt; ；可以通过设置 &lt;code&gt;innodblockwait_timeout&lt;/code&gt;  来设置曹超时时间或主动回滚死锁中的某个事务.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;数据库的四大特性acid&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库的四大特性acid&#34;&gt;#&lt;/a&gt; 数据库的四大特性 ACID&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;原子性Atomicity&lt;/code&gt; ：当前事务的操作要么执行成功，要么执行失败&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由 &lt;code&gt;undo log&lt;/code&gt;  日志保证，记录了需要回滚的日子信息，事务回滚时撤销已经执行成功的 &lt;code&gt;sql&lt;/code&gt;  语句&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;一致性Consistency&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由其他三大特性共同来保证&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;隔离性Isolation&lt;/code&gt; ：在事务并发执行时，他们内部的操作不能互相干扰&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由 &lt;code&gt;MVCC&lt;/code&gt;  来保证&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;持久性Durability&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由内存 &lt;code&gt;redo log&lt;/code&gt;  来保证， &lt;code&gt;mysql&lt;/code&gt;  修改数据同时在内存和 &lt;code&gt;redo log&lt;/code&gt;  记录这次操作，宕机的时候可以从 &lt;code&gt;redo log&lt;/code&gt;  恢复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事务隔离级别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务隔离级别&#34;&gt;#&lt;/a&gt; 事务隔离级别&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;InnoDB&lt;/code&gt;  中 隔离性是由 MySQL 的各种锁机制以及 &lt;code&gt;MVCC&lt;/code&gt;  来实现的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;读未提交 &lt;code&gt;read_uncommitted(RU)&lt;/code&gt; ：有脏读问题&lt;/li&gt;
&lt;li&gt;读已提交 &lt;code&gt;read_committed(RC)&lt;/code&gt; ：有不可重复读的问题&lt;/li&gt;
&lt;li&gt;可重复读 &lt;code&gt;repeatable-read(RR)&lt;/code&gt; ：会有幻读的问题&lt;/li&gt;
&lt;li&gt;串行化 &lt;code&gt;serializable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据库并发事务会带来哪些问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库并发事务会带来哪些问题&#34;&gt;#&lt;/a&gt; 数据库并发事务会带来哪些问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;脏读&lt;/li&gt;
&lt;li&gt;不可重复读&lt;/li&gt;
&lt;li&gt;幻读&lt;/li&gt;
&lt;li&gt;丢失修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mvcc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mvcc&#34;&gt;#&lt;/a&gt; MVCC&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;多版本并发控制：读取数据时通过一种类似于快照的方式将数据保存下来，这样读锁和写锁就不冲突了；不同的事务会看到特定版本的数据（版本链）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MVCC&lt;/code&gt;  只在读已提交和可重复读两个隔离级别下工作. ( &lt;code&gt;read_uncommited&lt;/code&gt;  总是读取最新的数据； &lt;code&gt;serializable&lt;/code&gt;  会对所以的读操作加锁)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;聚簇索引中有两个隐藏的列&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;trx_id&lt;/code&gt; ：存储每次对这条索引记录进行修改的 &lt;code&gt;事务ID&lt;/code&gt;  (事务 ID 根据时间顺序依次递增)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;roll_pointer&lt;/code&gt; ：上一版本的记录地址.（每次对聚簇索引记录有修改操作时，都会把老版本写入 &lt;code&gt;undo&lt;/code&gt;  日志中，而这个修改后的新记录的 &lt;code&gt;roll_pointer&lt;/code&gt;  则会指向日志中旧版本）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;ReadView&lt;/code&gt;  是快照读（普通的 &lt;code&gt;select&lt;/code&gt;  查询语句）执行时 &lt;code&gt;MVCC&lt;/code&gt;  提取数据的依据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;m_ids&lt;/code&gt; ：当前活跃的事务编号的集合（还未提交的事务集合）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min_trx_id&lt;/code&gt; ：最小活跃事务的编号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_trx_id&lt;/code&gt; ：预分配事务的编号，当前最大事务 ID+1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;creator_trx_id&lt;/code&gt; ： &lt;code&gt;ReadView&lt;/code&gt;  创建者的事务编号&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;当前读&lt;/code&gt; ：指执行如下指令对数据进行读取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Insert、Update、Delete、Select ... for Update、Select ... lock in share mode&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E7%89%88%E6%9C%AC%E9%93%BE.png&#34; alt=&#34;&#34; title=&#34;版本链&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;读已提交隔离级别下 MVCC 的工作方式：在每一次执行快照读的时候生成 &lt;code&gt;ReadView&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1. 判断版本链的 &lt;code&gt;trx_id&lt;/code&gt;  是否等于 &lt;code&gt;creator_trx_id&lt;/code&gt; ，若等于说明对该条记录的更新就是当前事务，则可以访问&lt;/p&gt;
&lt;p&gt;2. 判断版本链的 &lt;code&gt;trx_id&lt;/code&gt;  是否小于 &lt;code&gt;min_trx_id&lt;/code&gt; ，若小于说明对该记录的处理已经提交，可访问&lt;/p&gt;
&lt;p&gt;3. 判断版本链的 &lt;code&gt;trx_id&lt;/code&gt;  是否大于等于 &lt;code&gt;max_trx_id&lt;/code&gt; ，如果成立说明对该条记录的操作是在生成 &lt;code&gt;ReadView&lt;/code&gt;  之后，不可访问&lt;/p&gt;
&lt;p&gt;4. 判断版本链的 &lt;code&gt;trx_id&lt;/code&gt;  是否在 &lt;code&gt;m_idx&lt;/code&gt;  中，如果不存在，说明对该条记录的操作已提交，可以访问，若存在，则不可访问&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/ReadView.png&#34; alt=&#34;&#34; title=&#34;ReadView&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E8%AF%BB%E5%B7%B2%E6%8F%90%E4%BA%A4MVCC.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可重复读级别下 MVCC 的工作方式：仅在第一次执行快照读的时候生成 &lt;code&gt;ReadView&lt;/code&gt;  ，从而保证事务内对于一条记录的查询是一致的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BBMVCC.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多次连续的快照读， &lt;code&gt;ReadView&lt;/code&gt;  会复用，没有幻读问题。但是两次连续的 &lt;code&gt;快照读&lt;/code&gt; 之间存在 &lt;code&gt;当前读&lt;/code&gt; 时， &lt;code&gt;ReadView&lt;/code&gt;  会重新生成，导致产生幻读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BBMVCC%E5%B9%BB%E8%AF%BB%E9%97%AE%E9%A2%98.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql主从同步原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql主从同步原理&#34;&gt;#&lt;/a&gt; MySQL 主从同步原理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;MySQL主从同步&lt;/code&gt; 主要涉及到三个线程，主节点 master 上的 &lt;code&gt;binlog dump thread&lt;/code&gt; ，从节点 slave 上的 &lt;code&gt;IO thread&lt;/code&gt;  和 &lt;code&gt;sql thread&lt;/code&gt; . 主节点的 &lt;code&gt;binlog&lt;/code&gt;  维护的是主库记录的所以变更记录.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主节点的 &lt;code&gt;log dump&lt;/code&gt;  线程，当 &lt;code&gt;binlog&lt;/code&gt;  有变动时， &lt;code&gt;log dump&lt;/code&gt;  会读取 &lt;code&gt;binlog&lt;/code&gt;  日志变动的内容并发送到从节点&lt;/li&gt;
&lt;li&gt;从节点的 &lt;code&gt;IO thread&lt;/code&gt;  接收到 &lt;code&gt;binlog&lt;/code&gt;  内容 ，并将其写入 &lt;code&gt;relay log&lt;/code&gt;  文件中.&lt;/li&gt;
&lt;li&gt;从节点的 &lt;code&gt;sql thread&lt;/code&gt;  读取 &lt;code&gt;realy log&lt;/code&gt;  新增的内容并执行，最终保持主从数据库的一致性.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注：主节点使用 &lt;code&gt;binlog&lt;/code&gt;  文件和 &lt;code&gt;position&lt;/code&gt;  偏移量来定位主动同步的位置（增量同步）&lt;/p&gt;
&lt;p&gt;由于 MySQL 的默认的主从同步方式是异步 的，主节点把日志发送给从节点后不关系从库是否已经处理，这样会产生一个问题：主节点挂了，从节点处理失败了，那么这时从节点升级为主节点后，就会有一部分日志丢失了，有一下解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全同步复制：主节点写入 &lt;code&gt;binlog&lt;/code&gt;  并将数据同步到从节点时，需要等待所以的从节点执行完成之后，在将结果返回给客户端. (影响效率)&lt;/li&gt;
&lt;li&gt;半同步复制：主节点写入 &lt;code&gt;binlog&lt;/code&gt;  并将数据同步到从节点时，不需要等待所以的从节点执行完成，当收到至少一个从节点的同步完成就将结果返回给客户端.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;## 慢查询如何优化
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;检查是否建了索引，查询是否走了索引&lt;/li&gt;
&lt;li&gt;检查是否 &lt;code&gt;load&lt;/code&gt;  了多余的数据列&lt;/li&gt;
&lt;li&gt;返回的数据量太多&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql-ngram全文检索&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-ngram全文检索&#34;&gt;#&lt;/a&gt;  &lt;code&gt;MySQL Ngram&lt;/code&gt;  全文检索&lt;/h2&gt;
&lt;h2 id=&#34;跳表与b树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跳表与b树&#34;&gt;#&lt;/a&gt; 跳表与 B + 树&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;跳表：将部分链表节点提取出来，再构建出一个新的链表，一直递归的做上述的过程，形成的新的数据结构就是跳表。每次在进行查询操作的时候，先查询上层的链表，看落在那个范围，在递归去下层链表搜索. （跳表一条数据一个节点）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;跳表的写入性能比 B + 树好：B + 树在进行插入数据的时候，由于 B + 树的一个多叉的平衡树，可能会导致拆分合并索引数据页。跳表则是独立插入，并根据随机函数确定是否在上层中增加节点。没有旋转维持平衡的开销&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="面试题" />
        <category term="MySQL" />
        <updated>2024-03-13T06:46:17.113Z</updated>
    </entry>
    <entry>
        <id>http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98</id>
        <title>操作系统面试题</title>
        <link rel="alternate" href="http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98"/>
        <content type="html">&lt;h1 id=&#34;操作系统面试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作系统面试题&#34;&gt;#&lt;/a&gt; 操作系统面试题&lt;/h1&gt;
&lt;h2 id=&#34;什么的操作系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么的操作系统&#34;&gt;#&lt;/a&gt; 什么的操作系统&lt;/h2&gt;
&lt;p&gt;操作系统是负责管理协调计算机硬件和软件资源的一种系统软件。其屏蔽了底层硬件的异构性和复杂性，为上层应用程序提供统一易用的接口.&lt;/p&gt;
&lt;h2 id=&#34;主机启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主机启动&#34;&gt;#&lt;/a&gt; 主机启动&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;BIOS&lt;/code&gt; ：I/O 处理系统，开机时可以自动检测各种外设&lt;br /&gt;
 &lt;code&gt;Bootloader&lt;/code&gt; ：加载 OS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;中断和异常的处理过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中断和异常的处理过程&#34;&gt;#&lt;/a&gt; 中断和异常的处理过程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;外中断是指由 CPU 执行指令以外的时间引起的，如 IO 完成中断、时钟中断、控制台中断；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内中断（异常）是由 CPU 执行指令内部事件引起的，如地址越界、除 0、算术溢出等.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;硬件&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;设置中断标记&lt;/li&gt;
&lt;li&gt;操作系统根据这个标记（中断号）去找到对应的处理程序&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;保存现场：把当前执行程序的相关数据保存在寄存器中，然后入栈&lt;/li&gt;
&lt;li&gt;开中断：以便于响应优先级更高的中断请求&lt;/li&gt;
&lt;li&gt;中断服务程序处理&lt;/li&gt;
&lt;li&gt;关中断：保证恢复现场时不被中断&lt;/li&gt;
&lt;li&gt;恢复现场&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统调用&#34;&gt;#&lt;/a&gt; 系统调用&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;应用程序需要操作系统提供服务，而这些服务不能由应用程序直接执行。需要操作系统提供接 --- 系统调用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;用户态&lt;/code&gt; 转化到 &lt;code&gt;内核态&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;操作系统功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作系统功能&#34;&gt;#&lt;/a&gt; 操作系统功能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;进程管理&lt;/li&gt;
&lt;li&gt;内存管理：负责管理内存的分配、回收。在进程创建时分配内存以及在进程结束时回收内存，协调内存资源&lt;/li&gt;
&lt;li&gt;设备管理&lt;/li&gt;
&lt;li&gt;文件管理&lt;/li&gt;
&lt;li&gt;提供用户接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cpu内部结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu内部结构&#34;&gt;#&lt;/a&gt; CPU 内部结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;计算逻辑单元 ALU&lt;/li&gt;
&lt;li&gt;寄存器&lt;/li&gt;
&lt;li&gt;控制器&lt;/li&gt;
&lt;li&gt;缓存&lt;/li&gt;
&lt;li&gt;内存管理单元 MMU&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#寄存器&#34;&gt;#&lt;/a&gt; 寄存器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;程序计数器 &lt;code&gt;(prgram counter, PC)&lt;/code&gt; ：用于存放下一条运行指令的地址.&lt;/li&gt;
&lt;li&gt;指令寄存器 &lt;code&gt;(Instraution Register, IR)&lt;/code&gt; ：用于存放当前正在执行的指令.&lt;/li&gt;
&lt;li&gt;程序状态字 &lt;code&gt;(Program Status Word, PSW)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;累加寄存器 &lt;code&gt;(Accumulator Register, AX)&lt;/code&gt; ：&lt;/li&gt;
&lt;li&gt;基地寄存器 &lt;code&gt;(Base Register, BX)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;变址寄存器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程与线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程与线程&#34;&gt;#&lt;/a&gt; 进程与线程&lt;/h2&gt;
&lt;p&gt;进程是程序执行的一个过程，其实资源分配的基本单位，各个进程拥有自己独立的虚拟地址空间，执行互不干扰；同时父进程创建出的自进程之间也互不影响，子进程的崩溃或父进程的崩溃对互相并不影响。进程主要由程序段、数据段和程序控制块组成.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;程序段：程序运行的代码&lt;/li&gt;
&lt;li&gt;数据段：程序运行所产生的数据（全局变量、局部变量）&lt;/li&gt;
&lt;li&gt;程序控制块：操作系统对该进程进行管理所涉及到的各种信息
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PID&lt;/code&gt; ：进程标识符&lt;/li&gt;
&lt;li&gt;进程状态&lt;/li&gt;
&lt;li&gt;进程优先级&lt;/li&gt;
&lt;li&gt;程序计数器 PC&lt;/li&gt;
&lt;li&gt;内存指针&lt;/li&gt;
&lt;li&gt;上下文数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;code&gt;Linux&lt;/code&gt;  中通过 &lt;code&gt;fork&lt;/code&gt;  函数来创建一个子进程，子进程会拷贝父进程的；&lt;/p&gt;
&lt;p&gt;同一个进程共享堆、全局变量、静态变量，但是线程独占栈、程序计数器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;线程是进程内部的一个控制序列，其是 &lt;code&gt;CPU&lt;/code&gt;  资源调度的基本单位，其是在进程内部运行，本质是在进程的地址空间运行，其可以和其他线程共享该进程的一些资源，比如全局变量、堆空间。但是每个线程也有自己独立的线程 ID，栈空间和程序计数器.&lt;/p&gt;
&lt;h2 id=&#34;多线程与多进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多线程与多进程&#34;&gt;#&lt;/a&gt; 多线程与多进程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;多进程的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各个进程拥有自己独立的虚拟地址空间，各个程序之间的执行互不干扰，而且子进程的崩溃不会影响父进程，反之父进程崩溃也不会影响子进程&lt;/li&gt;
&lt;li&gt;多个进程可以充分利用 CPU，并行执行程序，不用担心并行执行程序导致的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多线程的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于进程的独立性，不同进程之间数据交换需要进程通信&lt;/li&gt;
&lt;li&gt;创建一个子进程的开销比创建一个子线程的开销大&lt;/li&gt;
&lt;li&gt;线程的切换比进程的切换系统开销会更大【切换页表、切换内核栈和硬件上下文（进程切换之后，新程序的虚拟地址在 TLB 内失效，会导致频繁的访存）】&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多线程的优点：&lt;/p&gt;
&lt;p&gt;多线程的缺点：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;进程调度算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程调度算法&#34;&gt;#&lt;/a&gt; 进程调度算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;先来先服务 &lt;code&gt;FCFS(First Come First Serverd)&lt;/code&gt; ：按照请求的顺序进行调度（不利于短作业，不会导致饿死）&lt;/li&gt;
&lt;li&gt;短作业优先 &lt;code&gt;SJF(Shortest Job First)&lt;/code&gt; ：按估计运行时间最短的顺序进行调度（不利于长作业，会导致饿死）&lt;/li&gt;
&lt;li&gt;最短剩余时间有优先&lt;/li&gt;
&lt;li&gt;时间片轮转&lt;/li&gt;
&lt;li&gt;优先级调度&lt;/li&gt;
&lt;li&gt;多级反馈队列：在一定程度上减少了频繁的进程切换的开销.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程状态切换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程状态切换&#34;&gt;#&lt;/a&gt; 进程状态切换&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81.jpg&#34; alt=&#34;&#34; title=&#34;进程状态切换&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;进程间通信ipc方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程间通信ipc方式&#34;&gt;#&lt;/a&gt; 进程间通信 IPC 方式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;两个或多个进程之间产生的数据交互&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;管道：半双工通信，数据只能单向流动.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在内核中开辟一块缓冲区，进程 A 把数据从用户区拷贝到内核缓冲区，进程 B 再从内核缓冲区把数据读走.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;匿名管道：具有情缘关系的进程之间的通信方式（具有同一个祖先）&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;unistd.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; pipefd&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/*&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  1. pipefd [0]: 读端 read (管道空时堵塞)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  2. pipefd [1]: 写端 write (管道满时堵塞)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;*/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有名管道：不相干的两个进程之间的通信方式&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;sys/types.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;sys/stat.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mkfifo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; mode_t mode&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/*&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    path: 创建的命名管道的全路径名：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mod: 为指定了文件的读写权限； &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;*/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;共享内存 &lt;code&gt;(Shared Memory Segment)&lt;/code&gt; ：由一个进程创建，多个进程都可以访问的一段内存空间。通过 &lt;code&gt;shmat&lt;/code&gt;  可以将共享内存空间关联到指定的进程地址空间中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息队列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Socket&lt;/code&gt;  套接字：适用于不同主机之间的通信，也可以用于同一主机两个进程之间的通信&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信号 &lt;code&gt;Signal&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信号量&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程同步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程同步&#34;&gt;#&lt;/a&gt; 进程同步&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;互斥锁 + 条件变量&lt;/li&gt;
&lt;li&gt;信号量&lt;/li&gt;
&lt;li&gt;管程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多线程模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多线程模型&#34;&gt;#&lt;/a&gt; 多线程模型&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;用户级线程&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;锁机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#锁机制&#34;&gt;#&lt;/a&gt; 锁机制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;读写锁&lt;/li&gt;
&lt;li&gt;互斥锁&lt;/li&gt;
&lt;li&gt;条件变量&lt;/li&gt;
&lt;li&gt;自旋锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;死锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁&#34;&gt;#&lt;/a&gt; 死锁&lt;/h2&gt;
&lt;p&gt;死锁是两个或两个以上的线程在执行的过程中，去争夺同一个共享资源锁导致的互相等待的一个现象，在没有外部干预的情况下，这些线程会一直处于堵塞状态，无法往下去执行.&lt;/p&gt;
&lt;p&gt;死锁产生的四个条件：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;互传条件&lt;/li&gt;
&lt;li&gt;请求与保持条件&lt;/li&gt;
&lt;li&gt;不剥夺条件&lt;/li&gt;
&lt;li&gt;循环等待条件&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;防止死锁的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防止死锁的方法&#34;&gt;#&lt;/a&gt; 防止死锁的方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在第一次执行的时候一次性申请所有的共享资源&lt;/li&gt;
&lt;li&gt;占用部分资源的进程在进一步去申请其他共享资源的时候，如果申请不到，就主动释放它所占有的资源&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;银行家算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#银行家算法&#34;&gt;#&lt;/a&gt; 银行家算法&lt;/h2&gt;
&lt;h2 id=&#34;连续内存分配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连续内存分配&#34;&gt;#&lt;/a&gt; 连续内存分配&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单一连续分配&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内存中只有一道用户程序用户独占整个用户区空间，无外部碎片，有内部碎片；可以使用覆盖技术进行逻辑扩容，不需要采用内存保护&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%8D%95%E4%B8%80%E8%BF%9E%E7%BB%AD%E5%88%86%E9%85%8D.png&#34; alt=&#34;&#34; title=&#34;单一连续分配&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;固定分区分配（无外部碎片，会产生内部碎片）&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;分区大小相等（固定）：缺乏灵活性&lt;/li&gt;
&lt;li&gt;分区大小不等（固定）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%9B%BA%E5%AE%9A%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D.png&#34; alt=&#34;&#34; title=&#34;固定分区分配&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态内存分配：不会预先划分内存空间&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;首次适应算法：每次都从地地址开始查找，找到第一个能满足大小的空闲分区&lt;/li&gt;
&lt;li&gt;最佳适应算法：选择尽可能小的内存分区分配给进程；空闲分区按照容量递增次序链接，每次分配内存时按顺序查找空闲分区链，找到第一个能满足要求的空闲分区&lt;/li&gt;
&lt;li&gt;最坏适应算法：每次分配时使用最大的空闲内存区，为了过多的内存碎片；空闲分区安容量递减的次序链接，每次分配内存时按顺序查找空闲分区链，找到第一个能过满足要求的空闲分区&lt;/li&gt;
&lt;li&gt;邻近适应算法： &lt;code&gt;首次适应算法&lt;/code&gt; 每次都要从链表头开始查找，这可能会导致低地址部分出现很多小的空闲分区，每次查找时需要进过这些分区，增加了查找开销。如果每次都从上次查找结束的位置开始检索，就能解决这个问题.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;空闲内存的管理方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空闲内存的管理方式&#34;&gt;#&lt;/a&gt; 空闲内存的管理方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;空闲链表&lt;/li&gt;
&lt;li&gt;位图：将内存划分为均等的分配单元，每个分配单元对应于位图中的一位，0 表示空闲，1 表示占用；分配单元的大小是一个值得考量的问题，分配单元太小会使得位图占用的空间过大，如果分配单元过大，内造成内部碎片。当需要分配一定大小空间的内存时，需要遍历真个位图，依次检查，时间复杂度较高.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;内存紧缩与交换式碎片整理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存紧缩与交换式碎片整理&#34;&gt;#&lt;/a&gt; 内存紧缩与交换式碎片整理&lt;/h2&gt;
&lt;h2 id=&#34;非连续内存分配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非连续内存分配&#34;&gt;#&lt;/a&gt; 非连续内存分配&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;连续内存空间分配，需要给程序分配连续空间，同时会产生外部碎片，内存利用率不高&lt;/li&gt;
&lt;li&gt;非连续内存分配优点：
&lt;ul&gt;
&lt;li&gt;程序的物理地址空间是非连续的，更好的利用内存空间&lt;/li&gt;
&lt;li&gt;允许共享代码与数据&lt;/li&gt;
&lt;li&gt;支持动态加载和动态链接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非连续内存分配缺点：建立虚拟地址空间到物理地址空间的转换&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分段&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;分段的寻址方式&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%88%86%E6%AE%B5%E9%80%89%E5%9D%80%E6%96%B9%E5%BC%8F.png&#34; alt=&#34;&#34; title=&#34;分段的寻址方式&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分页&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;逻辑页 &lt;code&gt;page&lt;/code&gt;  和物理页 &lt;code&gt;frame(帧)&lt;/code&gt;  的大小一致&lt;/li&gt;
&lt;li&gt;不是所有的页都有对应的帧&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%88%86%E9%A1%B5%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F.png&#34; alt=&#34;&#34; title=&#34;分页寻址方式&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分段与分页的区别&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;分页对程序员是透明的，但是分段需要程序员显示的划分每个段&lt;/li&gt;
&lt;li&gt;页的大小不可改变，段的大小可动态变化&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;页表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页表&#34;&gt;#&lt;/a&gt; 页表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;标志位&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;访问位：表示当前页之前是否被访问过&lt;/li&gt;
&lt;li&gt;修改位：表示当前页之前是否被修改过&lt;/li&gt;
&lt;li&gt;保护位：表示是否允许对该页做任何类型的操作（读、写、可执行等)&lt;/li&gt;
&lt;li&gt;驻留位：表示该页是在 &lt;code&gt;内存&lt;/code&gt; 中还是在 &lt;code&gt;外存&lt;/code&gt; 中&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;帧号&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%84.png&#34; alt=&#34;&#34; title=&#34;页表结构&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;由于逻辑空间很大，导致程序对应的页表会很大，无法存储在 CPU 内，所以页表一般放置在内存中，如没有任何其他优化机制，使用分页存储访问一个内存空间需要 2 次访存.&lt;/li&gt;
&lt;li&gt;时间优化：TLB&lt;/li&gt;
&lt;li&gt;空间优化：多级页表、反向页表&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tlb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tlb&#34;&gt;#&lt;/a&gt; TLB&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;TLB(Translation Look-aside Buffer)&lt;/code&gt; ：在 CPU 内的 MMU 中，用于缓存近期访问的页帧转换表项；使用相关存储器实现，时间局部性原理；若 TLB 命中则只需要一次访存，若 TLB missing，则需要两次访存.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/TLB.png&#34; alt=&#34;&#34; title=&#34;TLB&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;多级页表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多级页表&#34;&gt;#&lt;/a&gt; 多级页表&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%A4%9A%E7%BA%A7%E9%A1%B5%E8%A1%A8.png&#34; alt=&#34;&#34; title=&#34;多级页表&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;反向页表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反向页表&#34;&gt;#&lt;/a&gt; 反向页表&lt;/h2&gt;
&lt;h2 id=&#34;分段与分页对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分段与分页对比&#34;&gt;#&lt;/a&gt; 分段与分页对比&lt;/h2&gt;
&lt;h2 id=&#34;覆盖技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#覆盖技术&#34;&gt;#&lt;/a&gt; 覆盖技术&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;需要程序员自己把挣个程序划分为若干个小的功能模块，并确定各个模块之间的覆盖关系，增加程序员的负担&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;交换技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交换技术&#34;&gt;#&lt;/a&gt; 交换技术&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;以程序作为交换单位，需要把进程的整个地址空间都换进换出，增加了处理器的开销&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;虚拟技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟技术&#34;&gt;#&lt;/a&gt; 虚拟技术&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;虚拟技术是把一个物理实体转化为多个逻辑实体&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;时空复用技术&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多进程与多线程：多个进程能在同一个处理器上并发执行使用了时空复用技术，当每个进程轮流占用 CPU&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空分复用技术&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虚拟内存：将物理内存抽象为逻辑地址空间，每个进程都有各自的地址空间.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;虚拟内存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟内存&#34;&gt;#&lt;/a&gt; 虚拟内存&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;将物理空间扩充为更大的逻辑空间&lt;/li&gt;
&lt;li&gt;在装入程序时，不必将其全部装入内存，而只需将当前需要执行的部分页面或段装入内存，就可以让程序开始执行&lt;/li&gt;
&lt;li&gt;在程序执行过程中，如果执行的指令或访问的数据不在内存中（ &lt;code&gt;缺页&lt;/code&gt; 或 &lt;code&gt;缺段&lt;/code&gt; ），则由处理器通知操作系统将相应的页面或段调入内存，然后继续执行程序&lt;/li&gt;
&lt;li&gt;另一方面，操作系统将内存中暂时不适用的页面或段调出保存到磁盘中，从而腾出更多的空闲空间存放将要装入的程序&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;缺页中断处理过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺页中断处理过程&#34;&gt;#&lt;/a&gt; 缺页中断处理过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;页面置换算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页面置换算法&#34;&gt;#&lt;/a&gt; 页面置换算法&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;当缺页中断发生时，需要调入新的页面而内存已满时，选择内存当中那个物理页面进行替换（更可能减少换入换出的次数）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;最优页面置换算法：将未来最久不会被访问的页面置换出去（理想情况）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先进先出算法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最近最久未使用 &lt;code&gt;LRU,Least Recently Used&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;时钟页面置换算法 &lt;code&gt;CLOCK&lt;/code&gt; ：最近未用算法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二次机会法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最不常用算法 &lt;code&gt;LFU,Least Frequently Used&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Belady&lt;/code&gt;  现象：分配的物理页面数增加，缺页率反而提高的异常现象（没有考虑进程访问的动态特征导致的， &lt;code&gt;FIFO&lt;/code&gt; ）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;虚拟地址转换位物理地址的过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟地址转换位物理地址的过程&#34;&gt;#&lt;/a&gt; 虚拟地址转换位物理地址的过程&lt;/h2&gt;
&lt;h2 id=&#34;malloc申请内存时操作系统会怎么做&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#malloc申请内存时操作系统会怎么做&#34;&gt;#&lt;/a&gt;  &lt;code&gt;malloc&lt;/code&gt;  申请内存时操作系统会怎么做？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;malloc&lt;/code&gt;  会调用 &lt;code&gt;brk&lt;/code&gt;  和 &lt;code&gt;mmap&lt;/code&gt;  两个系统调用来实现.&lt;/p&gt;
&lt;h2 id=&#34;磁盘调度算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘调度算法&#34;&gt;#&lt;/a&gt; 磁盘调度算法&lt;/h2&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考资料&#34;&gt;#&lt;/a&gt; 参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVlFNDExRDduSC8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT0zZmNhYTQ5NjM0NDM1MzcyM2ExZWMwZWEzZDAxMDQxZQ==&#34;&gt;王道计算机考研 操作系统_哔哩哔哩_bilibili&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXVXNDExZjcybi8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2s=&#34;&gt;清华 操作系统原理_哔哩哔哩_bilibili&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;[3] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zODA4NzI5MjA=&#34;&gt;操作系统常见面试题&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;[4] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xODE1OTY1&#34;&gt;这 50 道操作系统面试题，真牛批！&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="面试题" />
        <category term="操作系统" />
        <updated>2024-03-13T01:21:27.470Z</updated>
    </entry>
    <entry>
        <id>http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/C++%E9%9D%A2%E8%AF%95%E9%A2%98</id>
        <title>C++面试题</title>
        <link rel="alternate" href="http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/C++%E9%9D%A2%E8%AF%95%E9%A2%98"/>
        <content type="html">&lt;h1 id=&#34;c面试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c面试题&#34;&gt;#&lt;/a&gt; C++ 面试题&lt;/h1&gt;
&lt;h2 id=&#34;程序编译过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序编译过程&#34;&gt;#&lt;/a&gt; 程序编译过程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;预处理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;完成宏定义 &lt;code&gt;#define&lt;/code&gt;  内容替换&lt;/li&gt;
&lt;li&gt;处理所有的条件预编译指令，如 &lt;code&gt;#if #endif&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把 &lt;code&gt;#include&lt;/code&gt;  文件内容复制到 &lt;code&gt;.cpp&lt;/code&gt;  文件中（递归执行）&lt;/li&gt;
&lt;li&gt;删除所有注释&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译：转化为汇编代码，主要工作是检查一些语法规则，代码优化（寻找合适的寻址方式，使用位运算来替代乘法运算，删除多余的指令）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;汇编：将汇编代码转化为二进制格式的文件（机器码）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链接：将多个目标文件以及库文件链接成最终的可执行文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;静态链接：在链接阶段将库文件的函数和数据合并到应用程序中，组成一个最终的可执行文件.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;运行速度快：可执行程序中具备运行阶段所需要的所以东西&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空间浪费：可执行程序中有所以目标文件的副本。当多个程序对同一个目标文件有依赖关系时，那么这个目标文件在内存中会有多个副本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当其中一个库文件需要修改，整个程序需要重新编译&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态链接：在程序运行阶段才把多个目标文件链接成一个完整的程序.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;运行效率会有所损耗&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;节省空间：共享库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新方便：只需要重新编译修改的目标文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cc内存空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cc内存空间&#34;&gt;#&lt;/a&gt; C/C++ 内存空间&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4C.jpg&#34; alt=&#34;&#34; width=&#34;200px&#34; /&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4.png&#34; alt=&#34;&#34; width=&#34;200px&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栈：用于存储局部变量，由编译器自动管理分配与释放，效率很高，但是内存有限&lt;/li&gt;
&lt;li&gt;堆：动态内存空间，由应用程序去控制。如若程序结束没有释放，则会由操作系统自动回收.&lt;/li&gt;
&lt;li&gt;代码区：存放函数体二进制代码&lt;/li&gt;
&lt;li&gt;全局 / 静态存储区：用于存储全局变量和静态变量。在以前 C 语言中，这部分分为初始化的 &lt;code&gt;.data&lt;/code&gt;  和未初始化 &lt;code&gt;.bss&lt;/code&gt; . 现在 C++ 中则没有这样的划分，区域内的变量会被默认初始化为 0.&lt;/li&gt;
&lt;li&gt;常量存储区：用于存储常量，不允许修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;堆与栈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#堆与栈&#34;&gt;#&lt;/a&gt; 堆与栈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;栈内存是由编译器自动管理的，堆可由程序员控制，对于开辟的内存需要主动释放，否则容易产生内存泄漏&lt;/li&gt;
&lt;li&gt;栈的内存增长方向是向着地址空间减小的方向，堆内存的增长方向是朝着地址空间增大的方向.&lt;/li&gt;
&lt;li&gt;栈分配的内存都是连续空间，同时是一个先进后出的数据结构，其不存在内存碎片的问题。堆所分配的内存空间不一定连续，会存在内存碎片的问题&lt;/li&gt;
&lt;li&gt;栈的分配效率要高于堆的分配效率。操作系统内有专门的寄存器用于存储栈的地址和栈顶指针地址。堆的内存分配是调用 C/C++ 的库函数，分配空间时还需要按照不同的算法去搜索足够大的空间进行分配。同时由于内存碎片问题，操作系统会进行内存紧缩的操作，需要额外的系统开销.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;函数调用的过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数调用的过程&#34;&gt;#&lt;/a&gt; 函数调用的过程&lt;/h2&gt;
&lt;h2 id=&#34;计算机内部数据的存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机内部数据的存储&#34;&gt;#&lt;/a&gt; 计算机内部数据的存储&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;整数：通过补码的形式进行存储（整数的补码是本省，负数的补码是取反 + 1）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;float&lt;/code&gt;  的存储，遵循 &lt;code&gt;IEEE&lt;/code&gt;  规范，占用 32 位（4 字节）.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;符号位（1bit）&lt;/li&gt;
&lt;li&gt;指数位（8bit）&lt;/li&gt;
&lt;li&gt;尾数部分（23bit）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/float%E7%9A%84%E5%AD%98%E5%82%A8.webp&#34; alt=&#34;&#34; title=&#34;float的存储&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;double&lt;/code&gt;  的存储，遵循 &lt;code&gt;IEEE&lt;/code&gt;  规范，占用 64 位（8 字节）.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;符号位（1bit）&lt;/li&gt;
&lt;li&gt;指数位（11bit）&lt;/li&gt;
&lt;li&gt;尾数部分（52bit）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/double%E7%9A%84%E5%AD%98%E5%82%A8.jpg&#34; alt=&#34;&#34; title=&#34;double的存储&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;static&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#static&#34;&gt;#&lt;/a&gt; static&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;  修饰局部变量：改变变量的存储位置（由栈区转移到静态存储区），延长了变量的生命周期； &lt;code&gt;static&lt;/code&gt;  局部变量只在当前的作用域内有效，在作用外无法访问.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;  修饰全局变量：只能在当前源文件内有效，在其他源文件内无法访问. （无 &lt;code&gt;static&lt;/code&gt;  修饰的全局变量可以在其他源文件中使用 extern 申明其他源文件中的全局变量，即可在当前源文件中使用）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;  修饰函数：和 &lt;code&gt;static&lt;/code&gt;  用于修饰全局变量具有一样的特性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;  修饰成员变量：静态成员变量，为类所以，可供所以对象共享，不占用实例的存储空间，同时其初始化必须定义外类外部&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;  修饰成员函数：静态成员函数，没有隐藏的 &lt;code&gt;this&lt;/code&gt;  指针，因此函数体内不能访问该类的非静态成员变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;  修饰的变量默认初始化为 0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;const&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#const&#34;&gt;#&lt;/a&gt; const&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;  修饰的变量值不可变修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;  成员变量：不能在类外初始化，只能通过构造函数初始化列表进行初始化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;  修饰的函数为常函数，不能改变类的成员变量（可以修改被 &lt;code&gt;mutable&lt;/code&gt;  修饰的变量）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;  对象不能调用非 &lt;code&gt;const&lt;/code&gt;  成员函数（防止类的非常函数对 &lt;code&gt;const&lt;/code&gt;  对象的成员变量进行修改）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mutable&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mutable&#34;&gt;#&lt;/a&gt; mutable&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;mutable&lt;/code&gt;  与 &lt;code&gt;const&lt;/code&gt;  是相对的，表示一个变量的易变的；被 &lt;code&gt;mutable&lt;/code&gt;  修饰是成员变量可以再 &lt;code&gt;const&lt;/code&gt;  修饰的函数内被修改（也可以被常对象进行直接修改）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;explicit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#explicit&#34;&gt;#&lt;/a&gt; explicit&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;用于修饰类的构造函数，防止其他对象隐式的转化为该类对象，只能显示的进行类型转化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;volatile&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#volatile&#34;&gt;#&lt;/a&gt; volatile&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用于修饰变量，表示其值随时可能发送变化，编译器不会对访问该变量的代码进行优化，可以保证访问变量的稳定（从内存中读取）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volatile&lt;/code&gt;  指针&lt;/li&gt;
&lt;li&gt;多线程下的 &lt;code&gt;volatile&lt;/code&gt; ：当多个线程都需要用到某一个变量时，应该用 &lt;code&gt;volatile&lt;/code&gt; ，防止编译器把变量从内存装入 CPU 寄存器中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c三大特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c三大特性&#34;&gt;#&lt;/a&gt; C++ 三大特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;封装、继承、多态（封装和继承可以实现 &lt;code&gt;代码的重用&lt;/code&gt; ，多态可以实现 &lt;code&gt;接口的重用&lt;/code&gt; ）
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;封装：将数据和实现过程包裹起来，隐藏代码的实现细节，通过定义的接口来访问数据成员，使代码模块化. (直接体现面向对象，代码重用，权限控制)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt; ：公有权限，类内可以访问，类外也可以访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt; ：保护权限，类内可以访问，类外不可以访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt; ：私有权限，类内可以访问，类外不可以访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继承：无需重新编写代码而可以直接使用现有类的所以功能，同时可以对现有类进行功能上的扩展，是一个从一般到特殊的过程.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;权限继承：表示基类在子类中的最高权限（破坏继承： &lt;code&gt;friend&lt;/code&gt; ，  &lt;code&gt;using&lt;/code&gt; ）&lt;/li&gt;
&lt;li&gt;多继承：通过多继承可以得到更多类的数据和方法，实现更大程度的代码复用，当然也存在一些问题，如菱形继承.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多态：通过父类指针指向多个派生的子类对象时，调用父类的一个接口，可以实现多种不同的行为即为多态.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;被 &lt;code&gt;virtual&lt;/code&gt;  修饰的成员函数即为虚函数，如基类的虚函数为空即为纯虚函数，这个类即可为抽象类，不能被实例化，否则就是一个虚类，可被实例化.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在编译阶段，虚类内会隐藏的存储一个虚函数表指针的成员变量，指向一张虚函数表，该类的所以对象共用这张虚函数表.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;派生类继承虚类时，其会复制一份父类的虚函数表，类内的虚函数指针指向这张新的虚函数表，如派生类重写了虚函数则会将对应的虚函数表对应的指针项做一个修改，如果派生类定义了新的虚函数，则会在新的虚函数表后追加新的函数与地址的映射. （如若派生类继承了多个父类，即多继承，那么这个派生类可能存储多个虚函数表指针）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚析构函数：基类中析构函数前使用 &lt;code&gt;virtual&lt;/code&gt;  修饰。当基类指针指向派生类对象时，使用基类指针去释放空间时，则会去先调用派生类的析构函数，再去调用基类的析构函数；若不加 &lt;code&gt;virtual&lt;/code&gt;  则不会触发动态绑定（多态），只会调用基类的析构函数，导致内存泄漏. (虽然虚构函数名不一样，其实也是一种重写，系统内部对析构函数做了特殊处理，将析构函数名称都改成了 &lt;code&gt;destructor&lt;/code&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚函数地址在运行时绑定（函数地址在运行阶段确定），使用了虚函数表的机制，所以在调用的时候会增加一次内存开销. （虚函数的缺点）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;协变：基类和派生类虚函数的返回值不同（基类返回基类对象的指针或引用，派生类返回派生类对象的指针或引用），其也是一种多态&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;virtual&lt;/span&gt; User &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;return user&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Manager&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token base-clause&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;virtual&lt;/span&gt; Manager &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;return manager&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Manager mg&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    User&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; ptr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;mg&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ptr&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;菱形继承&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#菱形继承&#34;&gt;#&lt;/a&gt; 菱形继承&lt;/h2&gt;
&lt;h2 id=&#34;为什么c默认析构函数不是虚函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么c默认析构函数不是虚函数&#34;&gt;#&lt;/a&gt; 为什么 C++ 默认析构函数不是虚函数&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;虚函数需要虚函数表和虚函数表指针，会占用内存空间。如果一个类没有子类，那么就没有必要讲析构函数设置为虚函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;重载-重写-重定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重载-重写-重定义&#34;&gt;#&lt;/a&gt; 重载、重写、重定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;重载：多个同名函数，他们的参数个数或者参数类型不同；（编译器根据函数不同的参数表，对同名函数的名称做修饰，然后这些同名函数就变成了不同的函数），也可以称之为静态多态，函数地址在编译器就已经确定了&lt;/li&gt;
&lt;li&gt;重定义：继承中的同名隐藏，当派生类中有一个函数与基类的函数名相同，不管参数是否相同，只要该函数不为虚函数，发生了重定义.&lt;/li&gt;
&lt;li&gt;重写：派生类中重写了基类的虚函数，其中函数名、参数列表和返回值都相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;final和override&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#final和override&#34;&gt;#&lt;/a&gt; final 和 override&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt; ：修饰虚函数，表示该虚函数不能再被重写。修饰类表示该类不能被继承&lt;/li&gt;
&lt;li&gt;&lt;code&gt;override&lt;/code&gt; ：检查派生类虚函数是否重写了基类的某个虚函数，如果没有则编译器报错；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;struct-与class&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#struct-与class&#34;&gt;#&lt;/a&gt; struct 与 class&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++ 中的 &lt;code&gt;struct&lt;/code&gt;  默认 &lt;code&gt;public&lt;/code&gt;  共有权限， &lt;code&gt;class&lt;/code&gt;  默认 &lt;code&gt;private&lt;/code&gt;  私有权限&lt;/li&gt;
&lt;li&gt;C 语言中的 &lt;code&gt;struct&lt;/code&gt;  只是一个变量的集合体，只可以用于封装数据，而不备面向对象的一些特性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;new-和-malloc的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#new-和-malloc的区别&#34;&gt;#&lt;/a&gt; new 和 malloc 的区别&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;new&lt;/code&gt;  和 &lt;code&gt;malloc&lt;/code&gt;  都是用于分配内存的，其中 &lt;code&gt;new&lt;/code&gt;  是 C++ 中的操作符，可以被重载， &lt;code&gt;malloc&lt;/code&gt;  是 C 语言中的库函数，不可以被重载&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参数不同；new 可以自动计算所分配的对象的内存大小，同时返回值为指向该对象的指针. malloc 则需要传入需要分配的内存的字节数，返回一个 &lt;code&gt;void *&lt;/code&gt;  指针&lt;/li&gt;
&lt;li&gt;new 分配失败会抛出异常 &lt;code&gt;bac_alloc&lt;/code&gt; ，malloc 分配失败会返回 &lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;new 分配的内存在 &lt;code&gt;free store&lt;/code&gt; （自由存储区）上，malloc 分配的内存在堆上（其中自由存储区是 C++ 中的一个抽象的概念，new 的底层调用的逻辑是先调用 &lt;code&gt;operator new&lt;/code&gt;  分配内存，由系统决定或者用户重载 &lt;code&gt;operator new&lt;/code&gt;  决定，其次是调用对象的构造函数，初始化成员变量）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;malloc&lt;/code&gt;  分配的内存是虚拟内存，而 &lt;code&gt;new&lt;/code&gt;  分配的内存是物理内存。因为 new 调用了对象的构造函数，对对象成员进行了初始化（发生了缺页中断，使得虚拟内存映射到了物理内存）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;delete-与-free&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#delete-与-free&#34;&gt;#&lt;/a&gt; delete 与 free&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;delete&lt;/code&gt;  和 &lt;code&gt;free&lt;/code&gt;  都是用于释放内存的，其中 &lt;code&gt;delete&lt;/code&gt;  是 C++ 中的操作符，可以被重载，free 是 C 语言中的库函数，不可以被重载&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参数不同；delete 需要给出释放的对象的类型指针，free 可以是 &lt;code&gt;void *&lt;/code&gt;  类型的指针（delete 底层调用的逻辑是先调用对象的析构函数，再调用 &lt;code&gt;operator delete&lt;/code&gt;  释放对象所占内存）（free 只需要提供 &lt;code&gt;void *&lt;/code&gt;  就可以释放申请的所以内存： &lt;code&gt;malloc&lt;/code&gt;  在分配内存时，不仅仅是分配了用户所需要的内存空间的大小，还会在该空间上部分配额外的一部分空间用于存储此次分配的内存的描述信息）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注意： &lt;code&gt;delete&lt;/code&gt;  和 &lt;code&gt;free&lt;/code&gt;  被调用后，指针也不会指向空，如果没有其他用途，需要把它设置为 &lt;code&gt;nullptr&lt;/code&gt; ，否则会出现野指针.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;free回收的内存是立即返回给操作系统吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#free回收的内存是立即返回给操作系统吗&#34;&gt;#&lt;/a&gt; free 回收的内存是立即返回给操作系统吗？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不是的。被 &lt;code&gt;free&lt;/code&gt;  回收的内存会被 &lt;code&gt;ptmalloc&lt;/code&gt;  使用双链表保存起来，当用户下一次申请内存空间的时候，会尝试先从这些内存中寻找合适的返回.&lt;/li&gt;
&lt;li&gt;可以避免频繁的系统调用，提高程序效率.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ptmalloc&lt;/code&gt;  也会尝试对小块进行合并，避免过多的内存碎片&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;C++11&lt;/strong&gt; is the second major version of C++ and the most important update since C&lt;ins&gt;98. A large number of changes were introduced to both standardize existing practices and improve the abstractions available to the C&lt;/ins&gt; programmers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;new与delete&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#new与delete&#34;&gt;#&lt;/a&gt; new [] 与 delete []&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new[]&lt;/code&gt;  会先调用 &lt;code&gt;operateor new[]&lt;/code&gt;  分配内存，然后再分配的内存的前几个字节写入数组的大小，然后进行 n 次构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;malloc与free实现原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#malloc与free实现原理&#34;&gt;#&lt;/a&gt; malloc 与 free 实现原理&lt;/h2&gt;
&lt;h2 id=&#34;c中的几种new&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c中的几种new&#34;&gt;#&lt;/a&gt; C++ 中的几种 new&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt; ： &lt;code&gt;plain new&lt;/code&gt; ，分配内存失败会抛出异常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nothrow new&lt;/code&gt; ：分配内存失败不抛出异常，而是返回 &lt;code&gt;nullptr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;placement new&lt;/code&gt; ：不会分配内存，在已有的内存空间上重新构造对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c强制类型转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c强制类型转换&#34;&gt;#&lt;/a&gt; C++ 强制类型转换&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;static_cast&amp;lt;T&amp;gt;()&lt;/code&gt; ：不进行类型检查，不安全&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;用于层次结构中基类与派生类间指针的转换&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;a. 上行转换（派生类指针转化为基类指针），安全&lt;/p&gt;
&lt;p&gt;b. 下行转化（基类指针转化为派生类指针），不安全&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;基本数据类型的转化&lt;/li&gt;
&lt;li&gt;将空指针转化为目标类型的指针&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dynamic_cast&lt;/code&gt; ：专门用于派生类与基类之间的类型转化，基类中必须有虚函数；会进行类型的检查，是一种安全类型转化（转换失败，指针为 &lt;code&gt;nullptr&lt;/code&gt; ）&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;运行时会进行类型的检查&lt;/li&gt;
&lt;li&gt;不能用于内置基本数据类型的转化&lt;/li&gt;
&lt;li&gt;如果转化成功的话会返回指向类的指针或引用，转换失败的话则会返回 &lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt; ：转化过程仅仅是简单的比特位拷贝，不安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;const_cast&amp;lt;T&amp;gt;()&lt;/code&gt; ：用于修改变量的 &lt;code&gt;const&lt;/code&gt;  或 &lt;code&gt;volatile&lt;/code&gt;  属性，变量类型与转换后的类型一致（只能修改底层 &lt;code&gt;const&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;指针与引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指针与引用&#34;&gt;#&lt;/a&gt; 指针与引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;存储的是一个地址；而引用只是变量的别名.&lt;/li&gt;
&lt;li&gt;指针可不进行初始化，也可以指向空，并且指向可以改变；引用必须初始化，且只可绑定一个变量。这也导致了在使用指针时，往往需要判空操作，而引用是一种安全的指针，一定不为空（引用的底层是通过指针来实现）.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sizeof&lt;/code&gt;  指针得到的是指针的大小， &lt;code&gt;sizeof&lt;/code&gt;  引用得到的是引用绑定对象的大小&lt;/li&gt;
&lt;li&gt;指针可以是多级的，引用只有一级&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常引用&#34;&gt;#&lt;/a&gt; 常引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;保护传递给函数的数据在函数内不背改变.  &lt;code&gt;const 类型&amp;amp; 引用名&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 C++ 中，临时对象都是 &lt;code&gt;const&lt;/code&gt;  类型的，const 类型的对象转换为非 const 类型是非法的.&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string &lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;string &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	    &lt;span class=&#34;token comment&#34;&gt;//  非法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello world&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 非法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;野指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#野指针&#34;&gt;#&lt;/a&gt; 野指针&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;野指针：指向已被释放的内存空间或者指向没有访问权限的内存空间&lt;/li&gt;
&lt;li&gt;指针未被初始化、内存释放后未将指针设置为 &lt;code&gt;nullptr&lt;/code&gt; 、指针超过了变量的作用范围（越界）都可能导致野指针的产生&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c中的顶层const与底层const&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c中的顶层const与底层const&#34;&gt;#&lt;/a&gt; C++ 中的顶层 const 与底层 const&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;顶层const&lt;/code&gt; ： &lt;code&gt;const&lt;/code&gt;  修饰的变量本身是一个常量，无法修改；（指的是指针，出现在 &lt;code&gt;*&lt;/code&gt;  的右边）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;底层const&lt;/code&gt; ： &lt;code&gt;const&lt;/code&gt;  修饰的变量所指向的对象是一个常量（出现在 &lt;code&gt;*&lt;/code&gt;  左边）&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 顶层 const&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; other b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;//other 类型为 int&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* --------------- */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;ptr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	          &lt;span class=&#34;token comment&#34;&gt;// 底层 const, 常量指针，表示指针所指向的内容无法通过该指针进行修改，但是可以改变指针的指向&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; other1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ptr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		          &lt;span class=&#34;token comment&#34;&gt;//other1 类型为 const int*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;other1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		              &lt;span class=&#34;token comment&#34;&gt;// error! &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;other1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;			    	 &lt;span class=&#34;token comment&#34;&gt;// right!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;decltype&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; other2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ptr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		  &lt;span class=&#34;token comment&#34;&gt;//other2 类型为 const int *&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;other2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		              &lt;span class=&#34;token comment&#34;&gt;// error! &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;other2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;			    	 &lt;span class=&#34;token comment&#34;&gt;// right!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* --------------- */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; ptr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	         &lt;span class=&#34;token comment&#34;&gt;// 顶层 const，指针常量，表示指针是一个常量，不可修改指针的指向，但是可以通过指针去修改所指向空间的内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; other1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ptr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		        &lt;span class=&#34;token comment&#34;&gt;//other1 类型为 int *&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;other1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		            &lt;span class=&#34;token comment&#34;&gt;// right!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;other1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		   		   &lt;span class=&#34;token comment&#34;&gt;// right!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;decltype&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; other2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ptr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		&lt;span class=&#34;token comment&#34;&gt;//other2 的类型为 int* const&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;other2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                   &lt;span class=&#34;token comment&#34;&gt;// right!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;other2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                    &lt;span class=&#34;token comment&#34;&gt;// error!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常量指针与指针常量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常量指针与指针常量&#34;&gt;#&lt;/a&gt; 常量指针与指针常量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;常量指针： &lt;code&gt;int const* p = a&lt;/code&gt; ，指针的指向可以改变，而不能通过该指针去改变所指向的内容&lt;/li&gt;
&lt;li&gt;指针常量： &lt;code&gt;int *const p = a&lt;/code&gt; ，指针的指向不可改变，可以通过指针去改变指向的内容.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数组指针与指针数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组指针与指针数组&#34;&gt;#&lt;/a&gt; 数组指针与指针数组&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数组指针： &lt;code&gt;int (*p)[n]&lt;/code&gt; ，指向一个整形的一维数组，这个数组的长度是 n，在执行 &lt;code&gt;p+1&lt;/code&gt;  操作时， &lt;code&gt;p&lt;/code&gt;  要跨越 n 个整形数据长度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针数组： &lt;code&gt;int *p[n]&lt;/code&gt; ， &lt;code&gt;[]&lt;/code&gt;  优先级高于 &lt;code&gt;*&lt;/code&gt; ，是一个具有 n 个指针类型的数组.&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//a 理解成一个一维数组，元素为 a [0], a [1], a [2]， 其中 a [0] 的类型为 (int *), a 与 &amp; amp;a [0] 等价，类型为 int (*p)[4]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;函数指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数指针&#34;&gt;#&lt;/a&gt; 函数指针&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;函数指针的类型是由其返回类型和参数列表共同决定的&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;pf&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;//pf 为一个函数指针&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 区别于 int *pf (const int&amp;amp;, const int&amp;amp;);	pf 为一个函数声明，函数返回值为 int&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数指针的赋值&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;指针名=函数名&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;指针名=&amp;amp;函数名&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;宏定义与typedef&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#宏定义与typedef&#34;&gt;#&lt;/a&gt; 宏定义与 typedef&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;宏定义主要用于定义常量或者一些书写复杂的内容， &lt;code&gt;typedef&lt;/code&gt;  主要用于定义类型的别名&lt;/li&gt;
&lt;li&gt;宏定义在预处理阶段完成，只会进行文本的替换，不进行类型的检查； &lt;code&gt;typedef&lt;/code&gt;  在编译阶段完成，会进行类型的检查&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;const与define&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#const与define&#34;&gt;#&lt;/a&gt; const 与 define&lt;/h2&gt;
&lt;h2 id=&#34;inline内联函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#inline内联函数&#34;&gt;#&lt;/a&gt; inline 内联函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;把 inline 函数体复制到函数调用处（避免了函数调用所需要的压栈和出栈操作，提高了程序运行效率）&lt;/li&gt;
&lt;li&gt;特性类似于宏定义，但 inline 会做类型的检查&lt;/li&gt;
&lt;li&gt;不能包含循环、递归复杂操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;  函数有多个返回点，会使用 &lt;code&gt;goto&lt;/code&gt;  跳转&lt;/li&gt;
&lt;li&gt;在类中定义的成员函数，除了虚函数，往往会自动转化为内联函数&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ol&gt;
&lt;li&gt;代码膨胀，占用代码区的内存空间&lt;/li&gt;
&lt;li&gt;是否内敛由编译器决定，不可控.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;this指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#this指针&#34;&gt;#&lt;/a&gt; this 指针&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;this 是一个隐含于每一个非静态成员函数中的特殊指针，指向被实例化的对象。当调用对象成员函数时，会将对象的地址赋值给 &lt;code&gt;this&lt;/code&gt;  指针，并会隐式的将 &lt;code&gt;this&lt;/code&gt;  指针传入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tihs&lt;/code&gt;  为一个右值，并由 &lt;code&gt;const&lt;/code&gt;  修饰&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;初始化列表c11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始化列表c11&#34;&gt;#&lt;/a&gt; 初始化列表（C++11）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通过花括号来进行初始化。直接在变量名后面跟上初始化列表来进行对象的初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;类成员函数初始化方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类成员函数初始化方法&#34;&gt;#&lt;/a&gt; 类成员函数初始化方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;赋值初始化&lt;/code&gt; ：在函数体内进行赋值. (其是在所有成员被分配内存之后才进行的，此时会触发成员函数的默认构造函数，同时进入函数体赋值往往会产生临时对象，和拷贝赋值函数)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;列表初始化&lt;/code&gt; ：在冒号后使用初始化列表进行初始化.（给数据成员分配内存时进行的，在函数体执行之前）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于基本数据类型而言，两种在速度方面没有太大的差别，但对于复杂一些的数据类型，列表初始化速度会快于赋值初始化&lt;/p&gt;
&lt;p&gt;什么情况下必须用初始化列表？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化一个引用成员变量时&lt;/li&gt;
&lt;li&gt;初始化一个常量成员时&lt;/li&gt;
&lt;li&gt;当父类没有默认构造函数的时&lt;/li&gt;
&lt;li&gt;当成员变量没有默认构造函数时&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;autoc11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autoc11&#34;&gt;#&lt;/a&gt;  &lt;code&gt;auto（C++11）&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;auto&lt;/code&gt;  可以自动推导变量类型；使用 &lt;code&gt;auto&lt;/code&gt;  声明的变量必须要进行初始化，以让编译器推导出它的实际类型，在编译阶段将 &lt;code&gt;auto&lt;/code&gt;  占位符替换成其真正的类型.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于有 &lt;code&gt;const&lt;/code&gt;  和 &lt;code&gt;volatile&lt;/code&gt;  修饰的变量， &lt;code&gt;auto&lt;/code&gt;  只能推断底层 &lt;code&gt;const&lt;/code&gt;  或 &lt;code&gt;volatile&lt;/code&gt; ，顶层 &lt;code&gt;const&lt;/code&gt;  或 &lt;code&gt;volatile&lt;/code&gt;  会被忽略，需要自己添加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不能在函数的参数中使用，不能用于定义数组，不能用于类的非静态成员的初始化（只能用于类的静态常量成员变量的初始化）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不能用于模版参数的类型推导&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;类的成员变量并不属于类，而属于具体的实例。如果没有创建实例，那么就没有办法进行自动类型推导.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;decltypec11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#decltypec11&#34;&gt;#&lt;/a&gt;  &lt;code&gt;decltype（C++11）&lt;/code&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;我们希望从表达式（函数返回值）中推断出想要定义的变量的类型，但是却不想用表达式的值去初始化变量，这种情况 &lt;code&gt;auto&lt;/code&gt;  显得无力了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;推断表达式类型作为变量的定义类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推断函数返回值（实际不会调用，仅推断），推导出的对象类型与函数返回值一致&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当函数返回的是一个纯右值，需要忽略掉前面的 &lt;code&gt;const&lt;/code&gt;  或 &lt;code&gt;volatile&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无论是底层 &lt;code&gt;const&lt;/code&gt;  或 &lt;code&gt;volatile&lt;/code&gt;  还是顶层 &lt;code&gt;const&lt;/code&gt;  或 &lt;code&gt;volatile&lt;/code&gt;  都会被保留&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表达式是一个左值，或者被 &lt;code&gt;()&lt;/code&gt;  包围，使用 &lt;code&gt;decltype&lt;/code&gt;  推导出来是表达式类型的引用（如果有 &lt;code&gt;const&lt;/code&gt;  或 &lt;code&gt;volatile&lt;/code&gt;  则需要加上）&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;decltype&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		&lt;span class=&#34;token comment&#34;&gt;//b 的类型为 int&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;decltype&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;//c 的类型为 int&amp;amp;，绑定 a 对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;范围for循环c11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#范围for循环c11&#34;&gt;#&lt;/a&gt; 范围 for 循环（C++11）&lt;/h2&gt;
&lt;h2 id=&#34;null与nullptr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#null与nullptr&#34;&gt;#&lt;/a&gt;  &lt;code&gt;NULL&lt;/code&gt;  与 &lt;code&gt;nullptr&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NULL&lt;/code&gt;  来自 C 语言，由宏定义实现， &lt;code&gt;nullptr&lt;/code&gt;  是 C++11 新增的关键字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 C 语言中 &lt;code&gt;NULL&lt;/code&gt;  被定义成 &lt;code&gt;(void *)0&lt;/code&gt; ，在 C++ 中则被定义成 &lt;code&gt;0&lt;/code&gt; ，故引入 &lt;code&gt;nullptr&lt;/code&gt;  替代了 &lt;code&gt;NULL&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;ifdef&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;__cplusplus&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当有一个函数被重载时，且参数都是指针类型时，调用函数时需要明确强制转换成对应类型，否则编译器无法确定需要调用哪一个函数&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cout&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;char* p&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cout&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;int* p&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cout&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;int p&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 语句 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 语句 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 语句 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 运行结果：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 语句 1：char* p&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 语句 2: 报错，有多个匹配&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//3：int p&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lambda表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lambda表达式&#34;&gt;#&lt;/a&gt; lambda 表达式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;匿名函数。一个 &lt;code&gt;lambda&lt;/code&gt;  表达式具有一个返回值、一个参数列表和一个函数体。与函数不同的是， &lt;code&gt;lambda&lt;/code&gt;  表达式可以定义在函数体内部，格式为： &lt;code&gt;[capture list](parameter list) opt -&amp;gt;return type &amp;#123;function body&amp;#125;&lt;/code&gt; ，不能用默认参数.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;capture list&lt;/code&gt; ：捕获列表
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt; ：不捕获任何变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;amp;]&lt;/code&gt; ：捕获外部作用域中的所有变量，并作为引用在函数体内使用（按引用捕获）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[=]&lt;/code&gt; ：捕获外部作用域中的所有变量，并作为副本在函数体内使用（按值捕获），拷贝的副本在匿名函数体内部是只读的，不可改变.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[=, &amp;amp;foo]&lt;/code&gt; ：按值捕获外部作用域内的所以变量，按引用捕获变量 &lt;code&gt;foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[this]&lt;/code&gt; ：捕获当前实例的 &lt;code&gt;this&lt;/code&gt;  指针&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(parameter list)&lt;/code&gt; ：参数列表，和普通函数的参数列表一样，如果没有参数列表可以省略不写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opt&lt;/code&gt;  选项，不需要可以省略
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mutable&lt;/code&gt; ：可以修改按值拷贝进来的副本（注意修改的是副本）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exception&lt;/code&gt; ：指定函数抛出的异常&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return type&lt;/code&gt; ：一般情况下，不指定 &lt;code&gt;lambda&lt;/code&gt;  表达式的返回值，编译器会根据 &lt;code&gt;return&lt;/code&gt;  语句自动推导返回值类型，但是 &lt;code&gt;初始化列表不能用于返回值的自动推导&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;左值引用与右值引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#左值引用与右值引用&#34;&gt;#&lt;/a&gt; 左值引用与右值引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;左值引用：对左值的引用（可以出现在等式的左边，也可以出现在等式的右边，是具名的，同时可以取地址， &lt;code&gt;const左值引用&lt;/code&gt; 可以引用右值）; 避免对象的拷贝，在一定程度上让程序脱离了危险的指针&lt;/li&gt;
&lt;li&gt;右值引用：右值（只能出现在等式的右边，不能取地址，纯右值 [字面值，返回的非引用的函数调用，后置自增 / 减，算术表达式，逻辑表达式，比较表达式], 将亡值 [C++11 引入，会触发移动构造或者移动赋值，并进行资源转移]）往往是没有名称，在实际开发中我们可能需要对右值进行修改，需要借助右值引用（ &lt;code&gt;类型&amp;amp;&amp;amp; 变量名=右值&lt;/code&gt; ）
&lt;ol&gt;
&lt;li&gt;移动语义：将一个临时对象（将亡值）的资源转移到另外一个对象中去，可以减少不必要的资源的销毁和开辟，提高运行效率&lt;/li&gt;
&lt;li&gt;&lt;code&gt;move()&lt;/code&gt; ：将左值强制转化为右值引用，通过右值引用来使用，实现移动语义.&lt;/li&gt;
&lt;li&gt;完美转发&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;大小端存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大小端存储&#34;&gt;#&lt;/a&gt; 大小端存储&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大端存储：高位存储在低字节中&lt;/li&gt;
&lt;li&gt;小端存储：低位存储在低字节中&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在 &lt;code&gt;Socket网络编程&lt;/code&gt; 中，有主机字节序和网络字节序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;内存对齐&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存对齐&#34;&gt;#&lt;/a&gt; 内存对齐&lt;/h2&gt;
&lt;p&gt;理论上计算机对于任何变量的访问都可以从任务位置开始，然而实际上系统会对这些变量的存放做一些限制，通常将某个变量的地址设置为某个数 &lt;code&gt;N&lt;/code&gt;  的整数倍。这就是内存对齐.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内存是以字节为基本单位，但是对于处理器往往是按字节块来存取数据。进行内存对齐，主要是为了加快内存的存取速度.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;内存池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存池&#34;&gt;#&lt;/a&gt; 内存池&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;预先申请分配一定数量的内存块留作备用，当有新的内存需求时，就从内存池中分出一部分内存块，对于使用完的内存块将其放回内存池。若内存池不够，在继续申请新的内存. （防止频繁的内存申请与释放所带来的开销，提高分配效率，同时可以避免内存碎片）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stl六大组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stl六大组件&#34;&gt;#&lt;/a&gt; STL 六大组件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;容器、算法、迭代器、适配器、仿函数、空间分配器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么stack的pop和top要分离&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么stack的pop和top要分离&#34;&gt;#&lt;/a&gt; 为什么 stack 的 pop () 和 top () 要分离&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;pop()&lt;/code&gt;  来弹出并返回栈顶值这种方式不安全，可能导致原始数据丢失；pop () 在函数返回时，会发生对象的拷贝，如果弹出对象比较大，同时堆内内存比较紧张，可能无法分配住够的内存会抛出异常，无法正确的返回栈顶元素，但是此时栈顶元素已经弹出.&lt;/li&gt;
&lt;li&gt;通过引用或者指针可以解决这个问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;map-set-multimap-multiset关联容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#map-set-multimap-multiset关联容器&#34;&gt;#&lt;/a&gt; map、set、multimap、multiset（关联容器）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;底层实现是 &lt;code&gt;红黑树&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;  和 &lt;code&gt;multiset&lt;/code&gt;  会对元素进行排序， &lt;code&gt;set&lt;/code&gt;  不存储重复元素， &lt;code&gt;multiset&lt;/code&gt;  可以存储重复元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;  和 &lt;code&gt;multimap&lt;/code&gt;  存储的元素为 k-v 键值对，会更加 key 进行排序， &lt;code&gt;map&lt;/code&gt;  中不允许重复 key， &lt;code&gt;multimap&lt;/code&gt;  可以重复 key&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;unordered_set与set&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unordered_set与set&#34;&gt;#&lt;/a&gt; unordered_set 与 set&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unordered_set&lt;/code&gt;  内部无序，通过哈希来实现，对于非标准类型需要提供判等函数，插入，查询，删除的时间复杂度都是 &lt;code&gt;O(1)&lt;/code&gt; ，但是不稳定，当数据量大冲突大时，时间复杂度最坏退化为 &lt;code&gt;O(n)&lt;/code&gt; ； &lt;code&gt;set&lt;/code&gt;  内部有序，通过红黑树来实现，对于非标准类型需要提供比较函数，插入，查询，删除的时间复杂度比较稳定 &lt;code&gt;log2(n)&lt;/code&gt; .&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;哈希函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈希函数&#34;&gt;#&lt;/a&gt; 哈希函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;平方取中发：去关键字的平方值的中间几位作为哈希地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;哈希冲突&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈希冲突&#34;&gt;#&lt;/a&gt; 哈希冲突&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;开放地址法（再散列）：线性探测，再平方探测、伪随机探测&lt;/li&gt;
&lt;li&gt;拉链法&lt;/li&gt;
&lt;li&gt;再哈希&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vector的扩容机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vector的扩容机制&#34;&gt;#&lt;/a&gt; vector 的扩容机制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;  是一个动态数组，当插入元素使，若 &lt;code&gt;capacity&lt;/code&gt;  和 &lt;code&gt;size&lt;/code&gt;  相等，则会发生扩容； &lt;code&gt;vector&lt;/code&gt;  扩容并不是在原有空间进行扩充，而是在堆内申请一块更大空间的区域，将原来的数据复制过去，同时释放原有空间。至于这个扩容系数，得看具体的实现，得看取舍（内存和效率的取舍）， &lt;code&gt;GCC&lt;/code&gt;  下的扩容系数是 2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vectorclear-swap-shrink_to_fitresizereserve&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vectorclear-swap-shrink_to_fitresizereserve&#34;&gt;#&lt;/a&gt; vector（clear(), swap(), shrink_to_fit(),resize(),reserve()）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clear()&lt;/code&gt; ：清空内容，不释放内存（capacity 不变，size 变成 0）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap()&lt;/code&gt; ：清空内容，释放内存 (capacity，size 均变成 0)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shrink_to_fit()&lt;/code&gt; ：可能会释放内存，使 capacity 与 size 适配（capacity 与 size 相等）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resize(n)&lt;/code&gt; ：会改变 &lt;code&gt;vector&lt;/code&gt;  的 size&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reserve()&lt;/code&gt; ：不会改变 size，但是可能会改变 capacity. 主要目的是为了优化性能，避免在添加元素时频繁进行内存分配&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vector与list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vector与list&#34;&gt;#&lt;/a&gt; vector 与 list&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;  的内存空间是连续的，可以在 &lt;code&gt;o(1)&lt;/code&gt;  内实现随机存取，但是需要再内部进行插入和删除时，需要 &lt;code&gt;O(n)&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt;  是双向链表，内存空间不一定连续，往往是离散的， &lt;code&gt;O(n)&lt;/code&gt;  完成随机存取，但是可以 &lt;code&gt;O(1)&lt;/code&gt;  实现删除和插入操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;clear的时间复杂度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#clear的时间复杂度&#34;&gt;#&lt;/a&gt; clear 的时间复杂度&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;无论是顺序容器还是关联容器在使用 &lt;code&gt;clear()&lt;/code&gt;  时，时间复杂度都是 &lt;code&gt;O(n)&lt;/code&gt; ；因为执行 &lt;code&gt;clear()&lt;/code&gt;  需要调用元素的析构函数，这个析构函数会逐个进行。不过当存储的数据类型是基本数据类型的时候，不需要虚构，系统可能会做一些优化， &lt;code&gt;vector&lt;/code&gt;  容器可以使得复杂度降为常数级.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c智能指针c11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c智能指针c11&#34;&gt;#&lt;/a&gt; C&lt;ins&gt; 智能指针（C&lt;/ins&gt;11）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;智能指针是一个类，用来存储指向动态内存空间的对象指针，负责自动释放动态内存，防止堆内存泄漏.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;auto_ptr&lt;/code&gt; ：C&lt;ins&gt;98 引入，由于其不够安全，被 &lt;code&gt;unique_ptr&lt;/code&gt;  取代，C&lt;/ins&gt;11 废弃；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unique_ptr&lt;/code&gt; ：与 &lt;code&gt;auto_ptr&lt;/code&gt;  一样采用独占所有权模式，同一时间只能有一个指针可以指向某个对象，但是 &lt;code&gt;unique_ptr&lt;/code&gt;  禁止了拷贝操作， &lt;code&gt;unique_ptr&lt;/code&gt;  采用了移动赋值 &lt;code&gt;move()&lt;/code&gt;  函数来进行控制权转移.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt; ：共享所有权的一个智能指针。允许多个指针指针指向同一个对象，并使用引用计数来管理指向对象的指针（成员函数 &lt;code&gt;use_count()&lt;/code&gt;  可获得引用计数），该对象和相关资源会在最后一个引用被销毁时释放&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt; ：内部的引用计数是线程安全的，但是对象的读取需要加锁.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;  循环计数问题：创建了两个 &lt;code&gt;shared_ptr&lt;/code&gt;  分别指向两个对象，而这两个对象内的一个共享指针分别又指向了对方，造成了循环计数，使得两个对象的空间都无法被释放.&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ListNode&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; _data&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	shared_ptr&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ListNode&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ptr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;ListNode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;_data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ListNode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;~ListNode()&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	shared_ptr&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ListNode&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;node1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ListNode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	shared_ptr&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ListNode&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;node2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ListNode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; node1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use_count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; node2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use_count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	node1&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;ptr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; node2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	node2&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;ptr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; node1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; node1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use_count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; node2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use_count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 常用的解决方案是讲成员函数内的 shared_pre 改成弱指针 weak_ptr&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;weak_ptr&lt;/code&gt; ：一种不控制对象生命周期的智能指针，不会影响 &lt;code&gt;share_ptr&lt;/code&gt;  的引用计数，只是提供一种访问其管理对象的方式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内存泄漏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存泄漏&#34;&gt;#&lt;/a&gt; 内存泄漏&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;堆内存泄漏（ &lt;code&gt;Heap leak&lt;/code&gt; ）&lt;/li&gt;
&lt;li&gt;在释放对象数组时没有使用 &lt;code&gt;delete []&lt;/code&gt;  而使用 &lt;code&gt;delete&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;没有将基类的析构函数定义为虚函数&lt;/li&gt;
&lt;li&gt;缺少拷贝构造函数和拷贝赋值函数&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux 下内存泄漏检查工具：&lt;strong&gt;Valgrind&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;深拷贝与浅拷贝&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#深拷贝与浅拷贝&#34;&gt;#&lt;/a&gt; 深拷贝与浅拷贝&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;浅拷贝：C++ 默认的方式（如果程序员不主动编写拷贝构造函数和赋值构造，编译器将以浅拷贝的方式生成缺省的函数），简单的将成员函数值进行复制. （当成员变量出现指针时，则会导致多个指针指向同一片内存空间，新旧对象共享内存，当其中一个对象释放内存，再调释放其他对象时就会出现问题，同一片内存空间被释放了多次）&lt;/li&gt;
&lt;li&gt;深拷贝：必须显示的提供拷贝构造函数和赋值构造，新旧对象不共享内存&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c类默认生成的函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c类默认生成的函数&#34;&gt;#&lt;/a&gt; C++ 类默认生成的函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;无参构造函数、析构函数、拷贝构造函数、拷贝赋值函数、移动构造函数、移动赋值函数、重载取地址符，均是 &lt;code&gt;public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对象复用与零拷贝&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象复用与零拷贝&#34;&gt;#&lt;/a&gt; 对象复用与零拷贝&lt;/h2&gt;
&lt;h2 id=&#34;stl内存优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stl内存优化&#34;&gt;#&lt;/a&gt; STL 内存优化&lt;/h2&gt;
&lt;h2 id=&#34;const-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#const-2&#34;&gt;#&lt;/a&gt;  &lt;code&gt;const&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当以编译初始化的方式定义了一个 &lt;code&gt;const&lt;/code&gt;  对象时，例如 &lt;code&gt;const int bufsize=512&lt;/code&gt; ，编译器将在编译过程中把用到该变量的地方都替换成对应的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;const&lt;/code&gt;  对象被设定为仅在文件内有效，当多个文件中出现了同名的 &lt;code&gt;const&lt;/code&gt;  变量时，其实等同于在不同文件下分别定义了独立的变量；当某一个 &lt;code&gt;const&lt;/code&gt;  对象需要再多个文件间共享时，我们需要对于 &lt;code&gt;const&lt;/code&gt;  变量不管是声明还是定义都添加 &lt;code&gt;extern&lt;/code&gt;  关键字。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对常量的引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对常量的引用&#34;&gt;#&lt;/a&gt; 对常量的引用&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; dval &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.14&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;r &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dval&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;等价于&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; temp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dval&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;r &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; temp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;系统在内部会将对常数的引用绑定在一个临时对象上，实际并未绑定 &lt;code&gt;dval&lt;/code&gt; ；通过这种设计可以防止非法的操作。&lt;/p&gt;
&lt;h2 id=&#34;顺序容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序容器&#34;&gt;#&lt;/a&gt; 顺序容器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt; ：可变长数组。支持快速随机访问。在尾部之外的其他位置插入或者删除元素可能比较慢&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque&lt;/code&gt; ：双端队列。支持快速随机访问。在头部或者尾部插入、删除元素速度很快&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; ：双向列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forward_list&lt;/code&gt; ：单向列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt; ：固定大小数组。支持快速随机访问。不能添加或者删除元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt; ：与 &lt;code&gt;vector&lt;/code&gt;  类似，但专门用于存储字符&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;指针空值类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指针空值类型&#34;&gt;#&lt;/a&gt; 指针空值类型&lt;/h2&gt;
&lt;p&gt;C 与 C&lt;ins&gt; 内定义的 &lt;code&gt;NULL&lt;/code&gt;  含义不同；C&lt;/ins&gt; 内定义： &lt;code&gt;#define NULL 0&lt;/code&gt; , 而 C 内的定义： &lt;code&gt;#define NULL ((void *)0)&lt;/code&gt; .C 与 C&lt;ins&gt; 都是强类型语言，从 C 到 C&lt;/ins&gt; 语言的类型定义变的更加严格，C++ 内不允许 &lt;code&gt;void( *)&lt;/code&gt;  类型的变量隐式转化为其他类型。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 宏定义&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;ifndef&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token constant&#34;&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;ifdef&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;__cplusplus&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;NULL&lt;/span&gt;  &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;nullptr&lt;/code&gt;  无法隐式的转化为整形，但是可以隐式匹配指针类型&lt;/p&gt;
&lt;h2 id=&#34;使用结构化绑定来解包绑定的返回值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用结构化绑定来解包绑定的返回值&#34;&gt;#&lt;/a&gt; 使用结构化绑定来解包绑定的返回值&lt;/h2&gt;
&lt;p&gt;结构化绑定是 C++17 新特性，其可以结合语法糖自动推导类型，并可以从组对、元祖和结构体中提取单独的变量（解包）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用结构化绑定是为了能过更加简单的为绑定的多个变量进行赋值&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//  对 pair 的结构化绑定&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;pair&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;divide_remainder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; dividend&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; divisor&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;divide_remainder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//  对 tuple 进行结构化绑定&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;tuple&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;chrono&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;system_clock&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;time_point&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; valid_time&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; price&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;stock_info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;INTC&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//  对自定义结构体进行结构化绑定&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;employee&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    string name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    string role&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; salary&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;employee&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; employees&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 注意：在适当时候使用引用，尽量减少不必要的复制 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; role&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; salary&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; employees&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Name: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Role: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; role&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Salary: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; salary &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;STL&lt;/code&gt;  中的基础数据结构都能通过结构化绑定来直接进行访问&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;map&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size_t&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; animal_population&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;species&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; animal_population&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;There are &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; count &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; species&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; on this planet.\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Node：与 C 的语法特征不同，将复杂结构体作为返回值传回会耗费大量的时间，因为对象需要在返回函数中进行初始化，之后将这个对象拷贝到相应容器中返回给调用端。现代编译器支持&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%98%E5%8C%96&#34;&gt;&lt;strong&gt;返回值优化&lt;/strong&gt;&lt;/a&gt; (RVO, &lt;em&gt;return value optimization&lt;/em&gt;) 技术，这项技术可以省略中间副本的拷贝。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;带初始化的if和switch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#带初始化的if和switch&#34;&gt;#&lt;/a&gt; 带初始化的 if 和 switch&lt;/h2&gt;
&lt;h2 id=&#34;括号初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#括号初始化&#34;&gt;#&lt;/a&gt; 括号初始化&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;C++11&lt;/code&gt;  引入了新的括号初始化语法 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt; ，其不仅允许集合式的初始化，而且还是对常规构造函数的调用。遗憾的是，当与 &lt;code&gt;auto&lt;/code&gt;  类型变量结合使用时，这种方式很容易出现错误， &lt;code&gt;c++17&lt;/code&gt;  增强了这一系列初始化规则。&lt;/p&gt;
&lt;h2 id=&#34;参考博文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考博文&#34;&gt;#&lt;/a&gt; 参考博文&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NfYmFzZV9qaW4vYXJ0aWNsZS9kZXRhaWxzLzg2MDM2MTg1&#34;&gt;C++ 菱形继承问题和虚继承分析 - CSDN 博客&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="C++" />
        <category term="面试题" />
        <updated>2024-03-08T13:53:12.049Z</updated>
    </entry>
    <entry>
        <id>http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98</id>
        <title>计算机网络面试题</title>
        <link rel="alternate" href="http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98"/>
        <content type="html">&lt;h2 id=&#34;tcpip四层模型osi七层模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcpip四层模型osi七层模型&#34;&gt;#&lt;/a&gt; TCP/IP 四层模型，OSI 七层模型&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;tcp连接建立三次握手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp连接建立三次握手&#34;&gt;#&lt;/a&gt; TCP 连接建立（三次握手）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;客户端（client）建立连接， &lt;code&gt;SYN=1&lt;/code&gt; ，发送后状态变成 &lt;code&gt;SYN_SEND&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;服务端（server）收到后，同意建立连接， &lt;code&gt;ACK=1, SYN=1&lt;/code&gt; ，发送完成后状态变成 &lt;code&gt;SYN_RCVD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;客户端（client）收到后，状态变成 &lt;code&gt;ESTABLISHED&lt;/code&gt; ，返回 &lt;code&gt;ACK=1&lt;/code&gt;  给服务端；服务端（server）收到后，状态也变成 &lt;code&gt;ESTABLISHED&lt;/code&gt; ，连接建立成功.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;TCP 连接建立为什么是 3 次，不是两次或者四次？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 是全双工传输模式，它们双方即是客户端也是服务端，需要建立双向的连接；如果只有两次，无法做到双向连接，而建立连接时，服务端发送确定的同时将 &lt;code&gt;SYN=1&lt;/code&gt; ，确认和建立连接的请求合并了，所以也不需要 4 次.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;半连接队列和syn-flood攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#半连接队列和syn-flood攻击&#34;&gt;#&lt;/a&gt; 半连接队列和 SYN Flood 攻击&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;半连接队列&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务端在 &lt;code&gt;LISTEN&lt;/code&gt;  状态时，会在内部维护两个队列：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;半连接队列（ &lt;code&gt;SYN队列&lt;/code&gt; ）：三次握手未完成的连接（客户端发送 &lt;code&gt;SYN请求&lt;/code&gt; ，服务端接收后，便回复 &lt;code&gt;SYN和ACK&lt;/code&gt; ，状态由 &lt;code&gt;LISTEN&lt;/code&gt;  态变成 &lt;code&gt;SYN_RCVD&lt;/code&gt; ，此时这个连接就被推入半连接队列）&lt;/li&gt;
&lt;li&gt;全连接队列（ &lt;code&gt;ACCEPT队列&lt;/code&gt; ）：完成三次握手的链接（客户端回复 &lt;code&gt;ACK&lt;/code&gt; ，服务端接受后，三次握手完成，将连接从 &lt;code&gt;SYN队列&lt;/code&gt; 中推入 &lt;code&gt;ACCEPT队列&lt;/code&gt; ）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SYN Flood&lt;/code&gt;  攻击&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一种典型的 DDos 攻击，在短时间呢伪造不存在的 IP，向服务端发送大量的 &lt;code&gt;SYN&lt;/code&gt;  请求；当服务端发送 &lt;code&gt;SYN+ACK&lt;/code&gt;  报文后，不会收到 &lt;code&gt;ACK&lt;/code&gt;  回应报文，那么 &lt;code&gt;SYN队列&lt;/code&gt; 内的连接就不会出队，久而久之会沾满服务器的 &lt;code&gt;SYN队列&lt;/code&gt; ，使得正常用户无法正常访问.&lt;/p&gt;
&lt;p&gt;应对方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;SYN代理防火墙&lt;/code&gt; ：对于每一个 &lt;code&gt;SYN请求&lt;/code&gt; 进行代理和回应，并保持半连接；等客户端返回 &lt;code&gt;ACK确认&lt;/code&gt; 后，再重新构造 &lt;code&gt;SYN&lt;/code&gt;  包到服务器，简历真正的 TCP 连接&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/SYN_Flood.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;tcp连接释放四次挥手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp连接释放四次挥手&#34;&gt;#&lt;/a&gt; TCP 连接释放（四次挥手）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;客户端（client）连接释放，向服务端发送释放连接请求， &lt;code&gt;FIN=1&lt;/code&gt; ，此时客户端没有数据需要发送，状态变成 &lt;code&gt;FIN_WAIT_1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;服务端（server）收到后，返回一个确认报文 &lt;code&gt;ACK=1&lt;/code&gt; ，服务端状态变成 &lt;code&gt;CLOSE_WAIT&lt;/code&gt; （服务端可能还没有发送完数据）&lt;/li&gt;
&lt;li&gt;等到服务端（server）发送完所以数据后，向客户端发送连接释放请求， &lt;code&gt;FIN=1&lt;/code&gt; ，服务端状态变成 &lt;code&gt;LAST_ACK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;客户端收到 &lt;code&gt;ACK=1&lt;/code&gt;  确认之后，状态变成 &lt;code&gt;FIN_WAIT_2&lt;/code&gt; ；客户端收到服务端释放连接请求后，向服务端发送 &lt;code&gt;ACK=1&lt;/code&gt; ，此时客户端状态变成 &lt;code&gt;TIME_WAIT&lt;/code&gt; , 等待 2MSL（报文最大生命周期）的时间，才会进入 &lt;code&gt;CLOSED&lt;/code&gt;  状态&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么 TCP 连接释放不能 3 次？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为 &lt;code&gt;FIN=1&lt;/code&gt;  和 &lt;code&gt;ACK=1&lt;/code&gt;  不能同时发送，服务端在收到客户端 &lt;code&gt;FIN=1&lt;/code&gt;  后，数据可能没有发送完成.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;close_wait与time_wait&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#close_wait与time_wait&#34;&gt;#&lt;/a&gt; CLOSE_WAIT 与 TIME_WAIT&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CLOSE_WAIT&lt;/code&gt;  状态的意义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务端收到客户端的关闭请求并确认之后，会进入 &lt;code&gt;CLOSE_WAIT&lt;/code&gt;  状态。此时服务端可能还有一些数据需要放松，因此不会立马关闭连接，而 &lt;code&gt;CLOSE_WAIT&lt;/code&gt;  状态就是为了保证在服务端关闭之前将待发送的数据处理完&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TIME_WAIT&lt;/code&gt;  状态的意义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;客户端在收到客户端的关闭请求并确认之后，会进入 &lt;code&gt;TIME_WAIT&lt;/code&gt;  状态&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;防止旧连接的数据报。如何客户端最后一次发送 &lt;code&gt;ACK确认&lt;/code&gt; 报文之后立马关闭连接，但是此时服务端对应的端口并没有关闭，此时客户端在相同的端口建立新的连接，可能会导致新连接接收到旧连接产生的数据报，导致一些错误&lt;/li&gt;
&lt;li&gt;保证连接的正确关闭。如果客户端的最后一次 &lt;code&gt;ACK确认&lt;/code&gt; 报文丢失，由于 TCP 超时重传机制，服务端会重发 &lt;code&gt;FIN报文&lt;/code&gt; ；若没有 &lt;code&gt;TIME_WAIT&lt;/code&gt;  状态的话，超时重传的 &lt;code&gt;FIN报文&lt;/code&gt; 所对应的连接已经关闭，导致服务端没有得到正常的关闭&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为什么等待时间是 &lt;code&gt;2MSL(Maximuxm Segment Lifetime)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证客户端发送的最后一个 &lt;code&gt;ACK&lt;/code&gt;  确认报文能够被服务器正确接收，时服务端可以安全的关闭连接。若最后一个 &lt;code&gt;ACK=1&lt;/code&gt;  报文丢失，在 2MSL 内客户端必定察觉，可以重发&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tcp如何保证传输的可靠性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp如何保证传输的可靠性&#34;&gt;#&lt;/a&gt; TCP 如何保证传输的可靠性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;校验和：发送放在发送数据时会计算校验和，接收方在接受到数据后同样会检查校验和，如果不一致，那么传输发送了差错&lt;/li&gt;
&lt;li&gt;确认应答、序列号：TCP 对数据报进行了编号，同时接收方在接受了到了后会发送 &lt;code&gt;ack&lt;/code&gt;  的确认&lt;/li&gt;
&lt;li&gt;超时重传：如果发送方一段时间没有收到某个报文的 &lt;code&gt;ACK&lt;/code&gt;  确认，则会重新发送数据&lt;/li&gt;
&lt;li&gt;连接管理：三次握手和四次挥手保证连接的建立和释放的可靠性&lt;/li&gt;
&lt;li&gt;流量控制：TCP 协议报文包含 16 位的窗口大小，接收方在发送确认的同时会将自身窗口填入，发送方就根据报文中的窗口大小来控制发送速度&lt;/li&gt;
&lt;li&gt;拥塞控制：&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tcp的流量控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp的流量控制&#34;&gt;#&lt;/a&gt; TCP 的流量控制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP 中的流量控制是通过一个可变的滑动窗口来实现的. TCP 报文段中的窗口大小表示从被确认的字节算起还可以发送的字节数&lt;/li&gt;
&lt;li&gt;发送方的发送窗口内的字节都允许发送，当左部字节已发送并收到确认则窗口右移.&lt;/li&gt;
&lt;li&gt;接受方的接收串口内的字节都允许被接收。当左部字节已经发送确认并收到发送方确认，则窗口右移.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;TCP 流量控制是一个控制发送方发送速度，防止发送方发送速度过快导致接收方无法正确接受（缓存满），是一个局部的控制算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tcp-拥塞控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-拥塞控制&#34;&gt;#&lt;/a&gt; TCP 拥塞控制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;拥塞控制的方法：慢开始，拥塞避免，快重传，快恢复&lt;/li&gt;
&lt;li&gt;慢开始：不确定当前的网络状况，从 1 开始按指数逐渐增大拥塞窗口的大小，以此来探测当前网络的状况.&lt;/li&gt;
&lt;li&gt;拥塞避免：拥塞窗口达到阈值时所采用的策略，拥塞窗口的大小线性增大&lt;/li&gt;
&lt;li&gt;当出现了报文超时重传，当前拥塞窗口变成 1，重新执行慢开始，同时阈值减半&lt;/li&gt;
&lt;li&gt;快重传：当收到三个重复的 &lt;code&gt;ACK确认&lt;/code&gt; 时执行快重传，拥塞窗口减半，此时阈值设置为当前窗口的大小，进入快恢复&lt;/li&gt;
&lt;li&gt;快恢复：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;TCP 拥塞控制同样也是用于控制发送方发送速度，但是出发点是为了缓解整个网络的拥塞，是一个全局的控制算法.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E6%8B%A5%E5%A1%9E%E5%8F%91%E9%80%81.png&#34; alt=&#34;&#34; title=&#34;发生超时重传&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D.png&#34; alt=&#34;&#34; title=&#34;快速恢复&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;tcp重传机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp重传机制&#34;&gt;#&lt;/a&gt; TCP 重传机制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;超时重传&lt;/li&gt;
&lt;li&gt;快速重传&lt;/li&gt;
&lt;li&gt;选择确认重传&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;arq协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arq协议&#34;&gt;#&lt;/a&gt; ARQ 协议&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ARQ：自动重传请求；如果发送方在发送后一段时间内没有收到确认，它通常会重新发送.&lt;br /&gt;
ARQ 协议有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;停止等待 ARQ&lt;/li&gt;
&lt;li&gt;连续 ARQ 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;停止等待 ARQ 协议：发送端维护一个超时计数器，发送端每次发送的报文在得到接收方的确认之后才可以发送下一个数据，超过一定时间没有收到发送方的确认，则需要重新发送。对于发送方收到了多个对同一报文的确认直接丢失。接收方对于接收到重复的报文也直接丢失.&lt;/li&gt;
&lt;li&gt;连续 ARQ 协议：发送端会维护一个窗口，窗口内的分组可以连续发送出去而不需要等待接收端的确认。对于按需到达的分组，接收端会发送最后一个正确到达的分组的确认. （提高信道利用率），会出现回退 N 的现象（当发送端发送了 5 条消息，第三条消息丢失了，接收方只能给接收方发送前两个的确认，而不清楚后三条消息的状态，算法会选择吧后面的三条消息全部重传）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tcp与udp的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp与udp的区别&#34;&gt;#&lt;/a&gt; TCP 与 UDP 的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP 是面向连接的，提供可靠的数据流传输；UDP 是无连接的，数据传输不可靠&lt;/li&gt;
&lt;li&gt;TCP 是面向字节流的，UDP 面向报文&lt;/li&gt;
&lt;li&gt;TCP 提供了流量控制和拥塞控制，而 UDP 没有&lt;/li&gt;
&lt;li&gt;TCP 一般只支持点到点的通信，UDP 支持一对一，一对多的通信&lt;/li&gt;
&lt;li&gt;TCP 首部长度 20~60 字节，UDP 首部长度只有 8 字节&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;运行在 TCP 之上的协议： &lt;code&gt;HTTP&lt;/code&gt; ， &lt;code&gt;HTTPS&lt;/code&gt; ， &lt;code&gt;FTP&lt;/code&gt; ， &lt;code&gt;SSH&lt;/code&gt; &lt;br /&gt;
 运行在 UDP 之上的协议：DNS， &lt;code&gt;TFTP&lt;/code&gt; &lt;br /&gt;
TCP 应用场景：实时性要求低，准确度要求高（文件传输，收发邮件，远程登录）&lt;br /&gt;
UDP 应用场景：实时性要求高，准确度要求低（在线语音 / 视频）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tcp中的粘包和拆包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp中的粘包和拆包&#34;&gt;#&lt;/a&gt; TCP 中的粘包和拆包&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一个完整的数据报可能会被 TCP 拆分成多个包进行发送，也可能把多个小的包封装成一个大的数据包发送&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为什么会产生拆包和粘包&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;TCP 是基于字节流的&lt;/li&gt;
&lt;li&gt;要发送的数据大于 TCP 发送缓冲区剩余空间大小时，将会发生拆包&lt;/li&gt;
&lt;li&gt;待发送的数据长度大于最大报文长度 &lt;code&gt;MSS&lt;/code&gt; （TCP 报文长度 + TCP 首部长度 &amp;gt; MSS），TCP 在传输过程中会发生拆包&lt;/li&gt;
&lt;li&gt;要发送的数据小于 TCP 发送缓冲区大小时，将会发生粘包&lt;/li&gt;
&lt;li&gt;接收端没有及时读取接收端缓存内的数据，将会发生粘包&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何解决&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在数据尾部增加特殊的字符进行分割&lt;/li&gt;
&lt;li&gt;发送端将每个数据包封装成固定大小&lt;/li&gt;
&lt;li&gt;将数据分为两部分，一部分是头部，一部分是内容体；其中头部结构大小固定，且有一个字段声明内容体的大小&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tcp校验和采用什么算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp校验和采用什么算法&#34;&gt;#&lt;/a&gt; TCP 校验和采用什么算法&lt;/h2&gt;
&lt;h2 id=&#34;既然tcp保证了可靠传输为什么应用层还需要做校验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#既然tcp保证了可靠传输为什么应用层还需要做校验&#34;&gt;#&lt;/a&gt; 既然 TCP 保证了可靠传输，为什么应用层还需要做校验？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;TCP&lt;/code&gt;  的传输确认机制是可靠的，但是 &lt;code&gt;TCP&lt;/code&gt;  的数据完整性的效验是不可靠的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TCP&lt;/code&gt;  能保证端到端的正确传输，但是交付到应用程序，应用程序是否能做出正确的处理（程序是否有 &lt;code&gt;bug&lt;/code&gt; ） &lt;code&gt;TCP&lt;/code&gt;  无法保证，需要应用层自己保证&lt;/li&gt;
&lt;li&gt;设备故障，写入缓存的数据丢失&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;浏览器请求一个网址的过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器请求一个网址的过程&#34;&gt;#&lt;/a&gt; 浏览器请求一个网址的过程&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先通过 &lt;code&gt;DNS&lt;/code&gt;  将域名解析为 &lt;code&gt;IP地址&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;与服务器通过三次握手，建立 TCP 连接&lt;/li&gt;
&lt;li&gt;服务器处理 http 请求，返回 http 响应&lt;/li&gt;
&lt;li&gt;浏览器解析并渲染页面&lt;/li&gt;
&lt;li&gt;TCP 四次挥手断开连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/HTTP.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个过程所使用的协议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS&lt;/li&gt;
&lt;li&gt;TCP&lt;/li&gt;
&lt;li&gt;IP&lt;/li&gt;
&lt;li&gt;OPSF&lt;/li&gt;
&lt;li&gt;ARP&lt;/li&gt;
&lt;li&gt;HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;http协议中请求的方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http协议中请求的方式&#34;&gt;#&lt;/a&gt; http 协议中请求的方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt; 、 &lt;code&gt;POST&lt;/code&gt; 、 &lt;code&gt;HEAD&lt;/code&gt; 、 &lt;code&gt;PUT&lt;/code&gt; 、 &lt;code&gt;DELETE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常用的服务对应的端口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用的服务对应的端口&#34;&gt;#&lt;/a&gt; 常用的服务对应的端口&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FTP&lt;/code&gt; ：21&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh&lt;/code&gt; ：22&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP&lt;/code&gt; ：80&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTPS&lt;/code&gt; ：443&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MySQL&lt;/code&gt; ：3306&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;get与post的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#get与post的区别&#34;&gt;#&lt;/a&gt; GET 与 POST 的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;安全性： &lt;code&gt;GET&lt;/code&gt;  提交的数据会出现在 URL 内，相对不安全； &lt;code&gt;POST&lt;/code&gt;  提交的数据会在报文体内，相对安全&lt;/li&gt;
&lt;li&gt;数据流： &lt;code&gt;GET&lt;/code&gt;  传输的数据受限与 URL 的长度，而 &lt;code&gt;POST&lt;/code&gt;  没有这种限制&lt;/li&gt;
&lt;li&gt;一般而言 &lt;code&gt;GET&lt;/code&gt;  从服务器上获取资源，而 &lt;code&gt;POST&lt;/code&gt;  更新服务器上的资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http响应码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http响应码&#34;&gt;#&lt;/a&gt; http 响应码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1××&lt;/code&gt; ：提示信息，表示协议处于中间状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2××&lt;/code&gt; ：成功，报文被正确的接收和处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3××&lt;/code&gt; ：重定向，资源位置发生变动，需要客户端重新发送请求（ &lt;code&gt;301&lt;/code&gt;  永久性移动， &lt;code&gt;302&lt;/code&gt;  临时性移动）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4××&lt;/code&gt; ：客户端错误，请求的报文有误，服务器无法处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5××&lt;/code&gt; ：服务端错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http有哪些常见的字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http有哪些常见的字段&#34;&gt;#&lt;/a&gt; http 有哪些常见的字段&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HOST&lt;/code&gt; ：服务器域名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-Length&lt;/code&gt; ：服务器返回响应时，该字段表示回应的数据长度&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何理解http协议的无连接无状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何理解http协议的无连接无状态&#34;&gt;#&lt;/a&gt; 如何理解 http 协议的 &amp;quot;无连接，无状态&amp;quot;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无状态：在 http 协议中服务端不会保留客户端的任何信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;浏览器第一次发送请求给服务器时，服务器响应了；如果之后再次发送第二次请求给服务器，它还是会响应，但是服务器并不知道两次请求来着同一个客户端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http的长连接与短连接的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http的长连接与短连接的区别&#34;&gt;#&lt;/a&gt; http 的长连接与短连接的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在早期的 &lt;code&gt;http/1.0&lt;/code&gt;  默认使用的是短连接，每次客户端与服务端进行一次 http 操作，就建立一次连接，任务结束就中断连接&lt;/li&gt;
&lt;li&gt;从 &lt;code&gt;http/1.1&lt;/code&gt;  起，默认使用的长连接。响应报文中 &lt;code&gt;Connection:keep-alive&lt;/code&gt; ， &lt;code&gt;keep-alive&lt;/code&gt;  具有一个保持时间.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http10-11-20的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http10-11-20的区别&#34;&gt;#&lt;/a&gt; HTTP/1.0、1.1、2.0 的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP/1.0&lt;/code&gt; ：默认短连接，可以设置 &lt;code&gt;Connection:keep-alive&lt;/code&gt;  强制长连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP/1.1&lt;/code&gt; ：默认长连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP/2.0&lt;/code&gt; ：采用了多路复用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;https协议的流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#https协议的流程&#34;&gt;#&lt;/a&gt; HTTPS 协议的流程&lt;/h2&gt;
&lt;h2 id=&#34;http与https的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http与https的区别&#34;&gt;#&lt;/a&gt; http 与 https 的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;http 的缺点&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;明文传输，内容可能被窃听&lt;/li&gt;
&lt;li&gt;通信双方没有身份认证&lt;/li&gt;
&lt;li&gt;无法验证报文的完整性&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;https 的改进&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;加密：客户端通过 &lt;code&gt;SSL/TLS&lt;/code&gt;  将报文内容进行加密，服务端界面（运输层与网络层之间加上 SSL/TLS 网络协议）&lt;/li&gt;
&lt;li&gt;身份认证：通过值得信赖的第三方机构颁布的证书来确认双方的身份.&lt;/li&gt;
&lt;li&gt;完整新保护。通过 MD5 等散列码进行通信内存的校验&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;https 主要工作流程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发起 https 请求，连接到服务端的 443 端口&lt;/li&gt;
&lt;li&gt;服务端将自己的数字证书发送给客户端（）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;session与cookie&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session与cookie&#34;&gt;#&lt;/a&gt; Session 与 Cookie&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cookie&lt;/code&gt; ：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;session&lt;/code&gt; ：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Cookie&lt;/code&gt;  存储在客户端， &lt;code&gt;Session&lt;/code&gt;  存储在服务端&lt;/li&gt;
&lt;li&gt;有效期不同.  &lt;code&gt;Cookie&lt;/code&gt;  一般可以设置为长时间保持， &lt;code&gt;Session&lt;/code&gt;  一般有效期较短&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关联：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户第一次请求服务器时，服务器根据用户提交的信息，创建响应的 &lt;code&gt;Session&lt;/code&gt; ，并返回此 &lt;code&gt;Session&lt;/code&gt;  的唯一标识 &lt;code&gt;Session ID&lt;/code&gt;  给客户端；客户端在接收到服务器返回的 &lt;code&gt;Session ID&lt;/code&gt;  后将其保存在 &lt;code&gt;Cookie&lt;/code&gt;  中，同时绑定当前的域名.&lt;/li&gt;
&lt;li&gt;当用户第二次请求服务器时，请求会自动判断此域名狭隘是否存在 &lt;code&gt;Cookie&lt;/code&gt;  信息，如果存在则自动将 &lt;code&gt;Cookie&lt;/code&gt;  信息发送给服务端；服务端会从 &lt;code&gt;Cookie&lt;/code&gt;  中获取 &lt;code&gt;Session ID&lt;/code&gt;  并查找对应的 &lt;code&gt;Session&lt;/code&gt;  信息，如果没有找到，说明用户没有登陆或者登陆失效，如果找到了，说明用户已经登陆可直接执行响应操作.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;分布式环境下 &lt;code&gt;Session&lt;/code&gt;  怎么处理？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用 &lt;code&gt;Redis&lt;/code&gt;  等分布式缓存来存储 &lt;code&gt;Session&lt;/code&gt;  信息，在多态服务器之间共享&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;dns域名系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns域名系统&#34;&gt;#&lt;/a&gt; DNS 域名系统&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;对于人而言记忆一串有意义的字符串要比记忆一组无规律的数字要容易的多；DNS，即为域名系统，是一个由域名到 IP 地址的分布式数据库，可以方便的完成域名到 IP 的转换.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/dns.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作原理
&lt;ol&gt;
&lt;li&gt;当用户输入域名时，浏览器先检查自己的缓存是否包含这个域名的映射。如有则解析结束&lt;/li&gt;
&lt;li&gt;检查操作系统缓存中是否（Windows 的 hosts）有该域名的映射&lt;/li&gt;
&lt;li&gt;向本地域名服务器发送解析请求，查找是否有对应的域名映射&lt;/li&gt;
&lt;li&gt;本地域名服务器依次向根域名服务器、顶级域名服务器、权限域名服务器发送请求，直到找到域名的映射&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;arp协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arp协议&#34;&gt;#&lt;/a&gt; ARP 协议&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;网络层的 IP 报文向下需要封装成帧，需要添加以太网头部，这就需要知道节点的 MAC 地址；ARP 的作用就是完成 IP 地址到 MAC 地址的转化协议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;首先每个主机都会维护一张 ARP 列表，用于存储 IP 地址到 MAC 地址的映射&lt;/li&gt;
&lt;li&gt;源主机发送数据时，首先检查 ARP 列表内是否有目的地址的 MAC 地址，如果有，则写入以太网头部，并发送帧。如果没有，主机以广播的形式发送 ARP 数据报，数据报内源主机 IP 地址，源主机 MAC 地址，目的主机的 IP 地址&lt;/li&gt;
&lt;li&gt;当网络中的主机收到 ARP 数据包时，首先检查报文中的 IP 地址是否是自己，如果不是则丢弃该报文；否则将自己的 MAC 地址写入 ARP 响应报文中，同时将源主机的 IP 地址和 MAC 地址键值对写入自己的 ARP 列表中.&lt;/li&gt;
&lt;li&gt;源主机收到 ARP 响应报文后，将目的主机的 IP 地址和 MAC 地址写入自身的 APR 列表中，并写入以太网头部，发送该帧.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ipv4地址不够如何解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipv4地址不够如何解决&#34;&gt;#&lt;/a&gt; IPV4 地址不够如何解决&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DHCP&lt;/code&gt; ：动态主机配置协议。动态分配 IP 地址，只给接入网络的设备分配 IP 地址.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NAT&lt;/code&gt; ：网络地址转换协议.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IPV6&lt;/code&gt; ：&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么既有mac地址又有ip地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么既有mac地址又有ip地址&#34;&gt;#&lt;/a&gt; 为什么既有 MAC 地址，又有 IP 地址&lt;/h2&gt;
&lt;h2 id=&#34;icmp协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#icmp协议&#34;&gt;#&lt;/a&gt; ICMP 协议&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;面向无连接，用于传输错误报告控制信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ICMP差错报告报文&lt;/code&gt; ：终点不可达、时间超时、改变路由、参数问题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ICMP询问报文&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对称秘钥加密和非对称秘钥加密&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对称秘钥加密和非对称秘钥加密&#34;&gt;#&lt;/a&gt; 对称秘钥加密和非对称秘钥加密&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;对称秘钥加密&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;加密和解密使用同一种秘钥，运算速度快，但是无法安全的将秘钥传递给通信方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非对称加密&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;加密和解密使用不同的秘钥，运算速度慢&lt;/p&gt;
&lt;p&gt;通信方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信的内容后使用私有密钥解密&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;liunx下网络配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#liunx下网络配置&#34;&gt;#&lt;/a&gt; Liunx 下网络配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifconfig&lt;/code&gt;  或 &lt;code&gt;ip&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考博文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考博文&#34;&gt;#&lt;/a&gt; 参考博文&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MveUFsRXJsQzA5R25qYVZ2d1VvM0FjZw==&#34;&gt;面渣逆袭：计算机网络六十二问，三万字图文详解！速收藏！ (qq.com)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pbnRlcnZpZXdndWlkZS5jbi9ub3Rlcy8wMy1odW50aW5nX2pvYi8wMi1pbnRlcnZpZXcvMDMtMDEtbmV0Lmh0bWw=&#34;&gt;计算机网络 - 01-20 | 阿秀的学习笔记 (interviewguide.cn)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;[3] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpVME9URTRNell6TXc9PSZhbXA7bWlkPTIyNDc1MTc5NjkmYW1wO2lkeD0zJmFtcDtzbj1hMGZjODgxMTE0OTJmNTUyOWZlZjE0MDA4YTFiYjQ1MSZhbXA7Y2hrc209ZmJiMTBlZWZjY2M2ODdmOThlZGE2YzhkN2Q3M2UyNTFkOWRjNTk3YmJlY2U0ZTU0ZDUxYjc2MDczOTdiNTI2YzU5NTQ1MjgxNWU3MSZhbXA7c2NlbmU9Mjc=&#34;&gt;2W 字！梳理 50 道经典计算机网络面试题（收藏版） (qq.com)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="面试题" />
        <category term="计算机网络" />
        <updated>2024-03-07T09:23:50.257Z</updated>
    </entry>
</feed>
