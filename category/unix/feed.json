{
    "version": "https://jsonfeed.org/version/1",
    "title": "繁華落盡 似水流年 • All posts by \"unix\" category",
    "description": "编程日记 & 随笔",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/07/20/Unix%20programing/",
            "url": "http://example.com/2023/07/20/Unix%20programing/",
            "title": "UNIX网络编程",
            "date_published": "2023-07-20T09:00:34.000Z",
            "content_html": "<h2 id=\"传输层tcp-udp和sctp\"><a class=\"anchor\" href=\"#传输层tcp-udp和sctp\">#</a> 传输层：TCP、UDP 和 SCTP</h2>\n<h2 id=\"套接字编程\"><a class=\"anchor\" href=\"#套接字编程\">#</a> 套接字编程</h2>\n<h3 id=\"套接字地址结构\"><a class=\"anchor\" href=\"#套接字地址结构\">#</a> 套接字地址结构</h3>\n<h4 id=\"ipv4套接字地址结构\"><a class=\"anchor\" href=\"#ipv4套接字地址结构\">#</a> IPV4 套接字地址结构</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*    IPV4 套接字地址     */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token keyword\">int</span> sa_family_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sa_family_t sa_famliy<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* 套接字地址结构的地址族 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">char</span> sa_data<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 端口号（2 字节）+ IP 地址（4 字节） + 填充（8 字节） */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Synopsis：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    #include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Additional:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tsockaddr 是通用的套接字地址结构，是早期的版本，同时与各种套接字函数都是适配的；当套接字作为一个参数参入套接字函数时，往往是以引用形式（也就是以指向该地址的指针）来传递。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t当使用便于赋值和使用的新型地址结构 sockaddr_in 时，使用套接字函数，传入套接字地址时，需要做一个强制类型转换变成通用的套接字地址结构的指针。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tstruct sockaddr_in serv;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t(struct socketaddr *)&amp; serv;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token keyword\">uint16_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">uint32_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">uint16_t</span> in_port_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">uint32_t</span> in_addr_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    in_addr_t\ts_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">/* POSIX 规范只需要 3 个字段：sin_family, sin_port, sin_addr */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">uint8_t</span> sin_len<span class=\"token punctuation\">;</span>\t       <span class=\"token comment\">/* 长度字段，部分厂家支持，简化了长度可变套接字地址结构的处理 */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    sa_family_t sin_family<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 套接字地址结构的地址族 */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span> sin_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    in_port_t sin_port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">char</span> sin_zero<span class=\"token punctuation\">[</span><span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span>sa_family<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span>in_port_t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t#include &lt;netinet/in.h></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Additional:</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tsin_addr 定义为一个结构体而不仅仅是一个 in_addr_t 类型的无符号长整数，这是有历史原因的；早期的版本把 in_addr 结构定义为多种结构的联合，允许访问一个 IPV4 地址中的所有字节，或者访问它的 2 个 16 位值。这是为了适应地址被划分为 A、B 和 C 三类的时期，便于获取地址中适当的字节。然而随着子网划分技术的来临和无类地址编排的出现，各种地址类正在消失，这种联合也就不再需要了。</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"ipv6套接字地址结构\"><a class=\"anchor\" href=\"#ipv6套接字地址结构\">#</a> IPV6 套接字地址结构</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* IPV6 套接字地址结构 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">in6_addr</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"值-结果参数\"><a class=\"anchor\" href=\"#值-结果参数\">#</a> 值 - 结果参数</h3>\n<p>当往套接字函数传递一个套接字地址结构时，该结构总是以引用的形式来传递，也就是传递指向该结构的一个指针；其有两种传递方式</p>\n<ul>\n<li>从进程到内核传递套接字地址的函数有：connect、bind 和 sendto。这些函数的一个参数是指向某个套接字地址结构的指针，另外一个参数是指向该结构的整形大小；（即指针和指针所指内容的大小都传递给了内核，于是内核找到到底需要从进程复制多少数据进来）</li>\n<li>从内核到进程传递套接字地址的函数有：accept、recvfrom、getsockname 和 getpeername。这些函数的</li>\n</ul>\n<h3 id=\"字节排序函数\"><a class=\"anchor\" href=\"#字节排序函数\">#</a> 字节排序函数</h3>\n<p>内存中储存数据的方式有两种：大端字节序和小端字节序；两种格式都有系统使用，目前并没有统一的标准，对于给定的系统，其使用的字节序称为主机字节序。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">uint16_t</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint16_t</span> host_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">uint16_t</span> <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint16_t</span> net_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">uint32_t</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> host_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">uint32_t</span> <span class=\"token function\">ntohl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> net_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t使用这些函数时，并不需要关系主机字节序和网络字节序的真实值；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"字符操纵函数\"><a class=\"anchor\" href=\"#字符操纵函数\">#</a> 字符操纵函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;strings.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bzero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bcopy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">bcmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memsset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"地址转换函数\"><a class=\"anchor\" href=\"#地址转换函数\">#</a> 地址转换函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* IPV4 地址转换函数 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">inet_aton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span> <span class=\"token operator\">*</span>addrptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t将 strptr 所指 C 字符串转化为一个 32 位的网络字节序二进制值，并通过指针 addrptr 来存储。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t若成功则返回 1，否则返回 0；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>in_addr_t <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* 已被废弃 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t将 strpre 所指 C 字符串转化为一个 32 位的网络字节序二进制值，并将结果作为函数的返回值。不能用于处理 255.255.255.255 这种广播地址，该地址的二进制值被用来指示函数失败。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t出错时该函数返回 INADDR_NONE 常值（32 位均为 1 的值），成功则返回正确的地址序列。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span> inaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t将一个 32 位的网络字节序二进制 IPV4 地址转换为相应的点分十进制数串</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* IPV4、IPV6 地址转换函数 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> family<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addrptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t#include &lt;arpa/inet.h></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tfaimly: 地址族 (AF_INET、AF_INET6)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstrptr: 需要转换的字符串指针</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\taddrptr: 指向转换后的二进制结果</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t若成功则返回 1，失败则返回 - 1；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">inet_ntop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> family<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addrptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>strptr<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t#include &lt;arpa/inet.h></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tfamily:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\taddrptr:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tstrptr:</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tlen:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t若成功则返回指向结果的指针，若出错则为 NULL</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"readn-writen和readline函数\"><a class=\"anchor\" href=\"#readn-writen和readline函数\">#</a> readn、writen 和 readline 函数</h3>\n<h2 id=\"tcp套接字编程\"><a class=\"anchor\" href=\"#tcp套接字编程\">#</a> TCP 套接字编程</h2>\n<h3 id=\"socket函数\"><a class=\"anchor\" href=\"#socket函数\">#</a> socket 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> domain<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tdomain: 协议域</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t- AF_INET:IPV4 protocal</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t- AF_INET6:IPV6 protocal</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t- AF_LOCAL:Unix 域协议</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t- AF_ROUTE: 路由套接字</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t- AF_KEY: 秘钥套接字</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\ttype: 套接字类型</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t- SOCK_STREAM: 字节流套接字</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t- SOCK_DGRAM: 数据报套接字</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t- SOCK_SEQPACKET: 允许分组套接字</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t- SOCK_RAW: 原始套接字</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tprotocal: 协议类型，或者设置为 0（会选择 domain 和 type 组合的系统默认值，但是并非所有的组合都是有效的）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t- IPPROTO_TCP:TCP 传输协议</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t- IPPROTO_UPD:UDP 传输协议</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t- IPPROTO_SCTP:SCTP 传输协议</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tsocket 函数成功则会返回一个小的非负整数值，它与文件描述符类似，称为套接字描述符 ssocket descriptor（sockfd）。失败则返回 - 1</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"connect函数\"><a class=\"anchor\" href=\"#connect函数\">#</a> connect 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> socklen_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>serveraddr<span class=\"token punctuation\">,</span> socklen_t addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tsockfd: 客户端用于通信的套接字描述符；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tserveraddr: 服务器监听套接字</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\taddrlen: 服务器套接字地址结构长度</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t客户在调用函数 connect 之前，不必非得调用 bind 函数；因为如果也需要的话，内核会确定源 IP 地址，并选择一个临时端口作为源端口</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t若成功则返回 0，若出错则返回 - 1。若 connect 失败则该套接字不再可用，必须关闭。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"bind函数\"><a class=\"anchor\" href=\"#bind函数\">#</a> bind 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>myaddr<span class=\"token punctuation\">,</span> socklen_t addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t把一个本地协议地址赋予一个套接字</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tsockfd:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tmyaddr:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tsocklen_t:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"listen函数\"><a class=\"anchor\" href=\"#listen函数\">#</a> listen 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> backlog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tsockfd: 套接字描述符；当 socket 函数创建一个套接字时，它被假设为一个主动套接字，listen 函数把一个未连接的套接字转化为一个被动套接字，指示内核应该接受指向该套接字的连接请求；（调用 listen 导致套接字从 CLOSE 状态转换到 LISTEN 状态）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tbacklog: 内核应该为相应套接字设置的最大排队连接请求</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Return Value：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t若成功则返回 0，若失败返回 - 1；</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>内核会为任何一个给定的监听套接字维护两个队列：</p>\n<ul>\n<li>未完成连接队列（incomplete connection queue）</li>\n<li>已完成连接队列（completed connection queue）</li>\n</ul>\n<h3 id=\"accept函数\"><a class=\"anchor\" href=\"#accept函数\">#</a> accept 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>clientaddr<span class=\"token punctuation\">,</span> socklen_t addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\taccept 函数由 TCP 服务器调用，用于从已完成连接队列对头返回下一个已完成连接的客户端请求。如果已完成连接队列为空，那么进程被置于休眠状态。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tsockfd: 监听套接字描述符</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tclientaddr: 客户进程地址结构</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\taddrlen: 客户进程协议地址长度</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t若 accept 成功，那么其返回值是由内核自动生成的一个全新的套接字描述符，代表与所返回的客户的 TCP 连接。若服务器对客户协议地址不感兴趣，可以把 clientaddr 和 addrlen 设置为空指针。返回的已连接套接字在每次断开连接后需要关闭。若失败则返回 - 1；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"recv和send函数\"><a class=\"anchor\" href=\"#recv和send函数\">#</a> recv 和 send 函数</h3>\n<p><code>recv</code>  和 <code>send</code>  函数类似于标准的 <code>read</code>  和 <code>write</code>  函数，不过需要一个额外的参数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> ssize_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> size_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ssize_t <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> size_t nbytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ssize_t <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> size_t nbytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t前三个参数等同于 read 和 write 的三个参数。flags 参数的值或为 0，或为如下字段：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t- MSG_DONTROUTE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t- MSG_DONTWAIT</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t- MSG_OOB</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t- MSG_PEEK</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t- MSG_WAITALL</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"close函数\"><a class=\"anchor\" href=\"#close函数\">#</a> close 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t#include &lt;unistd.h></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tsockfd: 待关闭的套接字描述符</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t若关闭成功返回 0，若关闭失败返回 - 1；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"并发服务器\"><a class=\"anchor\" href=\"#并发服务器\">#</a> 并发服务器</h3>\n<p>当服务器需要连接多个客户端时，可以使用迭代的方式，但是当服务一个客户请求可能花费较长时间时，我们并不希望整个服务器被单个客户长期占用，而是希望同时服务多个客户，这时需要在并发的服务器。</p>\n<h2 id=\"tcp客户服务器程序实例\"><a class=\"anchor\" href=\"#tcp客户服务器程序实例\">#</a> TCP 客户 / 服务器程序实例</h2>\n<p>&lt;img src=&quot;C:\\Users\\Value\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230522145338069.png&quot; alt=&quot;image-20230522145338069&quot; style=&quot;zoom:90%;&quot; /&gt;</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 服务端 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//============================================================================</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Name        : learning_socket.cpp</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Author      : Value</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// Version     :</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// Copyright   : Your copyright notice</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Description : Hello World in C++, Ansi-style</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//============================================================================</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">/* 创建监听套接字描述符 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> listen_socket_fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">/* 监听套接字地址结构 */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> listen_socket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tlisten_socket<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tlisten_socket<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token string\">\"192.168.159.130\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>listen_socket<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">/* 绑定 IP 和 Port */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>listen_socket_fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>listen_socket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> listen_socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">/* 监听 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tret <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>listen_socket_fd<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端启动中...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">/* 等待客户端；连接 */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> client_socket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> addrlen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span> client_socket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">int</span> client_socket_fd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>listen_socket_fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>client_socket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>client_socket_fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accept error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">char</span> ip<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端IP：%s, 端口：%d\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token function\">inet_ntop</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>client_socket<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">.</span>sin_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">/* 通信 */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token comment\">/* 接收数据 */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>client_socket_fd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"received client messages:%s\\n\"</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token comment\">/* 发送消息 */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t<span class=\"token function\">send</span><span class=\"token punctuation\">(</span>client_socket_fd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端断开了连接...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>client_socket_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>listen_socket_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 客户端 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//============================================================================</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Name        : learning_client.cpp</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Author      : Value</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// Version     :</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// Copyright   : Your copyright notice</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Description : Hello World in C++, Ansi-style</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//============================================================================</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">/* 创建通信套接字描述符 */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">int</span> client_socket_fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>client_socket_fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket error!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">/* 客户端可绑定固定 IP 和端口，也可以不绑定，操作系统自动选择空闲端口和本地 IP */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> server_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tserver_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tserver_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token string\">\"192.168.159.130\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>server_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">/* 连接服务器 */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>client_socket_fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>server_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> server_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect error!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">/* 通信 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token comment\">/* 发送数据 */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> <span class=\"token string\">\"你好，我是客户端！发送给你%d\\n\"</span><span class=\"token punctuation\">,</span>count <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token function\">send</span><span class=\"token punctuation\">(</span>client_socket_fd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token comment\">/* 接收数据 */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>client_socket_fd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"受到数据：%s\\n\"</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器断开了连接...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv error!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>client_socket_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"udp套接字编程\"><a class=\"anchor\" href=\"#udp套接字编程\">#</a> UDP 套接字编程</h2>\n<h3 id=\"recvfrom和sendto函数\"><a class=\"anchor\" href=\"#recvfrom和sendto函数\">#</a> recvfrom 和 sendto 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssize_t <span class=\"token function\">recvfrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> size_t nbytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>from<span class=\"token punctuation\">,</span> socklen_t <span class=\"token operator\">*</span>addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tsockfd: 用于通信的套接字描述符</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tbuff: 指向读入缓冲区的指针</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tnbytes:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tflags:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfrom: 指向数据报发送者的协议地址的套接字地址结构</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\taddrlen: 套接字地址结构大小</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ssize_t <span class=\"token function\">sendto</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> size_t nbytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>to<span class=\"token punctuation\">,</span> socklen_t addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tsockfd: 用于通信的</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tbuff:</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tnbytes:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tflags:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tto: 指向数据报接受者的协议地址（IP 地址以端口号）的套接字地址结构</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\taddrlen: 套接字地址结构大小</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"高级io函数\"><a class=\"anchor\" href=\"#高级io函数\">#</a> 高级 I/O 函数</h2>\n<h3 id=\"套接字超时\"><a class=\"anchor\" href=\"#套接字超时\">#</a> 套接字超时</h3>\n<h3 id=\"readv和writev函数\"><a class=\"anchor\" href=\"#readv和writev函数\">#</a> readv 和 writev 函数</h3>\n<p>这两个函数类似于 <code>read</code>  和 <code>write</code> ，不过 <code>readv</code>  和 <code>writev</code>  允许单个系统嗲用读入或写入一个或多个缓冲区。</p>\n<h3 id=\"recvmsg和sendmsg函数\"><a class=\"anchor\" href=\"#recvmsg和sendmsg函数\">#</a> recvmsg 和 sendmsg 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssize_t <span class=\"token function\">recvmsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> msghdr <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ssize_t <span class=\"token function\">sendmsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> msghdr <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">msghdr</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>msg_name<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Address to send to/receive from.  */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    socklen_t msg_namelen<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Length of address data.  */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">iovec</span> <span class=\"token operator\">*</span>msg_iov<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Vector of data to send/receive into.  */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    size_t msg_iovlen<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Number of elements in the vector.  */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>msg_control<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Ancillary data (eg BSD filedesc passing). */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    size_t msg_controllen<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Ancillary data buffer length.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                   !! The type should be socklen_t but the</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                   definition of the kernel is incompatible</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                   with this.  */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> msg_flags<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* Flags on received message.  */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Synopsis:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t#include &lt;sys/socket.h></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Description:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"辅助数据\"><a class=\"anchor\" href=\"#辅助数据\">#</a> 辅助数据</h3>\n",
            "tags": [
                "python"
            ]
        }
    ]
}