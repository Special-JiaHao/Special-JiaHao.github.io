{
    "version": "https://jsonfeed.org/version/1",
    "title": "繁華落盡 似水流年 • All posts by \"dolphinscheduler\" tag",
    "description": "编程日记 & 随笔",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/value/DolphinScheduler",
            "url": "http://example.com/value/DolphinScheduler",
            "title": "DolphinScheduler",
            "date_published": "2024-09-01T12:00:00.000Z",
            "content_html": "<h1 id=\"dolphinscheduler\"><a class=\"anchor\" href=\"#dolphinscheduler\">#</a> DolphinScheduler</h1>\n<h2 id=\"关于dolphinscheduler\"><a class=\"anchor\" href=\"#关于dolphinscheduler\">#</a> 关于 <code>DolphinScheduler</code></h2>\n<p><code>Apache DolphinScheduler</code>  是一个分布式的易扩展的可视化 <code>DAG</code>  工作流任务调度系统。旨在解决复杂大数据任务依赖关系，并为应用程序提供数据和各种 <code>OPS</code>  编排.  <code>DophinScheduler</code>  以 <code>DAG</code>  流的方式组装任务，可以及时监控任务的执行状态，支持重试.</p>\n<ul>\n<li>丰富的使用场景</li>\n<li>高可靠性： <code>High Reliability</code> , 去中心化设计，确保稳定性。原生支持高可用 <code>High Avaliable</code>  的任务队列，提供过载容错能力.</li>\n<li>搞扩展性： <code>High Scalability</code> , 支持多租户和在线资源管理。支持每天 10 万个数据任务的稳定运行</li>\n</ul>\n<h2 id=\"模块\"><a class=\"anchor\" href=\"#模块\">#</a> 模块</h2>\n<ul>\n<li><code>master</code> ：</li>\n<li><code>worker</code></li>\n<li><code>aler</code></li>\n<li><code>api web</code></li>\n<li><code>common</code></li>\n<li><code>dao</code></li>\n<li><code>remote</code></li>\n<li><code>service</code></li>\n<li><code>ui</code></li>\n</ul>\n<h2 id=\"架构architecture\"><a class=\"anchor\" href=\"#架构architecture\">#</a> 架构 <code>architecture</code></h2>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/dolphinscheduler-architecture-1.3.0.jpg\" alt=\"\" /></p>\n<ol>\n<li><code>MasterServer</code> ：采用分布式无中心的设计理念， <code>MasterServer</code>  主要负责 <code>DAG</code>  任务切分、任务提交监控，并同时监听其他 <code>MasterServer</code>  和 <code>WorkerServer</code>  的健康状态.  <code>MasterServer</code>  服务启动时向 <code>Zookeeper</code>  注册临时节点，通过监听 <code>Zookeeper</code>  临时节点的变化来进行容错处理， <code>MasterServer</code>  基于 <code>netty</code>  提供监听服务，该服务主要包含：\n<ul>\n<li><code>Distributed Quartz</code>  分布式调度组件，主要负责定时任务的启停操作，当 <code>quartz</code>  调启任务后， <code>Master</code>  内部会有线程池具体负责处理任务的后续操作.</li>\n<li><code>MasterSchedulerThread</code>  是一个扫描线程，定时扫描数据库中的 <code>command</code>  表，根据不同的任务类型进行不同的业务操作</li>\n<li><code>MasterExecThread</code>  主要负责 <code>DAG</code>  任务切分、任务提交监控、各种不同的任务类型的逻辑处理</li>\n<li><code>MasterTaskExecThread</code>  主要复制任务的可持久化</li>\n</ul>\n</li>\n<li><code>WorkerServer</code> ：采用分布式无中心设计理念， <code>WorkerServer</code>  主要负责任务的执行和提供日志服务.  <code>WorkerServer</code>  服务启动时向 <code>Zookeeper</code>  注册临时节点，比起维持心跳， <code>WorkerServer</code>  基于 <code>netty</code>  提供监听服务，该服务主要包含：\n<ul>\n<li>1</li>\n</ul>\n</li>\n<li><code>Zookeeper</code> ：系统中的 <code>MasterServer</code>  和 <code>WorkerServer</code>  节点都通过 <code>Zookeeper</code>  来进行集群的管理和容错。另外系统还基于 <code>ZooKeeper</code>  进行时间的监听和分布式锁.</li>\n<li><code>Task Queue</code></li>\n<li><code>Alert</code></li>\n<li><code>API</code></li>\n<li></li>\n</ol>\n",
            "tags": [
                "DolphinScheduler"
            ]
        }
    ]
}