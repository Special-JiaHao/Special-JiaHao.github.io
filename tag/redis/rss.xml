<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>繁華落盡 似水流年 • Posts by &#34;redis&#34; tag</title>
        <link>http://example.com</link>
        <description>编程日记 &amp; 随笔</description>
        <language>en</language>
        <pubDate>Tue, 03 Oct 2023 16:18:31 +0800</pubDate>
        <lastBuildDate>Tue, 03 Oct 2023 16:18:31 +0800</lastBuildDate>
        <category>mathematics</category>
        <category>语法</category>
        <category>C++</category>
        <category>VMware</category>
        <category>install</category>
        <category>数据库</category>
        <category>STL</category>
        <category>CNN</category>
        <category>Project</category>
        <category>面试题</category>
        <category>日常</category>
        <category>校招</category>
        <category>算法</category>
        <category>Leetcode双周赛</category>
        <category>Algorithm</category>
        <category>Leetcode周赛</category>
        <category>设计模式</category>
        <category>多线程</category>
        <category>池化技术</category>
        <category>MySQL</category>
        <category>操作系统</category>
        <category>计算机网络</category>
        <category>CMake</category>
        <category>线程池</category>
        <category>Go</category>
        <category>Redis</category>
        <category>Linux</category>
        <category>json</category>
        <category>Python</category>
        <category>牛客</category>
        <category>Git</category>
        <category>normalization</category>
        <category>推理加速</category>
        <category>LLM</category>
        <category>AI算法</category>
        <category>Pytorch</category>
        <category>激活函数</category>
        <category>部署</category>
        <item>
            <guid isPermalink="true">http://example.com/value/%E6%95%B0%E6%8D%AE%E5%BA%93/redis%E5%9F%BA%E7%A1%80</guid>
            <title>Redis基础 | 面试 | 应用场景</title>
            <link>http://example.com/value/%E6%95%B0%E6%8D%AE%E5%BA%93/redis%E5%9F%BA%E7%A1%80</link>
            <category>数据库</category>
            <category>Redis</category>
            <pubDate>Tue, 03 Oct 2023 16:18:31 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis&#34;&gt;#&lt;/a&gt; Redis&lt;/h1&gt;
&lt;h2 id=&#34;redis基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis基础&#34;&gt;#&lt;/a&gt; Redis 基础&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;redis（Remote dictionary server）是一个开源的基于内存的数据存储系统。它可以用于数据库缓存，消息队列等各种场景，是一种 NoSQL 数据库。早期的互联网公司系统大多是通过 Mysql 这种传统的关系型数据库对外提供服务。随着互联网的快速发展，应用系统的访问量原来远大，数据库的性能瓶颈越来越明显，主要是由于磁盘 IO 所导致的，磁盘 IO 的读写速度与内存相比是非常慢的，如果能把数据存储在内存中，则可以大大数据存储的性能。于是便出现了 redis，这种基于内存的数据存储系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;切换数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#切换数据库&#34;&gt;#&lt;/a&gt; 切换数据库&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  默认有 16 个数据库，编号分别是 &lt;code&gt;0-15&lt;/code&gt; ，通过 &lt;code&gt;select&lt;/code&gt;  来进行切换&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;# 切换数据库 10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dbsize		&lt;span class=&#34;token comment&#34;&gt;# 产看当前数据库大小（不含数据，则数据库大小为 0）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;清空数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#清空数据库&#34;&gt;#&lt;/a&gt; 清空数据库&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flushdb		&lt;span class=&#34;token comment&#34;&gt;# 清空当前数据库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flushall 	&lt;span class=&#34;token comment&#34;&gt;# 清空所有数据库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;数据结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据结构&#34;&gt;#&lt;/a&gt; 数据结构&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  支持多种数据结构，包括五种基本数据类型和五种高级数据类型。&lt;br /&gt;
五种基本数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串 &lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;列表 &lt;code&gt;List&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;集合 &lt;code&gt;Set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;有序集合 &lt;code&gt;SortedSet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;哈希 &lt;code&gt;Hash&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;五种高级数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消息队列&lt;/li&gt;
&lt;li&gt;地理空间&lt;/li&gt;
&lt;li&gt;HyperLogLog&lt;/li&gt;
&lt;li&gt;位图 Bitmap&lt;/li&gt;
&lt;li&gt;位域 Bitfiled&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  的使用方式有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CLI，命令行界面（Command Line Interface）；通过 Redis-CLI 命令行工具来使用&lt;/li&gt;
&lt;li&gt;API，应用程序接口（Application Programing Interface）；&lt;/li&gt;
&lt;li&gt;GUI，图形用户界面（Graphical User Interface）；通过图形化工具来使用 Redis&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;string&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string&#34;&gt;#&lt;/a&gt;  &lt;code&gt;String&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  中的数据是以键值对的形式存储的&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 字符串 String&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; key value      		&lt;span class=&#34;token comment&#34;&gt;# 设置键值对（key, value）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;get key 	        	&lt;span class=&#34;token comment&#34;&gt;# 获取 key 对应的 value 值，大小写敏感&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# redis 内默认都是使用字符串来存储数据的，而且是二进制安全的（redis-cli --raw）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;del key			   	    &lt;span class=&#34;token comment&#34;&gt;# 删除 key 对应的（key，value）键值对&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;exists key		    	&lt;span class=&#34;token comment&#34;&gt;# 判断是否存在 key 对应的键值对&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;keys pattern			&lt;span class=&#34;token comment&#34;&gt;# 查看与 pattern 匹配的键，* 表示所以 key&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;clear&lt;/span&gt;			    	&lt;span class=&#34;token comment&#34;&gt;# 清空屏幕&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; key			    &lt;span class=&#34;token comment&#34;&gt;# 产看 key 的数据类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;append key addstring	 &lt;span class=&#34;token comment&#34;&gt;# 在 key 对应的 value 后追加 addstring&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;strlen key				&lt;span class=&#34;token comment&#34;&gt;# 获取 key 对应的 value 的长度&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 设置一个带过期时间的键值对&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;TTL key			   		&lt;span class=&#34;token comment&#34;&gt;# 查看 key 的过期时间，返回 - 1 表示没有设置过期时间，返回 - 2 表示设置了过期时间同时该键值对已经过期，返回正数表示过期时间&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;expire key seconds		&lt;span class=&#34;token comment&#34;&gt;# 为 key 对应的键值对设置过期时间 seconds&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;setex key seconds value  &lt;span class=&#34;token comment&#34;&gt;# 设置（key，value）键值对的过期时间&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;setnx key value			&lt;span class=&#34;token comment&#34;&gt;# 当键 key 不存在时，插入（key, value）, 否则不插入&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;incr key				&lt;span class=&#34;token comment&#34;&gt;# key 对应的 value +1 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;decr key				&lt;span class=&#34;token comment&#34;&gt;# key 对应的 value -1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;incrby key &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;			&lt;span class=&#34;token comment&#34;&gt;# key 对应的 value +add&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;decrby key sub			&lt;span class=&#34;token comment&#34;&gt;# key 对应的 value -sub&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;getrange key start end 	 &lt;span class=&#34;token comment&#34;&gt;# 获取 key 对应的 value 的 [start, end] 的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;setrange key offset replace_string	&lt;span class=&#34;token comment&#34;&gt;# 替换 offset 小标开始的字符串为 replace_string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mset key1 value1 key2 value2 key3 value3  &lt;span class=&#34;token comment&#34;&gt;# 批量设置 key-value&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mget key1 key2 key3						&lt;span class=&#34;token comment&#34;&gt;# 批量获取&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;msetnx &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;getset key value		&lt;span class=&#34;token comment&#34;&gt;# 返回原始的 key 对应的值，若不存在返回 nil，同时修改 key 对应的值为 value&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#list&#34;&gt;#&lt;/a&gt;  &lt;code&gt;list&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt;  也叫列表，一般用来存储和操作一组有顺序的数据，和数组的概念比较类似&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# lish 操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lpush key value 		&lt;span class=&#34;token comment&#34;&gt;# 往列表 key 的左边插入一个 value 的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rpush key value			&lt;span class=&#34;token comment&#34;&gt;# 往列表 key 的右边插入一个 value 的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lpush key value1 value2 value3 &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.  &lt;span class=&#34;token comment&#34;&gt;# 一次性添加多个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lrange key start stop	&lt;span class=&#34;token comment&#34;&gt;# 获取列表 key 左边 [start, stop] 的所以元素索引 0 开始&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lpop key 			   &lt;span class=&#34;token comment&#34;&gt;# 删除列表 key 最左边的元素，返回删除的元素值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lpop key count		   &lt;span class=&#34;token comment&#34;&gt;# 删除列表 key 最左边的 count 个元素（版本 &gt;=6.0.2），返回删除的元素值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;llen key			   &lt;span class=&#34;token comment&#34;&gt;# 获取列表 key 的长度&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ltrim key start stop    &lt;span class=&#34;token comment&#34;&gt;# 保留列表 key 从左开始 [stop, stop] 内的元素，范围之外的元素均会被删除（索引均是从 0 开始）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;set&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set&#34;&gt;#&lt;/a&gt; set&lt;/h4&gt;
&lt;p&gt;set 是一种无序集合，它和列表的区别是列表中的元素都是可以重复的，而 set 中的元素不可以重复，而且 set 中的元素并不像列表中的元素那样都是具有顺序的。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# set 操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sadd key member			&lt;span class=&#34;token comment&#34;&gt;# 往无序集合 key 内添加 member 元素，若无序集合 key 内已经存在该 member，则添加失败&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sadd key memeber1 member2 &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.   &lt;span class=&#34;token comment&#34;&gt;# 往无序集合 key 内添加多个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;smembers key			&lt;span class=&#34;token comment&#34;&gt;# 查看无序集合 key 的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sismember key member	 &lt;span class=&#34;token comment&#34;&gt;# 查看 member 是否是无序集合 key 内的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;srem key memeber		&lt;span class=&#34;token comment&#34;&gt;# 删除无序集合 key 内的 member&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;srem key member1 member2 &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.   &lt;span class=&#34;token comment&#34;&gt;# 删除无序集合 key 内的多个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 集合运算操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;sortedset&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sortedset&#34;&gt;#&lt;/a&gt; sortedset&lt;/h4&gt;
&lt;p&gt;sortedset 是一种有序集合，又名 zset，其和集合的区别在于有序集合的每个元素都会关联一个浮点类型的分数，然后按照这个分数来对集合中的元素进行从小到大的顺序排序，有序集合的成员是唯一的，但是分数是可以重复的。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# sortedset 操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;zadd key score1 member1 score2 member2 &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.  &lt;span class=&#34;token comment&#34;&gt;# 往有序集合 key 中插入 member1,member2，其对应的分数为 score1, scores2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;zrange key start stop				&lt;span class=&#34;token comment&#34;&gt;# 查看有序集合 key 内 [start, stop] 内的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;zrange key start stop withscores     &lt;span class=&#34;token comment&#34;&gt;# 查看有序集合 key 内 [start, stop] 内的元素和其对应的分数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;zscore key member				    &lt;span class=&#34;token comment&#34;&gt;# 获取有序集合 key 内 member 的分数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;zrank key member				    &lt;span class=&#34;token comment&#34;&gt;# 获取有序集合 key 内 member 的排名（从小到大排序，分数越小排名越高）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;zrevrank key member				    &lt;span class=&#34;token comment&#34;&gt;# 获取有序集合 key 内 member 的排名（从大到小排序，分数越高排名越高）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;hash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hash&#34;&gt;#&lt;/a&gt; hash&lt;/h4&gt;
&lt;p&gt;哈希 hash 是一个字符类型的字段和值的映射表，简单来说就是一个键值对的集合，特别适合用来存储对象。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# hash 操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hset key field value		&lt;span class=&#34;token comment&#34;&gt;# 往哈希 key 内插入 (field, value) 键值对&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hget key field			    &lt;span class=&#34;token comment&#34;&gt;# 获取哈希 key 内 field 对应的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hgetall key				   &lt;span class=&#34;token comment&#34;&gt;# 获取哈希 key 内所以的键值对&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hdel key field  		   &lt;span class=&#34;token comment&#34;&gt;# 删除哈希 key 内 field 对应的键值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexists key field 		    &lt;span class=&#34;token comment&#34;&gt;# 查看哈希 key 内是否存在 field 对应的键值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hkeys key				   &lt;span class=&#34;token comment&#34;&gt;# 获取哈希 key 内所以的键&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hlen key				   &lt;span class=&#34;token comment&#34;&gt;# 获取哈希 key 内所以键值对的数目&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;redis 提供了发布订阅的功能，可以通过 &lt;code&gt;publish&lt;/code&gt;  将消息发布到指定的频道，然后通过 &lt;code&gt;subscribe&lt;/code&gt;  命令来订阅这个频道。但是这样的简单的发布和订阅功能具有一些局限性，比如消息无法持久化，无法记录历史消息等等&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;subscribe channel			&lt;span class=&#34;token comment&#34;&gt;# 订阅频道 channel&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;publish channel message		&lt;span class=&#34;token comment&#34;&gt;# 像频道 channe 发布消息 message&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;stream-消息队列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stream-消息队列&#34;&gt;#&lt;/a&gt; Stream 消息队列&lt;/h4&gt;
&lt;p&gt;消息队列 Stream，是 redis5.0 引入的一个新的数据结构，他是一个轻量级的消息队列，可以实现消息的持久化、记录历史消息等。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Stream 操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xadd key &lt;span class=&#34;token function&#34;&gt;id&lt;/span&gt; field value				&lt;span class=&#34;token comment&#34;&gt;# 往消息队列 key 内添加一条消息（消息的 id，消息的内容 (field, value)）， id 为 *，则 redis 则会自动生成，id 为 (时间戳 - 序号) 的形式；redis 自动生成的 id 保证其为递增，如果手动指定 id 需要自己保证插入消息 id 为递增的&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xlen key						   &lt;span class=&#34;token comment&#34;&gt;# 获取消息队列 key 的消息数目&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xrange key - + 					    &lt;span class=&#34;token comment&#34;&gt;# 获取消息队列 key 内的所以消息信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xrange key start end				&lt;span class=&#34;token comment&#34;&gt;# 获取消息队列 key 内 id 在 [start, end] 范围内的消息信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xdel key &lt;span class=&#34;token function&#34;&gt;id&lt;/span&gt;						    &lt;span class=&#34;token comment&#34;&gt;# 删除消息队列 key 内 ID 为 id 的消息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xtrim key maxlen count				&lt;span class=&#34;token comment&#34;&gt;# 删除消息队列 kye 内的消息，直到消息队列长度为 count（可能比 count 多）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xread &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;count count_num&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;block milliseconds&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; streams key &lt;span class=&#34;token function&#34;&gt;id&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 读取消息队列可以内 count_num 条消息，ID&gt;id，若没有则堵塞 milliseconds 毫秒，如果 id 为 $, 表示获取当前时刻之后的 count_num 条消息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;genspatial地理空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#genspatial地理空间&#34;&gt;#&lt;/a&gt; Genspatial 地理空间&lt;/h4&gt;
&lt;p&gt;地理空间 &lt;code&gt;Genspatial&lt;/code&gt;  是 redis3.2 版本的新特性，它提供了一种存储空间位置信息的数据结构，同时支持对地理位置进行的各种计算操作。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 地理空间 genspatial&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;geoadd key longitude latitude member 	&lt;span class=&#34;token comment&#34;&gt;# 往空间地理位置 key 内添加名称为 member 的地理位置信息（经度，纬度）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;geopos key member					  &lt;span class=&#34;token comment&#34;&gt;# 获取空间地理位置 key 内 member 的位置信息 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;geodist key member1 member2 &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;km&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;			   &lt;span class=&#34;token comment&#34;&gt;# 获取空间地理位置 key 内 member1 与 member2 之间的距离，默认为 m&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;hyperloglog&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hyperloglog&#34;&gt;#&lt;/a&gt; HyperLogLog&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;HyperLogLog&lt;/code&gt;  是一种用来做基数统计的算法，它并不是 redis 特有的算法。基数：集合中元素数目（去重之后）。它的原理是使用随机算法来计算，通过牺牲一定的精度来换取更小的内存消耗。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# hyperloglog 操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pfadd key element1 element2 &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.        &lt;span class=&#34;token comment&#34;&gt;# 往基数容器 key 内添加 element1，element2... 元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pfcount key							&lt;span class=&#34;token comment&#34;&gt;# 获取基数容器 key 内元素的数目&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pfmerge destkey sourcekey1 sourcekey2  &lt;span class=&#34;token comment&#34;&gt;# 合并多个基数容器，最终存放于 destkey 基数容器内&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;位图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#位图&#34;&gt;#&lt;/a&gt; 位图&lt;/h4&gt;
&lt;p&gt;位图是字符串类型的扩展，可以使用一个 string 类型来模拟一个 Bit 数组，数组的下标就是偏移量，值只有 0 和 1，也支持一些位运算，比如与、或、非和异或等等。他们的运用非常广泛，比如用来记录用户的签到情况，在线状态，点赞状态。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# bitmap 操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;setbit key offset value				&lt;span class=&#34;token comment&#34;&gt;# 设置位图 key 偏移量为 offset 的位置为 value (0/1)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;getbit key offset				    &lt;span class=&#34;token comment&#34;&gt;# 获取位图 key 偏移量为 offset 的位置的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; key value					   &lt;span class=&#34;token comment&#34;&gt;# 位图本质是 string，可以通过设置 string 的方法来设置位图，value 转化为二进制即为对应位图的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bitcount key 					   &lt;span class=&#34;token comment&#34;&gt;# 获取位图 key 内 1 的个数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bitpos key bit					   &lt;span class=&#34;token comment&#34;&gt;# 获取位图 key 内第一次出现 bit 的下标 (0 开始)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;位域能够将很多小的整数存储到一个较大的位图中，这样就可以更加高效的使用内存&lt;/p&gt;
&lt;h2 id=&#34;面试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试题&#34;&gt;#&lt;/a&gt; 面试题&lt;/h2&gt;
&lt;p&gt;redis 支持事务，也就是可以在一次请求中执行多个命令；redis 中的事务主要通过 &lt;code&gt;multi&lt;/code&gt;  和 &lt;code&gt;exec&lt;/code&gt;  这两个命令来实现的； &lt;code&gt;multi&lt;/code&gt;  命令用来开启一个事务，事务开启之后所以的命令都会被放进一个队列中，最后通过一个 &lt;code&gt;exec&lt;/code&gt;  命令来执行所以的命令。redis 中是事务和 mysql 或者 oracle 中的数据库的事务不太一样，在关系型数据库中，事务一般是一个原子操作，要么全部执行成功，要么全部执行失败；而在 redis 中，事务并不能保证所以命令都会执行成功，它的执行结果取决于事务中的命令，但是 redis 可以保证如下三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在发送 &lt;code&gt;exec&lt;/code&gt;  命令之前，所以的命令都会被放入到一个队列中缓存起来，不会立即执行&lt;/li&gt;
&lt;li&gt;在收到 &lt;code&gt;exec&lt;/code&gt;  命令之后事务开始执行，事务中的任何一个命令执行失败其他命令依然会被执行（不会以为其中的命令执行失败而影响后续的命令的执行）&lt;/li&gt;
&lt;li&gt;在事务的执行过程中，其他客户端提交的命令请求并不会被插入到执行命令序列中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;持久化的 redis 一个非常重要的功能，因为 redis 是一个基于内存的数据库，如果没有持久化的话，那么一旦服务器重启或者断点，那么之前的所以数据都会丢失，这对于一个数据库来说是非常致命的。redis 中的持久化主要由两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDB 方式（redis databse），在指定的时间间隔内，将内存中的数据快照写入磁盘，他是某一时间点上数据的完整副本&lt;/li&gt;
&lt;li&gt;AOF 方式（Append-Only File），追加文件，每次在执行写命令的时候，不仅将命令写入到内存中，还会将命令写入到一个追加的文件中，这个文件就是 AOF 文件，它会以日志的形式来记录每一个写操作，当 redis 重启的时候，就会通过重新执行 AOF 文件中的命令来在内存中重建整个数据库的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主从复制是指将一台服务器（主节点）的数据复制到其他 redis 服务器中（从节点）。一个主节点可以有多个从节点，而每个从节点只可以有一个主节点，数据的复制是单向的，只能由主节点到从节点；一般来说主节点负责写操作，从节点负责读操作，主节点会将自己的数据变化通过异步的方式发送给从节点，从节点接收到主节点的数据之后，更新自己的数据，这样就达到的了数据一致性的目的。&lt;/p&gt;
&lt;h2 id=&#34;应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用场景&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h2&gt;
 ]]></description>
        </item>
    </channel>
</rss>
