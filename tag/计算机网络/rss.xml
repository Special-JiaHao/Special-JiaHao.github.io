<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>繁華落盡 似水流年 • Posts by &#34;计算机网络&#34; tag</title>
        <link>http://example.com</link>
        <description>编程日记 &amp; 随笔</description>
        <language>en</language>
        <pubDate>Thu, 07 Mar 2024 17:23:50 +0800</pubDate>
        <lastBuildDate>Thu, 07 Mar 2024 17:23:50 +0800</lastBuildDate>
        <category>mathematics</category>
        <category>语法</category>
        <category>C++</category>
        <category>VMware</category>
        <category>install</category>
        <category>数据库</category>
        <category>STL</category>
        <category>CNN</category>
        <category>Project</category>
        <category>面试题</category>
        <category>日常</category>
        <category>校招</category>
        <category>算法</category>
        <category>Leetcode双周赛</category>
        <category>Algorithm</category>
        <category>Leetcode周赛</category>
        <category>设计模式</category>
        <category>多线程</category>
        <category>池化技术</category>
        <category>redis</category>
        <category>MySQL</category>
        <category>操作系统</category>
        <category>计算机网络</category>
        <category>CMake</category>
        <category>线程池</category>
        <item>
            <guid isPermalink="true">http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98</guid>
            <title>计算机网络面试题</title>
            <link>http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98</link>
            <category>面试题</category>
            <category>计算机网络</category>
            <pubDate>Thu, 07 Mar 2024 17:23:50 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;tcpip四层模型osi七层模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcpip四层模型osi七层模型&#34;&gt;#&lt;/a&gt; TCP/IP 四层模型，OSI 七层模型&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;tcp连接建立三次握手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp连接建立三次握手&#34;&gt;#&lt;/a&gt; TCP 连接建立（三次握手）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;客户端（client）建立连接， &lt;code&gt;SYN=1&lt;/code&gt; ，发送后状态变成 &lt;code&gt;SYN_SEND&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;服务端（server）收到后，同意建立连接， &lt;code&gt;ACK=1, SYN=1&lt;/code&gt; ，发送完成后状态变成 &lt;code&gt;SYN_RCVD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;客户端（client）收到后，状态变成 &lt;code&gt;ESTABLISHED&lt;/code&gt; ，返回 &lt;code&gt;ACK=1&lt;/code&gt;  给服务端；服务端（server）收到后，状态也变成 &lt;code&gt;ESTABLISHED&lt;/code&gt; ，连接建立成功.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;TCP 连接建立为什么是 3 次，不是两次或者四次？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 是全双工传输模式，它们双方即是客户端也是服务端，需要建立双向的连接；如果只有两次，无法做到双向连接，而建立连接时，服务端发送确定的同时将 &lt;code&gt;SYN=1&lt;/code&gt; ，确认和建立连接的请求合并了，所以也不需要 4 次.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;半连接队列和syn-flood攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#半连接队列和syn-flood攻击&#34;&gt;#&lt;/a&gt; 半连接队列和 SYN Flood 攻击&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;半连接队列&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务端在 &lt;code&gt;LISTEN&lt;/code&gt;  状态时，会在内部维护两个队列：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;半连接队列（ &lt;code&gt;SYN队列&lt;/code&gt; ）：三次握手未完成的连接（客户端发送 &lt;code&gt;SYN请求&lt;/code&gt; ，服务端接收后，便回复 &lt;code&gt;SYN和ACK&lt;/code&gt; ，状态由 &lt;code&gt;LISTEN&lt;/code&gt;  态变成 &lt;code&gt;SYN_RCVD&lt;/code&gt; ，此时这个连接就被推入半连接队列）&lt;/li&gt;
&lt;li&gt;全连接队列（ &lt;code&gt;ACCEPT队列&lt;/code&gt; ）：完成三次握手的链接（客户端回复 &lt;code&gt;ACK&lt;/code&gt; ，服务端接受后，三次握手完成，将连接从 &lt;code&gt;SYN队列&lt;/code&gt; 中推入 &lt;code&gt;ACCEPT队列&lt;/code&gt; ）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SYN Flood&lt;/code&gt;  攻击&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一种典型的 DDos 攻击，在短时间呢伪造不存在的 IP，向服务端发送大量的 &lt;code&gt;SYN&lt;/code&gt;  请求；当服务端发送 &lt;code&gt;SYN+ACK&lt;/code&gt;  报文后，不会收到 &lt;code&gt;ACK&lt;/code&gt;  回应报文，那么 &lt;code&gt;SYN队列&lt;/code&gt; 内的连接就不会出队，久而久之会沾满服务器的 &lt;code&gt;SYN队列&lt;/code&gt; ，使得正常用户无法正常访问.&lt;/p&gt;
&lt;p&gt;应对方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;SYN代理防火墙&lt;/code&gt; ：对于每一个 &lt;code&gt;SYN请求&lt;/code&gt; 进行代理和回应，并保持半连接；等客户端返回 &lt;code&gt;ACK确认&lt;/code&gt; 后，再重新构造 &lt;code&gt;SYN&lt;/code&gt;  包到服务器，简历真正的 TCP 连接&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/SYN_Flood.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;tcp连接释放四次挥手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp连接释放四次挥手&#34;&gt;#&lt;/a&gt; TCP 连接释放（四次挥手）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;客户端（client）连接释放，向服务端发送释放连接请求， &lt;code&gt;FIN=1&lt;/code&gt; ，此时客户端没有数据需要发送，状态变成 &lt;code&gt;FIN_WAIT_1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;服务端（server）收到后，返回一个确认报文 &lt;code&gt;ACK=1&lt;/code&gt; ，服务端状态变成 &lt;code&gt;CLOSE_WAIT&lt;/code&gt; （服务端可能还没有发送完数据）&lt;/li&gt;
&lt;li&gt;等到服务端（server）发送完所以数据后，向客户端发送连接释放请求， &lt;code&gt;FIN=1&lt;/code&gt; ，服务端状态变成 &lt;code&gt;LAST_ACK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;客户端收到 &lt;code&gt;ACK=1&lt;/code&gt;  确认之后，状态变成 &lt;code&gt;FIN_WAIT_2&lt;/code&gt; ；客户端收到服务端释放连接请求后，向服务端发送 &lt;code&gt;ACK=1&lt;/code&gt; ，此时客户端状态变成 &lt;code&gt;TIME_WAIT&lt;/code&gt; , 等待 2MSL（报文最大生命周期）的时间，才会进入 &lt;code&gt;CLOSED&lt;/code&gt;  状态&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么 TCP 连接释放不能 3 次？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为 &lt;code&gt;FIN=1&lt;/code&gt;  和 &lt;code&gt;ACK=1&lt;/code&gt;  不能同时发送，服务端在收到客户端 &lt;code&gt;FIN=1&lt;/code&gt;  后，数据可能没有发送完成.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;close_wait与time_wait&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#close_wait与time_wait&#34;&gt;#&lt;/a&gt; CLOSE_WAIT 与 TIME_WAIT&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CLOSE_WAIT&lt;/code&gt;  状态的意义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务端收到客户端的关闭请求并确认之后，会进入 &lt;code&gt;CLOSE_WAIT&lt;/code&gt;  状态。此时服务端可能还有一些数据需要放松，因此不会立马关闭连接，而 &lt;code&gt;CLOSE_WAIT&lt;/code&gt;  状态就是为了保证在服务端关闭之前将待发送的数据处理完&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TIME_WAIT&lt;/code&gt;  状态的意义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;客户端在收到客户端的关闭请求并确认之后，会进入 &lt;code&gt;TIME_WAIT&lt;/code&gt;  状态&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;防止旧连接的数据报。如何客户端最后一次发送 &lt;code&gt;ACK确认&lt;/code&gt; 报文之后立马关闭连接，但是此时服务端对应的端口并没有关闭，此时客户端在相同的端口建立新的连接，可能会导致新连接接收到旧连接产生的数据报，导致一些错误&lt;/li&gt;
&lt;li&gt;保证连接的正确关闭。如果客户端的最后一次 &lt;code&gt;ACK确认&lt;/code&gt; 报文丢失，由于 TCP 超时重传机制，服务端会重发 &lt;code&gt;FIN报文&lt;/code&gt; ；若没有 &lt;code&gt;TIME_WAIT&lt;/code&gt;  状态的话，超时重传的 &lt;code&gt;FIN报文&lt;/code&gt; 所对应的连接已经关闭，导致服务端没有得到正常的关闭&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为什么等待时间是 &lt;code&gt;2MSL(Maximuxm Segment Lifetime)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证客户端发送的最后一个 &lt;code&gt;ACK&lt;/code&gt;  确认报文能够被服务器正确接收，时服务端可以安全的关闭连接。若最后一个 &lt;code&gt;ACK=1&lt;/code&gt;  报文丢失，在 2MSL 内客户端必定察觉，可以重发&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tcp如何保证传输的可靠性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp如何保证传输的可靠性&#34;&gt;#&lt;/a&gt; TCP 如何保证传输的可靠性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;校验和：发送放在发送数据时会计算校验和，接收方在接受到数据后同样会检查校验和，如果不一致，那么传输发送了差错&lt;/li&gt;
&lt;li&gt;确认应答、序列号：TCP 对数据报进行了编号，同时接收方在接受了到了后会发送 &lt;code&gt;ack&lt;/code&gt;  的确认&lt;/li&gt;
&lt;li&gt;超时重传：如果发送方一段时间没有收到某个报文的 &lt;code&gt;ACK&lt;/code&gt;  确认，则会重新发送数据&lt;/li&gt;
&lt;li&gt;连接管理：三次握手和四次挥手保证连接的建立和释放的可靠性&lt;/li&gt;
&lt;li&gt;流量控制：TCP 协议报文包含 16 位的窗口大小，接收方在发送确认的同时会将自身窗口填入，发送方就根据报文中的窗口大小来控制发送速度&lt;/li&gt;
&lt;li&gt;拥塞控制：&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tcp的流量控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp的流量控制&#34;&gt;#&lt;/a&gt; TCP 的流量控制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP 中的流量控制是通过一个可变的滑动窗口来实现的. TCP 报文段中的窗口大小表示从被确认的字节算起还可以发送的字节数&lt;/li&gt;
&lt;li&gt;发送方的发送窗口内的字节都允许发送，当左部字节已发送并收到确认则窗口右移.&lt;/li&gt;
&lt;li&gt;接受方的接收串口内的字节都允许被接收。当左部字节已经发送确认并收到发送方确认，则窗口右移.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;TCP 流量控制是一个控制发送方发送速度，防止发送方发送速度过快导致接收方无法正确接受（缓存满），是一个局部的控制算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tcp-拥塞控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-拥塞控制&#34;&gt;#&lt;/a&gt; TCP 拥塞控制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;拥塞控制的方法：慢开始，拥塞避免，快重传，快恢复&lt;/li&gt;
&lt;li&gt;慢开始：不确定当前的网络状况，从 1 开始按指数逐渐增大拥塞窗口的大小，以此来探测当前网络的状况.&lt;/li&gt;
&lt;li&gt;拥塞避免：拥塞窗口达到阈值时所采用的策略，拥塞窗口的大小线性增大&lt;/li&gt;
&lt;li&gt;当出现了报文超时重传，当前拥塞窗口变成 1，重新执行慢开始，同时阈值减半&lt;/li&gt;
&lt;li&gt;快重传：当收到三个重复的 &lt;code&gt;ACK确认&lt;/code&gt; 时执行快重传，拥塞窗口减半，此时阈值设置为当前窗口的大小，进入快恢复&lt;/li&gt;
&lt;li&gt;快恢复：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;TCP 拥塞控制同样也是用于控制发送方发送速度，但是出发点是为了缓解整个网络的拥塞，是一个全局的控制算法.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E6%8B%A5%E5%A1%9E%E5%8F%91%E9%80%81.png&#34; alt=&#34;&#34; title=&#34;发生超时重传&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D.png&#34; alt=&#34;&#34; title=&#34;快速恢复&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;tcp重传机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp重传机制&#34;&gt;#&lt;/a&gt; TCP 重传机制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;超时重传&lt;/li&gt;
&lt;li&gt;快速重传&lt;/li&gt;
&lt;li&gt;选择确认重传&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;arq协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arq协议&#34;&gt;#&lt;/a&gt; ARQ 协议&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ARQ：自动重传请求；如果发送方在发送后一段时间内没有收到确认，它通常会重新发送.&lt;br /&gt;
ARQ 协议有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;停止等待 ARQ&lt;/li&gt;
&lt;li&gt;连续 ARQ 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;停止等待 ARQ 协议：发送端维护一个超时计数器，发送端每次发送的报文在得到接收方的确认之后才可以发送下一个数据，超过一定时间没有收到发送方的确认，则需要重新发送。对于发送方收到了多个对同一报文的确认直接丢失。接收方对于接收到重复的报文也直接丢失.&lt;/li&gt;
&lt;li&gt;连续 ARQ 协议：发送端会维护一个窗口，窗口内的分组可以连续发送出去而不需要等待接收端的确认。对于按需到达的分组，接收端会发送最后一个正确到达的分组的确认. （提高信道利用率），会出现回退 N 的现象（当发送端发送了 5 条消息，第三条消息丢失了，接收方只能给接收方发送前两个的确认，而不清楚后三条消息的状态，算法会选择吧后面的三条消息全部重传）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tcp与udp的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp与udp的区别&#34;&gt;#&lt;/a&gt; TCP 与 UDP 的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP 是面向连接的，提供可靠的数据流传输；UDP 是无连接的，数据传输不可靠&lt;/li&gt;
&lt;li&gt;TCP 是面向字节流的，UDP 面向报文&lt;/li&gt;
&lt;li&gt;TCP 提供了流量控制和拥塞控制，而 UDP 没有&lt;/li&gt;
&lt;li&gt;TCP 一般只支持点到点的通信，UDP 支持一对一，一对多的通信&lt;/li&gt;
&lt;li&gt;TCP 首部长度 20~60 字节，UDP 首部长度只有 8 字节&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;运行在 TCP 之上的协议： &lt;code&gt;HTTP&lt;/code&gt; ， &lt;code&gt;HTTPS&lt;/code&gt; ， &lt;code&gt;FTP&lt;/code&gt; ， &lt;code&gt;SSH&lt;/code&gt; &lt;br /&gt;
 运行在 UDP 之上的协议：DNS， &lt;code&gt;TFTP&lt;/code&gt; &lt;br /&gt;
TCP 应用场景：实时性要求低，准确度要求高（文件传输，收发邮件，远程登录）&lt;br /&gt;
UDP 应用场景：实时性要求高，准确度要求低（在线语音 / 视频）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tcp中的粘包和拆包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp中的粘包和拆包&#34;&gt;#&lt;/a&gt; TCP 中的粘包和拆包&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一个完整的数据报可能会被 TCP 拆分成多个包进行发送，也可能把多个小的包封装成一个大的数据包发送&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为什么会产生拆包和粘包&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;TCP 是基于字节流的&lt;/li&gt;
&lt;li&gt;要发送的数据大于 TCP 发送缓冲区剩余空间大小时，将会发生拆包&lt;/li&gt;
&lt;li&gt;待发送的数据长度大于最大报文长度 &lt;code&gt;MSS&lt;/code&gt; （TCP 报文长度 + TCP 首部长度 &amp;gt; MSS），TCP 在传输过程中会发生拆包&lt;/li&gt;
&lt;li&gt;要发送的数据小于 TCP 发送缓冲区大小时，将会发生粘包&lt;/li&gt;
&lt;li&gt;接收端没有及时读取接收端缓存内的数据，将会发生粘包&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何解决&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在数据尾部增加特殊的字符进行分割&lt;/li&gt;
&lt;li&gt;发送端将每个数据包封装成固定大小&lt;/li&gt;
&lt;li&gt;将数据分为两部分，一部分是头部，一部分是内容体；其中头部结构大小固定，且有一个字段声明内容体的大小&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tcp校验和采用什么算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp校验和采用什么算法&#34;&gt;#&lt;/a&gt; TCP 校验和采用什么算法&lt;/h2&gt;
&lt;h2 id=&#34;既然tcp保证了可靠传输为什么应用层还需要做校验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#既然tcp保证了可靠传输为什么应用层还需要做校验&#34;&gt;#&lt;/a&gt; 既然 TCP 保证了可靠传输，为什么应用层还需要做校验？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;TCP&lt;/code&gt;  的传输确认机制是可靠的，但是 &lt;code&gt;TCP&lt;/code&gt;  的数据完整性的效验是不可靠的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TCP&lt;/code&gt;  能保证端到端的正确传输，但是交付到应用程序，应用程序是否能做出正确的处理（程序是否有 &lt;code&gt;bug&lt;/code&gt; ） &lt;code&gt;TCP&lt;/code&gt;  无法保证，需要应用层自己保证&lt;/li&gt;
&lt;li&gt;设备故障，写入缓存的数据丢失&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;浏览器请求一个网址的过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器请求一个网址的过程&#34;&gt;#&lt;/a&gt; 浏览器请求一个网址的过程&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先通过 &lt;code&gt;DNS&lt;/code&gt;  将域名解析为 &lt;code&gt;IP地址&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;与服务器通过三次握手，建立 TCP 连接&lt;/li&gt;
&lt;li&gt;服务器处理 http 请求，返回 http 响应&lt;/li&gt;
&lt;li&gt;浏览器解析并渲染页面&lt;/li&gt;
&lt;li&gt;TCP 四次挥手断开连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/HTTP.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个过程所使用的协议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS&lt;/li&gt;
&lt;li&gt;TCP&lt;/li&gt;
&lt;li&gt;IP&lt;/li&gt;
&lt;li&gt;OPSF&lt;/li&gt;
&lt;li&gt;ARP&lt;/li&gt;
&lt;li&gt;HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;http协议中请求的方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http协议中请求的方式&#34;&gt;#&lt;/a&gt; http 协议中请求的方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt; 、 &lt;code&gt;POST&lt;/code&gt; 、 &lt;code&gt;HEAD&lt;/code&gt; 、 &lt;code&gt;PUT&lt;/code&gt; 、 &lt;code&gt;DELETE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常用的服务对应的端口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用的服务对应的端口&#34;&gt;#&lt;/a&gt; 常用的服务对应的端口&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FTP&lt;/code&gt; ：21&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh&lt;/code&gt; ：22&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP&lt;/code&gt; ：80&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTPS&lt;/code&gt; ：443&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MySQL&lt;/code&gt; ：3306&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;get与post的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#get与post的区别&#34;&gt;#&lt;/a&gt; GET 与 POST 的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;安全性： &lt;code&gt;GET&lt;/code&gt;  提交的数据会出现在 URL 内，相对不安全； &lt;code&gt;POST&lt;/code&gt;  提交的数据会在报文体内，相对安全&lt;/li&gt;
&lt;li&gt;数据流： &lt;code&gt;GET&lt;/code&gt;  传输的数据受限与 URL 的长度，而 &lt;code&gt;POST&lt;/code&gt;  没有这种限制&lt;/li&gt;
&lt;li&gt;一般而言 &lt;code&gt;GET&lt;/code&gt;  从服务器上获取资源，而 &lt;code&gt;POST&lt;/code&gt;  更新服务器上的资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http响应码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http响应码&#34;&gt;#&lt;/a&gt; http 响应码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1××&lt;/code&gt; ：提示信息，表示协议处于中间状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2××&lt;/code&gt; ：成功，报文被正确的接收和处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3××&lt;/code&gt; ：重定向，资源位置发生变动，需要客户端重新发送请求（ &lt;code&gt;301&lt;/code&gt;  永久性移动， &lt;code&gt;302&lt;/code&gt;  临时性移动）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4××&lt;/code&gt; ：客户端错误，请求的报文有误，服务器无法处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5××&lt;/code&gt; ：服务端错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http有哪些常见的字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http有哪些常见的字段&#34;&gt;#&lt;/a&gt; http 有哪些常见的字段&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HOST&lt;/code&gt; ：服务器域名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-Length&lt;/code&gt; ：服务器返回响应时，该字段表示回应的数据长度&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何理解http协议的无连接无状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何理解http协议的无连接无状态&#34;&gt;#&lt;/a&gt; 如何理解 http 协议的 &amp;quot;无连接，无状态&amp;quot;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无状态：在 http 协议中服务端不会保留客户端的任何信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;浏览器第一次发送请求给服务器时，服务器响应了；如果之后再次发送第二次请求给服务器，它还是会响应，但是服务器并不知道两次请求来着同一个客户端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http的长连接与短连接的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http的长连接与短连接的区别&#34;&gt;#&lt;/a&gt; http 的长连接与短连接的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在早期的 &lt;code&gt;http/1.0&lt;/code&gt;  默认使用的是短连接，每次客户端与服务端进行一次 http 操作，就建立一次连接，任务结束就中断连接&lt;/li&gt;
&lt;li&gt;从 &lt;code&gt;http/1.1&lt;/code&gt;  起，默认使用的长连接。响应报文中 &lt;code&gt;Connection:keep-alive&lt;/code&gt; ， &lt;code&gt;keep-alive&lt;/code&gt;  具有一个保持时间.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http10-11-20的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http10-11-20的区别&#34;&gt;#&lt;/a&gt; HTTP/1.0、1.1、2.0 的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP/1.0&lt;/code&gt; ：默认短连接，可以设置 &lt;code&gt;Connection:keep-alive&lt;/code&gt;  强制长连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP/1.1&lt;/code&gt; ：默认长连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP/2.0&lt;/code&gt; ：采用了多路复用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;https协议的流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#https协议的流程&#34;&gt;#&lt;/a&gt; HTTPS 协议的流程&lt;/h2&gt;
&lt;h2 id=&#34;http与https的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http与https的区别&#34;&gt;#&lt;/a&gt; http 与 https 的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;http 的缺点&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;明文传输，内容可能被窃听&lt;/li&gt;
&lt;li&gt;通信双方没有身份认证&lt;/li&gt;
&lt;li&gt;无法验证报文的完整性&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;https 的改进&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;加密：客户端通过 &lt;code&gt;SSL/TLS&lt;/code&gt;  将报文内容进行加密，服务端界面（运输层与网络层之间加上 SSL/TLS 网络协议）&lt;/li&gt;
&lt;li&gt;身份认证：通过值得信赖的第三方机构颁布的证书来确认双方的身份.&lt;/li&gt;
&lt;li&gt;完整新保护。通过 MD5 等散列码进行通信内存的校验&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;https 主要工作流程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发起 https 请求，连接到服务端的 443 端口&lt;/li&gt;
&lt;li&gt;服务端将自己的数字证书发送给客户端（）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;session与cookie&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session与cookie&#34;&gt;#&lt;/a&gt; Session 与 Cookie&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cookie&lt;/code&gt; ：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;session&lt;/code&gt; ：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Cookie&lt;/code&gt;  存储在客户端， &lt;code&gt;Session&lt;/code&gt;  存储在服务端&lt;/li&gt;
&lt;li&gt;有效期不同.  &lt;code&gt;Cookie&lt;/code&gt;  一般可以设置为长时间保持， &lt;code&gt;Session&lt;/code&gt;  一般有效期较短&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关联：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户第一次请求服务器时，服务器根据用户提交的信息，创建响应的 &lt;code&gt;Session&lt;/code&gt; ，并返回此 &lt;code&gt;Session&lt;/code&gt;  的唯一标识 &lt;code&gt;Session ID&lt;/code&gt;  给客户端；客户端在接收到服务器返回的 &lt;code&gt;Session ID&lt;/code&gt;  后将其保存在 &lt;code&gt;Cookie&lt;/code&gt;  中，同时绑定当前的域名.&lt;/li&gt;
&lt;li&gt;当用户第二次请求服务器时，请求会自动判断此域名狭隘是否存在 &lt;code&gt;Cookie&lt;/code&gt;  信息，如果存在则自动将 &lt;code&gt;Cookie&lt;/code&gt;  信息发送给服务端；服务端会从 &lt;code&gt;Cookie&lt;/code&gt;  中获取 &lt;code&gt;Session ID&lt;/code&gt;  并查找对应的 &lt;code&gt;Session&lt;/code&gt;  信息，如果没有找到，说明用户没有登陆或者登陆失效，如果找到了，说明用户已经登陆可直接执行响应操作.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;分布式环境下 &lt;code&gt;Session&lt;/code&gt;  怎么处理？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用 &lt;code&gt;Redis&lt;/code&gt;  等分布式缓存来存储 &lt;code&gt;Session&lt;/code&gt;  信息，在多态服务器之间共享&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;dns域名系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns域名系统&#34;&gt;#&lt;/a&gt; DNS 域名系统&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;对于人而言记忆一串有意义的字符串要比记忆一组无规律的数字要容易的多；DNS，即为域名系统，是一个由域名到 IP 地址的分布式数据库，可以方便的完成域名到 IP 的转换.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/dns.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作原理
&lt;ol&gt;
&lt;li&gt;当用户输入域名时，浏览器先检查自己的缓存是否包含这个域名的映射。如有则解析结束&lt;/li&gt;
&lt;li&gt;检查操作系统缓存中是否（Windows 的 hosts）有该域名的映射&lt;/li&gt;
&lt;li&gt;向本地域名服务器发送解析请求，查找是否有对应的域名映射&lt;/li&gt;
&lt;li&gt;本地域名服务器依次向根域名服务器、顶级域名服务器、权限域名服务器发送请求，直到找到域名的映射&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;arp协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arp协议&#34;&gt;#&lt;/a&gt; ARP 协议&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;网络层的 IP 报文向下需要封装成帧，需要添加以太网头部，这就需要知道节点的 MAC 地址；ARP 的作用就是完成 IP 地址到 MAC 地址的转化协议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;首先每个主机都会维护一张 ARP 列表，用于存储 IP 地址到 MAC 地址的映射&lt;/li&gt;
&lt;li&gt;源主机发送数据时，首先检查 ARP 列表内是否有目的地址的 MAC 地址，如果有，则写入以太网头部，并发送帧。如果没有，主机以广播的形式发送 ARP 数据报，数据报内源主机 IP 地址，源主机 MAC 地址，目的主机的 IP 地址&lt;/li&gt;
&lt;li&gt;当网络中的主机收到 ARP 数据包时，首先检查报文中的 IP 地址是否是自己，如果不是则丢弃该报文；否则将自己的 MAC 地址写入 ARP 响应报文中，同时将源主机的 IP 地址和 MAC 地址键值对写入自己的 ARP 列表中.&lt;/li&gt;
&lt;li&gt;源主机收到 ARP 响应报文后，将目的主机的 IP 地址和 MAC 地址写入自身的 APR 列表中，并写入以太网头部，发送该帧.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ipv4地址不够如何解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipv4地址不够如何解决&#34;&gt;#&lt;/a&gt; IPV4 地址不够如何解决&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DHCP&lt;/code&gt; ：动态主机配置协议。动态分配 IP 地址，只给接入网络的设备分配 IP 地址.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NAT&lt;/code&gt; ：网络地址转换协议.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IPV6&lt;/code&gt; ：&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么既有mac地址又有ip地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么既有mac地址又有ip地址&#34;&gt;#&lt;/a&gt; 为什么既有 MAC 地址，又有 IP 地址&lt;/h2&gt;
&lt;h2 id=&#34;icmp协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#icmp协议&#34;&gt;#&lt;/a&gt; ICMP 协议&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;面向无连接，用于传输错误报告控制信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ICMP差错报告报文&lt;/code&gt; ：终点不可达、时间超时、改变路由、参数问题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ICMP询问报文&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对称秘钥加密和非对称秘钥加密&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对称秘钥加密和非对称秘钥加密&#34;&gt;#&lt;/a&gt; 对称秘钥加密和非对称秘钥加密&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;对称秘钥加密&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;加密和解密使用同一种秘钥，运算速度快，但是无法安全的将秘钥传递给通信方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非对称加密&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;加密和解密使用不同的秘钥，运算速度慢&lt;/p&gt;
&lt;p&gt;通信方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信的内容后使用私有密钥解密&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;liunx下网络配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#liunx下网络配置&#34;&gt;#&lt;/a&gt; Liunx 下网络配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifconfig&lt;/code&gt;  或 &lt;code&gt;ip&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考博文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考博文&#34;&gt;#&lt;/a&gt; 参考博文&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MveUFsRXJsQzA5R25qYVZ2d1VvM0FjZw==&#34;&gt;面渣逆袭：计算机网络六十二问，三万字图文详解！速收藏！ (qq.com)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pbnRlcnZpZXdndWlkZS5jbi9ub3Rlcy8wMy1odW50aW5nX2pvYi8wMi1pbnRlcnZpZXcvMDMtMDEtbmV0Lmh0bWw=&#34;&gt;计算机网络 - 01-20 | 阿秀的学习笔记 (interviewguide.cn)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;[3] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpVME9URTRNell6TXc9PSZhbXA7bWlkPTIyNDc1MTc5NjkmYW1wO2lkeD0zJmFtcDtzbj1hMGZjODgxMTE0OTJmNTUyOWZlZjE0MDA4YTFiYjQ1MSZhbXA7Y2hrc209ZmJiMTBlZWZjY2M2ODdmOThlZGE2YzhkN2Q3M2UyNTFkOWRjNTk3YmJlY2U0ZTU0ZDUxYjc2MDczOTdiNTI2YzU5NTQ1MjgxNWU3MSZhbXA7c2NlbmU9Mjc=&#34;&gt;2W 字！梳理 50 道经典计算机网络面试题（收藏版） (qq.com)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
