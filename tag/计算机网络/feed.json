{
    "version": "https://jsonfeed.org/version/1",
    "title": "繁華落盡 似水流年 • All posts by \"计算机网络\" tag",
    "description": "编程日记 & 随笔",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98",
            "url": "http://example.com/value/%E6%A0%A1%E6%8B%9B%E4%B8%8E%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98",
            "title": "计算机网络面试题",
            "date_published": "2024-03-07T09:23:50.257Z",
            "content_html": "<h2 id=\"tcpip四层模型osi七层模型\"><a class=\"anchor\" href=\"#tcpip四层模型osi七层模型\">#</a> TCP/IP 四层模型，OSI 七层模型</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.png\" alt=\"\" /></p>\n<h2 id=\"tcp连接建立三次握手\"><a class=\"anchor\" href=\"#tcp连接建立三次握手\">#</a> TCP 连接建立（三次握手）</h2>\n<ol>\n<li>客户端（client）建立连接， <code>SYN=1</code> ，发送后状态变成 <code>SYN_SEND</code></li>\n<li>服务端（server）收到后，同意建立连接， <code>ACK=1, SYN=1</code> ，发送完成后状态变成 <code>SYN_RCVD</code></li>\n<li>客户端（client）收到后，状态变成 <code>ESTABLISHED</code> ，返回 <code>ACK=1</code>  给服务端；服务端（server）收到后，状态也变成 <code>ESTABLISHED</code> ，连接建立成功.</li>\n</ol>\n<blockquote>\n<p>TCP 连接建立为什么是 3 次，不是两次或者四次？</p>\n<ul>\n<li>TCP 是全双工传输模式，它们双方即是客户端也是服务端，需要建立双向的连接；如果只有两次，无法做到双向连接，而建立连接时，服务端发送确定的同时将 <code>SYN=1</code> ，确认和建立连接的请求合并了，所以也不需要 4 次.</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png\" alt=\"\" /></p>\n<h2 id=\"半连接队列和syn-flood攻击\"><a class=\"anchor\" href=\"#半连接队列和syn-flood攻击\">#</a> 半连接队列和 SYN Flood 攻击</h2>\n<ul>\n<li>\n<p>半连接队列</p>\n<blockquote>\n<p>服务端在 <code>LISTEN</code>  状态时，会在内部维护两个队列：</p>\n<ol>\n<li>半连接队列（ <code>SYN队列</code> ）：三次握手未完成的连接（客户端发送 <code>SYN请求</code> ，服务端接收后，便回复 <code>SYN和ACK</code> ，状态由 <code>LISTEN</code>  态变成 <code>SYN_RCVD</code> ，此时这个连接就被推入半连接队列）</li>\n<li>全连接队列（ <code>ACCEPT队列</code> ）：完成三次握手的链接（客户端回复 <code>ACK</code> ，服务端接受后，三次握手完成，将连接从 <code>SYN队列</code> 中推入 <code>ACCEPT队列</code> ）</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p><code>SYN Flood</code>  攻击</p>\n<blockquote>\n<p>一种典型的 DDos 攻击，在短时间呢伪造不存在的 IP，向服务端发送大量的 <code>SYN</code>  请求；当服务端发送 <code>SYN+ACK</code>  报文后，不会收到 <code>ACK</code>  回应报文，那么 <code>SYN队列</code> 内的连接就不会出队，久而久之会沾满服务器的 <code>SYN队列</code> ，使得正常用户无法正常访问.</p>\n<p>应对方案：</p>\n<ol>\n<li><code>SYN代理防火墙</code> ：对于每一个 <code>SYN请求</code> 进行代理和回应，并保持半连接；等客户端返回 <code>ACK确认</code> 后，再重新构造 <code>SYN</code>  包到服务器，简历真正的 TCP 连接</li>\n</ol>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/SYN_Flood.png\" alt=\"\" /></p>\n<h2 id=\"tcp连接释放四次挥手\"><a class=\"anchor\" href=\"#tcp连接释放四次挥手\">#</a> TCP 连接释放（四次挥手）</h2>\n<ul>\n<li>客户端（client）连接释放，向服务端发送释放连接请求， <code>FIN=1</code> ，此时客户端没有数据需要发送，状态变成 <code>FIN_WAIT_1</code></li>\n<li>服务端（server）收到后，返回一个确认报文 <code>ACK=1</code> ，服务端状态变成 <code>CLOSE_WAIT</code> （服务端可能还没有发送完数据）</li>\n<li>等到服务端（server）发送完所以数据后，向客户端发送连接释放请求， <code>FIN=1</code> ，服务端状态变成 <code>LAST_ACK</code></li>\n<li>客户端收到 <code>ACK=1</code>  确认之后，状态变成 <code>FIN_WAIT_2</code> ；客户端收到服务端释放连接请求后，向服务端发送 <code>ACK=1</code> ，此时客户端状态变成 <code>TIME_WAIT</code> , 等待 2MSL（报文最大生命周期）的时间，才会进入 <code>CLOSED</code>  状态</li>\n</ul>\n<blockquote>\n<p>为什么 TCP 连接释放不能 3 次？</p>\n<ul>\n<li>因为 <code>FIN=1</code>  和 <code>ACK=1</code>  不能同时发送，服务端在收到客户端 <code>FIN=1</code>  后，数据可能没有发送完成.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png\" alt=\"\" /></p>\n<h2 id=\"close_wait与time_wait\"><a class=\"anchor\" href=\"#close_wait与time_wait\">#</a> CLOSE_WAIT 与 TIME_WAIT</h2>\n<ul>\n<li>\n<p><code>CLOSE_WAIT</code>  状态的意义</p>\n<blockquote>\n<p>服务端收到客户端的关闭请求并确认之后，会进入 <code>CLOSE_WAIT</code>  状态。此时服务端可能还有一些数据需要放松，因此不会立马关闭连接，而 <code>CLOSE_WAIT</code>  状态就是为了保证在服务端关闭之前将待发送的数据处理完</p>\n</blockquote>\n</li>\n<li>\n<p><code>TIME_WAIT</code>  状态的意义</p>\n<blockquote>\n<p>客户端在收到客户端的关闭请求并确认之后，会进入 <code>TIME_WAIT</code>  状态</p>\n<ol>\n<li>防止旧连接的数据报。如何客户端最后一次发送 <code>ACK确认</code> 报文之后立马关闭连接，但是此时服务端对应的端口并没有关闭，此时客户端在相同的端口建立新的连接，可能会导致新连接接收到旧连接产生的数据报，导致一些错误</li>\n<li>保证连接的正确关闭。如果客户端的最后一次 <code>ACK确认</code> 报文丢失，由于 TCP 超时重传机制，服务端会重发 <code>FIN报文</code> ；若没有 <code>TIME_WAIT</code>  状态的话，超时重传的 <code>FIN报文</code> 所对应的连接已经关闭，导致服务端没有得到正常的关闭</li>\n</ol>\n<p>为什么等待时间是 <code>2MSL(Maximuxm Segment Lifetime)</code></p>\n<ul>\n<li>保证客户端发送的最后一个 <code>ACK</code>  确认报文能够被服务器正确接收，时服务端可以安全的关闭连接。若最后一个 <code>ACK=1</code>  报文丢失，在 2MSL 内客户端必定察觉，可以重发</li>\n</ul>\n</blockquote>\n<h2 id=\"tcp如何保证传输的可靠性\"><a class=\"anchor\" href=\"#tcp如何保证传输的可靠性\">#</a> TCP 如何保证传输的可靠性</h2>\n<ul>\n<li>校验和：发送放在发送数据时会计算校验和，接收方在接受到数据后同样会检查校验和，如果不一致，那么传输发送了差错</li>\n<li>确认应答、序列号：TCP 对数据报进行了编号，同时接收方在接受了到了后会发送 <code>ack</code>  的确认</li>\n<li>超时重传：如果发送方一段时间没有收到某个报文的 <code>ACK</code>  确认，则会重新发送数据</li>\n<li>连接管理：三次握手和四次挥手保证连接的建立和释放的可靠性</li>\n<li>流量控制：TCP 协议报文包含 16 位的窗口大小，接收方在发送确认的同时会将自身窗口填入，发送方就根据报文中的窗口大小来控制发送速度</li>\n<li>拥塞控制：</li>\n</ul>\n<h2 id=\"tcp的流量控制\"><a class=\"anchor\" href=\"#tcp的流量控制\">#</a> TCP 的流量控制</h2>\n<ul>\n<li>TCP 中的流量控制是通过一个可变的滑动窗口来实现的. TCP 报文段中的窗口大小表示从被确认的字节算起还可以发送的字节数</li>\n<li>发送方的发送窗口内的字节都允许发送，当左部字节已发送并收到确认则窗口右移.</li>\n<li>接受方的接收串口内的字节都允许被接收。当左部字节已经发送确认并收到发送方确认，则窗口右移.</li>\n</ul>\n<blockquote>\n<p>TCP 流量控制是一个控制发送方发送速度，防止发送方发送速度过快导致接收方无法正确接受（缓存满），是一个局部的控制算法</p>\n</blockquote>\n<h2 id=\"tcp-拥塞控制\"><a class=\"anchor\" href=\"#tcp-拥塞控制\">#</a> TCP 拥塞控制</h2>\n<ul>\n<li>拥塞控制的方法：慢开始，拥塞避免，快重传，快恢复</li>\n<li>慢开始：不确定当前的网络状况，从 1 开始按指数逐渐增大拥塞窗口的大小，以此来探测当前网络的状况.</li>\n<li>拥塞避免：拥塞窗口达到阈值时所采用的策略，拥塞窗口的大小线性增大</li>\n<li>当出现了报文超时重传，当前拥塞窗口变成 1，重新执行慢开始，同时阈值减半</li>\n<li>快重传：当收到三个重复的 <code>ACK确认</code> 时执行快重传，拥塞窗口减半，此时阈值设置为当前窗口的大小，进入快恢复</li>\n<li>快恢复：</li>\n</ul>\n<blockquote>\n<p>TCP 拥塞控制同样也是用于控制发送方发送速度，但是出发点是为了缓解整个网络的拥塞，是一个全局的控制算法.</p>\n</blockquote>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/%E6%8B%A5%E5%A1%9E%E5%8F%91%E9%80%81.png\" alt=\"\" title=\"发生超时重传\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D.png\" alt=\"\" title=\"快速恢复\" /></p>\n<h2 id=\"tcp重传机制\"><a class=\"anchor\" href=\"#tcp重传机制\">#</a> TCP 重传机制</h2>\n<ul>\n<li>超时重传</li>\n<li>快速重传</li>\n<li>选择确认重传</li>\n</ul>\n<h2 id=\"arq协议\"><a class=\"anchor\" href=\"#arq协议\">#</a> ARQ 协议</h2>\n<blockquote>\n<p>ARQ：自动重传请求；如果发送方在发送后一段时间内没有收到确认，它通常会重新发送.<br />\nARQ 协议有两种：</p>\n<ul>\n<li>停止等待 ARQ</li>\n<li>连续 ARQ 协议</li>\n</ul>\n</blockquote>\n<ul>\n<li>停止等待 ARQ 协议：发送端维护一个超时计数器，发送端每次发送的报文在得到接收方的确认之后才可以发送下一个数据，超过一定时间没有收到发送方的确认，则需要重新发送。对于发送方收到了多个对同一报文的确认直接丢失。接收方对于接收到重复的报文也直接丢失.</li>\n<li>连续 ARQ 协议：发送端会维护一个窗口，窗口内的分组可以连续发送出去而不需要等待接收端的确认。对于按需到达的分组，接收端会发送最后一个正确到达的分组的确认. （提高信道利用率），会出现回退 N 的现象（当发送端发送了 5 条消息，第三条消息丢失了，接收方只能给接收方发送前两个的确认，而不清楚后三条消息的状态，算法会选择吧后面的三条消息全部重传）</li>\n</ul>\n<h2 id=\"tcp与udp的区别\"><a class=\"anchor\" href=\"#tcp与udp的区别\">#</a> TCP 与 UDP 的区别</h2>\n<ul>\n<li>TCP 是面向连接的，提供可靠的数据流传输；UDP 是无连接的，数据传输不可靠</li>\n<li>TCP 是面向字节流的，UDP 面向报文</li>\n<li>TCP 提供了流量控制和拥塞控制，而 UDP 没有</li>\n<li>TCP 一般只支持点到点的通信，UDP 支持一对一，一对多的通信</li>\n<li>TCP 首部长度 20~60 字节，UDP 首部长度只有 8 字节</li>\n</ul>\n<blockquote>\n<p>运行在 TCP 之上的协议： <code>HTTP</code> ， <code>HTTPS</code> ， <code>FTP</code> ， <code>SSH</code> <br />\n 运行在 UDP 之上的协议：DNS， <code>TFTP</code> <br />\nTCP 应用场景：实时性要求低，准确度要求高（文件传输，收发邮件，远程登录）<br />\nUDP 应用场景：实时性要求高，准确度要求低（在线语音 / 视频）</p>\n</blockquote>\n<h2 id=\"tcp中的粘包和拆包\"><a class=\"anchor\" href=\"#tcp中的粘包和拆包\">#</a> TCP 中的粘包和拆包</h2>\n<blockquote>\n<p>一个完整的数据报可能会被 TCP 拆分成多个包进行发送，也可能把多个小的包封装成一个大的数据包发送</p>\n</blockquote>\n<ul>\n<li>\n<p>为什么会产生拆包和粘包</p>\n<blockquote>\n<ol>\n<li>TCP 是基于字节流的</li>\n<li>要发送的数据大于 TCP 发送缓冲区剩余空间大小时，将会发生拆包</li>\n<li>待发送的数据长度大于最大报文长度 <code>MSS</code> （TCP 报文长度 + TCP 首部长度 &gt; MSS），TCP 在传输过程中会发生拆包</li>\n<li>要发送的数据小于 TCP 发送缓冲区大小时，将会发生粘包</li>\n<li>接收端没有及时读取接收端缓存内的数据，将会发生粘包</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>如何解决</p>\n<blockquote>\n<ol>\n<li>在数据尾部增加特殊的字符进行分割</li>\n<li>发送端将每个数据包封装成固定大小</li>\n<li>将数据分为两部分，一部分是头部，一部分是内容体；其中头部结构大小固定，且有一个字段声明内容体的大小</li>\n</ol>\n</blockquote>\n<h2 id=\"tcp校验和采用什么算法\"><a class=\"anchor\" href=\"#tcp校验和采用什么算法\">#</a> TCP 校验和采用什么算法</h2>\n<h2 id=\"既然tcp保证了可靠传输为什么应用层还需要做校验\"><a class=\"anchor\" href=\"#既然tcp保证了可靠传输为什么应用层还需要做校验\">#</a> 既然 TCP 保证了可靠传输，为什么应用层还需要做校验？</h2>\n<blockquote>\n<ol>\n<li><code>TCP</code>  的传输确认机制是可靠的，但是 <code>TCP</code>  的数据完整性的效验是不可靠的</li>\n<li><code>TCP</code>  能保证端到端的正确传输，但是交付到应用程序，应用程序是否能做出正确的处理（程序是否有 <code>bug</code> ） <code>TCP</code>  无法保证，需要应用层自己保证</li>\n<li>设备故障，写入缓存的数据丢失</li>\n</ol>\n</blockquote>\n<h2 id=\"浏览器请求一个网址的过程\"><a class=\"anchor\" href=\"#浏览器请求一个网址的过程\">#</a> 浏览器请求一个网址的过程</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B.png\" alt=\"\" /></p>\n<ul>\n<li>首先通过 <code>DNS</code>  将域名解析为 <code>IP地址</code></li>\n<li>与服务器通过三次握手，建立 TCP 连接</li>\n<li>服务器处理 http 请求，返回 http 响应</li>\n<li>浏览器解析并渲染页面</li>\n<li>TCP 四次挥手断开连接</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/HTTP.png\" alt=\"\" /></p>\n<blockquote>\n<p>这个过程所使用的协议：</p>\n<ul>\n<li>DNS</li>\n<li>TCP</li>\n<li>IP</li>\n<li>OPSF</li>\n<li>ARP</li>\n<li>HTTP</li>\n</ul>\n</blockquote>\n<h2 id=\"http协议中请求的方式\"><a class=\"anchor\" href=\"#http协议中请求的方式\">#</a> http 协议中请求的方式</h2>\n<ul>\n<li><code>GET</code> 、 <code>POST</code> 、 <code>HEAD</code> 、 <code>PUT</code> 、 <code>DELETE</code></li>\n</ul>\n<h2 id=\"常用的服务对应的端口\"><a class=\"anchor\" href=\"#常用的服务对应的端口\">#</a> 常用的服务对应的端口</h2>\n<ul>\n<li><code>FTP</code> ：21</li>\n<li><code>ssh</code> ：22</li>\n<li><code>HTTP</code> ：80</li>\n<li><code>HTTPS</code> ：443</li>\n<li><code>MySQL</code> ：3306</li>\n<li></li>\n</ul>\n<h2 id=\"get与post的区别\"><a class=\"anchor\" href=\"#get与post的区别\">#</a> GET 与 POST 的区别</h2>\n<ul>\n<li>安全性： <code>GET</code>  提交的数据会出现在 URL 内，相对不安全； <code>POST</code>  提交的数据会在报文体内，相对安全</li>\n<li>数据流： <code>GET</code>  传输的数据受限与 URL 的长度，而 <code>POST</code>  没有这种限制</li>\n<li>一般而言 <code>GET</code>  从服务器上获取资源，而 <code>POST</code>  更新服务器上的资源</li>\n</ul>\n<h2 id=\"http响应码\"><a class=\"anchor\" href=\"#http响应码\">#</a> http 响应码</h2>\n<ul>\n<li><code>1××</code> ：提示信息，表示协议处于中间状态</li>\n<li><code>2××</code> ：成功，报文被正确的接收和处理</li>\n<li><code>3××</code> ：重定向，资源位置发生变动，需要客户端重新发送请求（ <code>301</code>  永久性移动， <code>302</code>  临时性移动）</li>\n<li><code>4××</code> ：客户端错误，请求的报文有误，服务器无法处理</li>\n<li><code>5××</code> ：服务端错误</li>\n</ul>\n<h2 id=\"http有哪些常见的字段\"><a class=\"anchor\" href=\"#http有哪些常见的字段\">#</a> http 有哪些常见的字段</h2>\n<ul>\n<li><code>HOST</code> ：服务器域名</li>\n<li><code>Content-Length</code> ：服务器返回响应时，该字段表示回应的数据长度</li>\n<li></li>\n</ul>\n<h2 id=\"如何理解http协议的无连接无状态\"><a class=\"anchor\" href=\"#如何理解http协议的无连接无状态\">#</a> 如何理解 http 协议的 &quot;无连接，无状态&quot;</h2>\n<ul>\n<li>\n<p>无状态：在 http 协议中服务端不会保留客户端的任何信息</p>\n<blockquote>\n<p>浏览器第一次发送请求给服务器时，服务器响应了；如果之后再次发送第二次请求给服务器，它还是会响应，但是服务器并不知道两次请求来着同一个客户端</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"http的长连接与短连接的区别\"><a class=\"anchor\" href=\"#http的长连接与短连接的区别\">#</a> http 的长连接与短连接的区别</h2>\n<ul>\n<li>在早期的 <code>http/1.0</code>  默认使用的是短连接，每次客户端与服务端进行一次 http 操作，就建立一次连接，任务结束就中断连接</li>\n<li>从 <code>http/1.1</code>  起，默认使用的长连接。响应报文中 <code>Connection:keep-alive</code> ， <code>keep-alive</code>  具有一个保持时间.</li>\n</ul>\n<h2 id=\"http10-11-20的区别\"><a class=\"anchor\" href=\"#http10-11-20的区别\">#</a> HTTP/1.0、1.1、2.0 的区别</h2>\n<ul>\n<li><code>HTTP/1.0</code> ：默认短连接，可以设置 <code>Connection:keep-alive</code>  强制长连接</li>\n<li><code>HTTP/1.1</code> ：默认长连接</li>\n<li><code>HTTP/2.0</code> ：采用了多路复用</li>\n</ul>\n<h2 id=\"https协议的流程\"><a class=\"anchor\" href=\"#https协议的流程\">#</a> HTTPS 协议的流程</h2>\n<h2 id=\"http与https的区别\"><a class=\"anchor\" href=\"#http与https的区别\">#</a> http 与 https 的区别</h2>\n<ul>\n<li>\n<p>http 的缺点</p>\n<blockquote>\n<ol>\n<li>明文传输，内容可能被窃听</li>\n<li>通信双方没有身份认证</li>\n<li>无法验证报文的完整性</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>https 的改进</p>\n<blockquote>\n<ol>\n<li>加密：客户端通过 <code>SSL/TLS</code>  将报文内容进行加密，服务端界面（运输层与网络层之间加上 SSL/TLS 网络协议）</li>\n<li>身份认证：通过值得信赖的第三方机构颁布的证书来确认双方的身份.</li>\n<li>完整新保护。通过 MD5 等散列码进行通信内存的校验</li>\n</ol>\n<p>https 主要工作流程</p>\n<ol>\n<li>客户端发起 https 请求，连接到服务端的 443 端口</li>\n<li>服务端将自己的数字证书发送给客户端（）</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"session与cookie\"><a class=\"anchor\" href=\"#session与cookie\">#</a> Session 与 Cookie</h2>\n<ul>\n<li>\n<p><code>cookie</code> ：</p>\n</li>\n<li>\n<p><code>session</code> ：</p>\n<blockquote>\n<p>区别：</p>\n<ol>\n<li><code>Cookie</code>  存储在客户端， <code>Session</code>  存储在服务端</li>\n<li>有效期不同.  <code>Cookie</code>  一般可以设置为长时间保持， <code>Session</code>  一般有效期较短</li>\n</ol>\n<p>关联：</p>\n<ol>\n<li>用户第一次请求服务器时，服务器根据用户提交的信息，创建响应的 <code>Session</code> ，并返回此 <code>Session</code>  的唯一标识 <code>Session ID</code>  给客户端；客户端在接收到服务器返回的 <code>Session ID</code>  后将其保存在 <code>Cookie</code>  中，同时绑定当前的域名.</li>\n<li>当用户第二次请求服务器时，请求会自动判断此域名狭隘是否存在 <code>Cookie</code>  信息，如果存在则自动将 <code>Cookie</code>  信息发送给服务端；服务端会从 <code>Cookie</code>  中获取 <code>Session ID</code>  并查找对应的 <code>Session</code>  信息，如果没有找到，说明用户没有登陆或者登陆失效，如果找到了，说明用户已经登陆可直接执行响应操作.</li>\n</ol>\n<p>分布式环境下 <code>Session</code>  怎么处理？</p>\n<ul>\n<li>可以使用 <code>Redis</code>  等分布式缓存来存储 <code>Session</code>  信息，在多态服务器之间共享</li>\n</ul>\n</blockquote>\n<h2 id=\"dns域名系统\"><a class=\"anchor\" href=\"#dns域名系统\">#</a> DNS 域名系统</h2>\n<blockquote>\n<p>对于人而言记忆一串有意义的字符串要比记忆一组无规律的数字要容易的多；DNS，即为域名系统，是一个由域名到 IP 地址的分布式数据库，可以方便的完成域名到 IP 的转换.</p>\n</blockquote>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/dns.png\" alt=\"\" /></p>\n<ul>\n<li>工作原理\n<ol>\n<li>当用户输入域名时，浏览器先检查自己的缓存是否包含这个域名的映射。如有则解析结束</li>\n<li>检查操作系统缓存中是否（Windows 的 hosts）有该域名的映射</li>\n<li>向本地域名服务器发送解析请求，查找是否有对应的域名映射</li>\n<li>本地域名服务器依次向根域名服务器、顶级域名服务器、权限域名服务器发送请求，直到找到域名的映射</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F.png\" alt=\"\" /></p>\n<h2 id=\"arp协议\"><a class=\"anchor\" href=\"#arp协议\">#</a> ARP 协议</h2>\n<blockquote>\n<p>网络层的 IP 报文向下需要封装成帧，需要添加以太网头部，这就需要知道节点的 MAC 地址；ARP 的作用就是完成 IP 地址到 MAC 地址的转化协议</p>\n</blockquote>\n<ul>\n<li>首先每个主机都会维护一张 ARP 列表，用于存储 IP 地址到 MAC 地址的映射</li>\n<li>源主机发送数据时，首先检查 ARP 列表内是否有目的地址的 MAC 地址，如果有，则写入以太网头部，并发送帧。如果没有，主机以广播的形式发送 ARP 数据报，数据报内源主机 IP 地址，源主机 MAC 地址，目的主机的 IP 地址</li>\n<li>当网络中的主机收到 ARP 数据包时，首先检查报文中的 IP 地址是否是自己，如果不是则丢弃该报文；否则将自己的 MAC 地址写入 ARP 响应报文中，同时将源主机的 IP 地址和 MAC 地址键值对写入自己的 ARP 列表中.</li>\n<li>源主机收到 ARP 响应报文后，将目的主机的 IP 地址和 MAC 地址写入自身的 APR 列表中，并写入以太网头部，发送该帧.</li>\n</ul>\n<h2 id=\"ipv4地址不够如何解决\"><a class=\"anchor\" href=\"#ipv4地址不够如何解决\">#</a> IPV4 地址不够如何解决</h2>\n<ul>\n<li><code>DHCP</code> ：动态主机配置协议。动态分配 IP 地址，只给接入网络的设备分配 IP 地址.</li>\n<li><code>NAT</code> ：网络地址转换协议.</li>\n<li><code>IPV6</code> ：</li>\n</ul>\n<h2 id=\"为什么既有mac地址又有ip地址\"><a class=\"anchor\" href=\"#为什么既有mac地址又有ip地址\">#</a> 为什么既有 MAC 地址，又有 IP 地址</h2>\n<h2 id=\"icmp协议\"><a class=\"anchor\" href=\"#icmp协议\">#</a> ICMP 协议</h2>\n<blockquote>\n<p>面向无连接，用于传输错误报告控制信息</p>\n</blockquote>\n<ul>\n<li><code>ICMP差错报告报文</code> ：终点不可达、时间超时、改变路由、参数问题</li>\n<li><code>ICMP询问报文</code></li>\n</ul>\n<h2 id=\"对称秘钥加密和非对称秘钥加密\"><a class=\"anchor\" href=\"#对称秘钥加密和非对称秘钥加密\">#</a> 对称秘钥加密和非对称秘钥加密</h2>\n<ul>\n<li>\n<p><code>对称秘钥加密</code></p>\n<blockquote>\n<p>加密和解密使用同一种秘钥，运算速度快，但是无法安全的将秘钥传递给通信方</p>\n</blockquote>\n</li>\n<li>\n<p>非对称加密</p>\n<blockquote>\n<p>加密和解密使用不同的秘钥，运算速度慢</p>\n<p>通信方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信的内容后使用私有密钥解密</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"liunx下网络配置\"><a class=\"anchor\" href=\"#liunx下网络配置\">#</a> Liunx 下网络配置</h2>\n<ul>\n<li><code>ifconfig</code>  或 <code>ip</code></li>\n</ul>\n<h2 id=\"参考博文\"><a class=\"anchor\" href=\"#参考博文\">#</a> 参考博文</h2>\n<ul>\n<li>[1] <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MveUFsRXJsQzA5R25qYVZ2d1VvM0FjZw==\">面渣逆袭：计算机网络六十二问，三万字图文详解！速收藏！ (qq.com)</span></li>\n<li>[2] <span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbnRlcnZpZXdndWlkZS5jbi9ub3Rlcy8wMy1odW50aW5nX2pvYi8wMi1pbnRlcnZpZXcvMDMtMDEtbmV0Lmh0bWw=\">计算机网络 - 01-20 | 阿秀的学习笔记 (interviewguide.cn)</span></li>\n<li>[3] <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpVME9URTRNell6TXc9PSZhbXA7bWlkPTIyNDc1MTc5NjkmYW1wO2lkeD0zJmFtcDtzbj1hMGZjODgxMTE0OTJmNTUyOWZlZjE0MDA4YTFiYjQ1MSZhbXA7Y2hrc209ZmJiMTBlZWZjY2M2ODdmOThlZGE2YzhkN2Q3M2UyNTFkOWRjNTk3YmJlY2U0ZTU0ZDUxYjc2MDczOTdiNTI2YzU5NTQ1MjgxNWU3MSZhbXA7c2NlbmU9Mjc=\">2W 字！梳理 50 道经典计算机网络面试题（收藏版） (qq.com)</span></li>\n</ul>\n",
            "tags": [
                "面试题",
                "计算机网络"
            ]
        }
    ]
}