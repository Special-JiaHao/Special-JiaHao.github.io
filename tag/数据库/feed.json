{
    "version": "https://jsonfeed.org/version/1",
    "title": "繁華落盡 似水流年 • All posts by \"数据库\" tag",
    "description": "编程日记 & 随笔",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/value/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95",
            "url": "http://example.com/value/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95",
            "title": "MySQL基础语法",
            "date_published": "2024-03-30T01:58:45.307Z",
            "content_html": "<h1 id=\"mysql基础语法\"><a class=\"anchor\" href=\"#mysql基础语法\">#</a> MySQL 基础语法</h1>\n<h2 id=\"create创建数据库\"><a class=\"anchor\" href=\"#create创建数据库\">#</a>  <code>create</code>  创建数据库</h2>\n<p>建数据库基本语法：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span><span class=\"token punctuation\">]</span> database_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> charset_name<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">collate</span> collation_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 如果创建的 database_name 已存在，则执行会导致错误。添加 if not exists 可以避免</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># charset_name 可以指定字符集（？）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># collation_name 指定排列规则（？）</span></pre></td></tr></table></figure><h2 id=\"drop删除数据库\"><a class=\"anchor\" href=\"#drop删除数据库\">#</a>  <code>drop</code>  删除数据库</h2>\n<p>使用普通用户登录 <code>MySQL</code>  服务器，需要特定的权限才可以删除或创建数据库.</p>\n<p>删除数据库基本语法：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">database</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span><span class=\"token punctuation\">]</span> database_name<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"use选择数据库\"><a class=\"anchor\" href=\"#use选择数据库\">#</a>  <code>use</code>  选择数据库</h2>\n<p>选择数据库基础语法：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">use</span> database_name</pre></td></tr></table></figure><h2 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h2>\n<ul>\n<li>\n<p>数值类型</p>\n<blockquote>\n<ol>\n<li><code>tinyint</code> ：1 字节.</li>\n<li><code>smallint</code> ：2 字节</li>\n<li><code>mediumint</code> ：3 字节</li>\n<li><code>int</code> ：4 字节</li>\n<li><code>bigint</code> ：8 字节</li>\n<li><code>float</code> ：4 字节，单精度浮点数</li>\n<li><code>double</code> ：8 字节，双进度浮点数</li>\n<li><code>decimal</code></li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>日期和时间类型</p>\n</li>\n<li>\n<p>字符串类型</p>\n<blockquote>\n<ol>\n<li><code>char</code> ：</li>\n<li><code>varchar</code></li>\n<li></li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"create创建数据库表\"><a class=\"anchor\" href=\"#create创建数据库表\">#</a>  <code>create</code>  创建数据库表</h2>\n<p>创建数据库表基本语法：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> table_name&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tcoloumn1 datatype<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcolomun2 datatype<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> charset_name<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">collate</span> collation_name<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">engine</span><span class=\"token operator\">=</span>engine_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>字段属性：</p>\n<ul>\n<li><code>Primary key</code> ：主键</li>\n<li><code>auto_increment</code> ：自增，一般用于主键</li>\n<li><code>not null</code> ：非空，若输入的记录该字段为空，则会报错</li>\n</ul>\n<h2 id=\"drop删除数据库表\"><a class=\"anchor\" href=\"#drop删除数据库表\">#</a>  <code>drop</code>  删除数据库表</h2>\n<p>删除数据库表基本语法：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span><span class=\"token punctuation\">]</span> table_name<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"alter修改表\"><a class=\"anchor\" href=\"#alter修改表\">#</a>  <code>alter</code>  修改表</h2>\n<p>修改表结构基本语法</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> table_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">add</span> column_name datatype</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">column</span> column_name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">modify</span> <span class=\"token keyword\">column</span> column_name datatype</pre></td></tr></table></figure><h2 id=\"insert插入数据\"><a class=\"anchor\" href=\"#insert插入数据\">#</a>  <code>insert</code>  插入数据</h2>\n<p>插入数据基本语法：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> table_name<span class=\"token punctuation\">(</span>column1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span>values1<span class=\"token punctuation\">,</span> values2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">[</span><span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span>values1<span class=\"token punctuation\">,</span> values2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果主键为自增的列，可使用 <code>NULL</code>  占位符替代</p>\n<h2 id=\"delete删除数据\"><a class=\"anchor\" href=\"#delete删除数据\">#</a>  <code>delete</code>  删除数据</h2>\n<p>删除记录基本语法：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">delete</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> table_name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> condition<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"select查询数据\"><a class=\"anchor\" href=\"#select查询数据\">#</a>  <code>select</code>  查询数据</h2>\n<p>查询语句基本语法：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> column1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> table_name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">where</span> condition<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> column_name <span class=\"token punctuation\">[</span><span class=\"token keyword\">ASC</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">limit</span> number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\"># 用于限制返回的行数</span></pre></td></tr></table></figure><h2 id=\"wherer子句\"><a class=\"anchor\" href=\"#wherer子句\">#</a>  <code>wherer</code>  子句</h2>\n<p>where 用法：</p>\n<ul>\n<li>\n<p>可用于 <code>delete</code>  或 <code>update</code>  操作</p>\n</li>\n<li>\n<p>查询语句中你可以使用一个或者多个表，表之间使用逗号 **,** 分割，并使用 WHERE 语句来设定查询条件</p>\n</li>\n<li>\n<p>可以在 WHERE 子句中指定任何条件</p>\n<blockquote>\n<ol>\n<li>等于条件 <code>=</code></li>\n<li>不能与条件 <code>!=</code> 、 <code>&lt;&gt;</code></li>\n<li>大于条件 <code>&gt;</code></li>\n<li>大于等于条件 <code>&gt;=</code></li>\n<li>小于条件 <code>&lt;</code></li>\n<li>小于等于条件 <code>&lt;=</code></li>\n<li>组合条件 <code>and</code> 、 <code>or</code></li>\n<li>模糊匹配 <code>like</code></li>\n<li><code>in</code></li>\n<li><code>not</code></li>\n<li><code>not in</code></li>\n<li><code>between</code></li>\n<li><code>is null</code></li>\n<li><code>is not null</code></li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"update更新\"><a class=\"anchor\" href=\"#update更新\">#</a>  <code>update</code>  更新</h2>\n<p>记录更新基本语法：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">update</span> table_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span> column1 <span class=\"token operator\">=</span> value1<span class=\"token punctuation\">,</span> column2 <span class=\"token operator\">=</span> value2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> condition<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"like子句\"><a class=\"anchor\" href=\"#like子句\">#</a>  <code>like</code>  子句</h2>\n<p>模式串的语法：</p>\n<ul>\n<li><code>%</code> ：表示零个或者多个字符</li>\n<li><code>_</code> ：表示一个字符</li>\n</ul>\n<h2 id=\"union\"><a class=\"anchor\" href=\"#union\">#</a>  <code>union</code></h2>\n<p><code>union</code>  用于连接两个或者两个以上的 <code>select</code>  语句的结果，组成一个集合（取出重复行）；使用 <code>union all</code>  可以不去除重复的行</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> column1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> table1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> condition1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">select</span> column1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> table2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">where</span> condition2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> column1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"order-by语句\"><a class=\"anchor\" href=\"#order-by语句\">#</a>  <code>order by</code>  语句</h2>\n<p><code>order by</code>  默认升序排序</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> column1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> table_name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> column1 <span class=\"token punctuation\">[</span><span class=\"token keyword\">ASC</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> column2 <span class=\"token punctuation\">[</span><span class=\"token keyword\">ASC</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 可以使用数子替换列名（数字表示列的位置）</span></pre></td></tr></table></figure><ul>\n<li>可以使用 <code>nulls first</code>  或 <code>nulls last</code>  来处理 <code>null</code>  值</li>\n</ul>\n<h2 id=\"group-by分组\"><a class=\"anchor\" href=\"#group-by分组\">#</a>  <code>group by</code>  分组</h2>\n<p><code>group by</code>  语句是根据一个或多个列对结果集进行分组，在分组的列上我们可以使用 <code>sum、count、avg</code>  等函数，其基本语法：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> column1<span class=\"token punctuation\">,</span> aggregate_function<span class=\"token punctuation\">(</span>column2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> table_name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> condition</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> column1</pre></td></tr></table></figure><ul>\n<li>\n<p><code>with rollup</code>  可以实现在分组统计数据基础上再进行相同的统计，例如：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql<span class=\"token operator\">></span> <span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">coalesce</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'总数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>signin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> signin_count <span class=\"token keyword\">FROM</span>  employee_tbl <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> name <span class=\"token keyword\">WITH ROLLUP</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------------------------+--------------+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> <span class=\"token keyword\">coalesce</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'总数'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> signin_count <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------------------------+--------------+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> 小丽                   <span class=\"token operator\">|</span>            <span class=\"token number\">2</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> 小明                   <span class=\"token operator\">|</span>            <span class=\"token number\">7</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span> 小王                   <span class=\"token operator\">|</span>            <span class=\"token number\">7</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span> 总数                   <span class=\"token operator\">|</span>           <span class=\"token number\">16</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">--------------------------+--------------+</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"having\"><a class=\"anchor\" href=\"#having\">#</a>  <code>having</code></h2>\n<p><code>having</code>  作为 <code>where</code>  的补充功能， <code>having</code>  子句中可以使用聚集函数</p>\n<h2 id=\"连接\"><a class=\"anchor\" href=\"#连接\">#</a> 连接</h2>\n<p>JOIN 按照功能大致分为如下几类：</p>\n<ul>\n<li>\n<p><code>inner join</code> ：内连接 / 等值连接，返回两个表中满足连接条件的匹配行</p>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/inner_join.png\" alt=\"\" /></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> column1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> table1 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">inner</span> <span class=\"token keyword\">join</span> table2 <span class=\"token keyword\">on</span> table1<span class=\"token punctuation\">.</span>column_name <span class=\"token operator\">=</span> table2<span class=\"token punctuation\">.</span>column_name</pre></td></tr></table></figure></li>\n<li>\n<p><code>left join</code> ：返回左表的所有行，并包括右表中匹配的行，如果右表中没有匹配的行，将使用 <code>null</code>  填充相应字段</p>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/left_join.png\" alt=\"\" /></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> column1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> table1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> table2 <span class=\"token keyword\">on</span> table1<span class=\"token punctuation\">.</span>column_name <span class=\"token operator\">=</span> table2<span class=\"token punctuation\">.</span>column_name</pre></td></tr></table></figure></li>\n<li>\n<p><code>right join</code> ：返回右表的所以行，并包含左表匹配的行，如果左表中没有匹配的行，将使用 <code>null</code>  填充相应字段</p>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/right_join.png\" alt=\"\" /></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> column1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> table1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">right</span> <span class=\"token keyword\">join</span> table2 <span class=\"token keyword\">on</span> table1<span class=\"token punctuation\">.</span>column_name <span class=\"token operator\">=</span> table2<span class=\"token punctuation\">.</span>column_name</pre></td></tr></table></figure></li>\n<li>\n<p><code>cross join</code> ：对两个表做一个笛卡尔积，最终返回的表的记录可能非常大</p>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/cross_join.png\" alt=\"\" /></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> olumn1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> table1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">CROSS</span> <span class=\"token keyword\">JOIN</span> table2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>slef join</code> ：自连接</p>\n</li>\n</ul>\n<h2 id=\"null值的处理\"><a class=\"anchor\" href=\"#null值的处理\">#</a>  <code>null</code>  值的处理</h2>\n<p>在 <code>MySQL</code>  中 <code>null</code>  表示缺失或未知的数据，处理 <code>null</code>  值需要特别处理，在  <code>MySQL</code>  中， <code>NULL</code>  值与任何其它值的比较（即使是  <code>NULL</code> ）永远返回  <code>NULL</code> ，即  <code>NULL = NULL</code>  返回  <code>NULL</code></p>\n<p><strong>MySQL 中处理 NULL 值的常见注意事项和技巧</strong></p>\n<ul>\n<li>\n<p><code>is null</code></p>\n</li>\n<li>\n<p><code>is not null</code></p>\n</li>\n<li>\n<p><code>&lt;=&gt;</code> ：比较操作符（不同于 = 运算符），当比较的的两个值相等或者都为 NULL 时返回 true</p>\n</li>\n<li>\n<p>使用 <code>coalesce</code>  函数替换 <code>null</code>  值，它接收 <code>多个参数</code> ，返回参数列表中第一个非 <code>null</code>  的值</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> product_name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">COALESCE</span><span class=\"token punctuation\">(</span>column1<span class=\"token punctuation\">,</span> column1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> actual_quantity</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 <code>ifnull</code>  函数处理 <code>null</code> ， <code>ifnull</code>  函数是 <code>coalesce</code>  的 MySQL 特定版本，它接受两个参数，如果第一个参数为 NULL，则返回第二个参数</p>\n</li>\n<li>\n<p><code>null</code>  排序，在使用 <code>order by</code>  子句进行排序时， <code>null</code>  会默认排在最后。如果希望 <code>null</code>  排在前面，可以使用 <code>NULLS FIRST</code></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> product_name<span class=\"token punctuation\">,</span> price</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> products</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">ASC</span> NULLS <span class=\"token keyword\">FIRST</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>聚合函数 <code>count/sum/avg</code>  会忽略 <code>null</code>  值，如果希望将 <code>null</code>  视为 0，可以使用 <code>coalesce</code>  或 <code>ifnull</code></p>\n</li>\n</ul>\n<h2 id=\"exists\"><a class=\"anchor\" href=\"#exists\">#</a>  <code>exists</code></h2>\n<h2 id=\"any-all\"><a class=\"anchor\" href=\"#any-all\">#</a>  <code>any、all</code></h2>\n<h2 id=\"case\"><a class=\"anchor\" href=\"#case\">#</a>  <code>case</code></h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CASE</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">WHEN</span> condition1 <span class=\"token keyword\">THEN</span> result1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">WHEN</span> condition2 <span class=\"token keyword\">THEN</span> result2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">WHEN</span> conditionN <span class=\"token keyword\">THEN</span> resultN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">ELSE</span> result</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>例子：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> OrderID<span class=\"token punctuation\">,</span> Quantity<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CASE</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">WHEN</span> Quantity <span class=\"token operator\">></span> <span class=\"token number\">30</span> <span class=\"token keyword\">THEN</span> <span class=\"token string\">'The quantity is greater than 30'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">WHEN</span> Quantity <span class=\"token operator\">=</span> <span class=\"token number\">30</span> <span class=\"token keyword\">THEN</span> <span class=\"token string\">'The quantity is 30'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">ELSE</span> <span class=\"token string\">'The quantity is under 30'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token keyword\">AS</span> QuantityText</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">FROM</span> OrderDetails<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h2>\n<h2 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h2>\n<h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<h2 id=\"参考文章\"><a class=\"anchor\" href=\"#参考文章\">#</a> 参考文章</h2>\n<ul>\n<li>[1] <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC10dXRvcmlhbC5odG1s\">MySQL 教程 | 菜鸟教程 (runoob.com)</span></li>\n<li>[2] <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9teXNxbC9kZWZhdWx0LmFzcA==\">MySQL Tutorial (w3schools.com)</span></li>\n</ul>\n",
            "tags": [
                "数据库",
                "MySQL"
            ]
        },
        {
            "id": "http://example.com/value/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0",
            "url": "http://example.com/value/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0",
            "title": "数据库连接池(C++)",
            "date_published": "2024-03-29T08:47:41.221Z",
            "content_html": "<h1 id=\"数据库连接池\"><a class=\"anchor\" href=\"#数据库连接池\">#</a> 数据库连接池</h1>\n<h2 id=\"数据库连接池概述\"><a class=\"anchor\" href=\"#数据库连接池概述\">#</a> 数据库连接池概述</h2>\n<blockquote>\n<p>提高数据库的访问瓶颈（关系型数据库）：</p>\n<ol>\n<li>缓存服务器 <code>Redis</code></li>\n<li>数据库连接池</li>\n</ol>\n</blockquote>\n<p>一般而言，对于数据库操作都是在访问的时候创建连接，访问完毕之后断开连接。在高并发的情况下，频繁的连接创建和释放会有很大的开销。需要进行如下过程：</p>\n<ol>\n<li>建立通信的连接 TCP 三次握手</li>\n<li>数据库服务器的连接认证</li>\n<li>关闭数据库连接时资源是释放</li>\n<li>断开通信连接 TCP 四次挥手</li>\n</ol>\n<h2 id=\"mysql-api\"><a class=\"anchor\" href=\"#mysql-api\">#</a> MySQL  API</h2>\n<h3 id=\"mysql_init\"><a class=\"anchor\" href=\"#mysql_init\">#</a>  <code>mysql_init</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MYSQL <span class=\"token operator\">*</span><span class=\"token function\">mysql_init</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"mysql_real_connect\"><a class=\"anchor\" href=\"#mysql_real_connect\">#</a>  <code>mysql_real_connect</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MYSQL <span class=\"token operator\">*</span><span class=\"token function\">mysql_real_connect</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tMYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">,</span>\t\t\t\t<span class=\"token comment\">//mysql_init () 函数的返回值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>host<span class=\"token punctuation\">,</span>\t\t\t <span class=\"token comment\">//mysql 服务器的 IP 地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>user<span class=\"token punctuation\">,</span> \t\t\t <span class=\"token comment\">//mysql 服务器的用户名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>password<span class=\"token punctuation\">,</span> \t      <span class=\"token comment\">//mysql 服务器用户对应的密码</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>db<span class=\"token punctuation\">,</span>\t\t\t\t <span class=\"token comment\">// 数据库名</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">,</span>\t\t\t <span class=\"token comment\">//mysql 服务器的监听端口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>unix_socket<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> client_flag\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>返回值：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t成功：返回有效的 MYSQL 连接句柄</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t失败：NULL</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t句柄：一个实例 / 对象</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"mysql_query\"><a class=\"anchor\" href=\"#mysql_query\">#</a>  <code>mysql_query</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>返回值：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t成功：返回 0，同时查询结果（结构集）存储在 mysql 句柄中</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t失败：返回非 0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"mysql-store_result\"><a class=\"anchor\" href=\"#mysql-store_result\">#</a>  <code>mysql store_result</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MYSQL_RES <span class=\"token operator\">*</span><span class=\"token function\">mysql_store_result</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>返回值：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t成功：返回结果集</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t失败：返回 NULL</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"mysql_num_fields\"><a class=\"anchor\" href=\"#mysql_num_fields\">#</a>  <code>mysql_num_fields</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//  获取结果集中的列数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mysql_num_fields</span><span class=\"token punctuation\">(</span>MYSQL_RES <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"mysql_fetch_fields\"><a class=\"anchor\" href=\"#mysql_fetch_fields\">#</a>  <code>mysql_fetch_fields</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//  获取结果集的列名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MYSQL_FIELD <span class=\"token operator\">*</span><span class=\"token function\">mysql_fetch_fields</span><span class=\"token punctuation\">(</span>MYSQL_RES <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>MYSQL_FIELD</code>  对应的结构体定义在 <code>mysql.h</code>  文件中，定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// mysql.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_mysql_field</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>MYSQL_FIELD<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"mysql_fetch_lengths\"><a class=\"anchor\" href=\"#mysql_fetch_lengths\">#</a>  <code>mysql_fetch_lengths</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回结果集内</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token function\">mysql_fetch_lengths</span><span class=\"token punctuation\">(</span>MYSQL_RES <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"mysql_fetch_row\"><a class=\"anchor\" href=\"#mysql_fetch_row\">#</a>  <code>mysql_fetch_row</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>MYSQL_ROW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 取出结果集中的下一行记录（每调用一次，当前的记录会被弹出）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>MYSQL_ROW <span class=\"token function\">mysql_fetch_row</span><span class=\"token punctuation\">(</span>MYSQL_RES <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>返回值：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t成功：得到</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t失败：返回 NULL</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"遍历结果集\"><a class=\"anchor\" href=\"#遍历结果集\">#</a> 遍历结果集</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MYSQL_FIELD <span class=\"token operator\">*</span>fields <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_fields</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token function\">mysql_num_fields</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"mysql_free_result\"><a class=\"anchor\" href=\"#mysql_free_result\">#</a>  <code>mysql_free_result</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 释放结果集对应的内存空间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mysql_free_result</span><span class=\"token punctuation\">(</span>MYSQL_RES <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"mysql_close\"><a class=\"anchor\" href=\"#mysql_close\">#</a>  <code>mysql_close</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 关闭数据库连接实例，释放 mysql_init () 申请得到的空间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mysql_close</span><span class=\"token punctuation\">(</span>MYSQL<span class=\"token operator\">*</span> mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"字符编码设置\"><a class=\"anchor\" href=\"#字符编码设置\">#</a> 字符编码设置</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取当前连接默认的字符集</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">mysql_character_set_name</span><span class=\"token punctuation\">(</span>MYSQL<span class=\"token operator\">*</span> mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置编码集</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">mysql_set_charater_set</span><span class=\"token punctuation\">(</span>MYSQL<span class=\"token operator\">*</span> mysql<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>character_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"事务操作\"><a class=\"anchor\" href=\"#事务操作\">#</a> 事务操作</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置数据库的提交方式（自动提交 mode:true、手动提交 mode:false）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>my_bool <span class=\"token function\">mysql_autocommit</span><span class=\"token punctuation\">(</span>MYSQL<span class=\"token operator\">*</span> mysql<span class=\"token punctuation\">,</span> my_bool mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>返回值：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t成功：true</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t失败：false</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 提交事务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>my_bool <span class=\"token function\">mysql_commit</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>返回值：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t成功：true</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t失败：false</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 事务回滚</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>my_bool <span class=\"token function\">mysql_rollback</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>返回值：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t成功：true</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t失败：false</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"获取错误信息\"><a class=\"anchor\" href=\"#获取错误信息\">#</a> 获取错误信息</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span>MYSQL<span class=\"token operator\">*</span> mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mysql_errno</span><span class=\"token punctuation\">(</span>MYSQL<span class=\"token operator\">*</span> mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++",
                "数据库",
                "池化技术"
            ]
        },
        {
            "id": "http://example.com/value/%E6%95%B0%E6%8D%AE%E5%BA%93/redis%E5%9F%BA%E7%A1%80",
            "url": "http://example.com/value/%E6%95%B0%E6%8D%AE%E5%BA%93/redis%E5%9F%BA%E7%A1%80",
            "title": "Redis基础",
            "date_published": "2023-10-03T08:18:31.023Z",
            "content_html": "<h1 id=\"redis\"><a class=\"anchor\" href=\"#redis\">#</a> Redis</h1>\n<blockquote>\n<p>redis（Remote dictionary server）是一个开源的基于内存的数据存储系统。它可以用于数据库缓存，消息队列等各种场景，是一种 NoSQL 数据库。早期的互联网公司系统大多是通过 Mysql 这种传统的关系型数据库对外提供服务。随着互联网的快速发展，应用系统的访问量原来远大，数据库的性能瓶颈越来越明显，主要是由于磁盘 IO 所导致的，磁盘 IO 的读写速度与内存相比是非常慢的，如果能把数据存储在内存中，则可以大大数据存储的性能。于是便出现了 redis，这种基于内存的数据存储系统。</p>\n</blockquote>\n<p>redis 支持多种数据结构，包括五种基本数据类型和五种高级数据类型。<br />\n五种基本数据类型：</p>\n<ul>\n<li>字符串 <code>String</code></li>\n<li>列表 <code>List</code></li>\n<li>集合 <code>Set</code></li>\n<li>有序集合 <code>SortedSet</code></li>\n<li>哈希 <code>Hash</code></li>\n</ul>\n<p>五种高级数据类型：</p>\n<ul>\n<li>消息队列</li>\n<li>地理空间</li>\n<li>HyperLogLog</li>\n<li>位图 Bitmap</li>\n<li>位域 Bitfiled</li>\n</ul>\n<p>redis 的使用方式有三种：</p>\n<ul>\n<li>CLI，命令行界面（Command Line Interface）；通过 Redis-CLI 命令行工具来使用</li>\n<li>API，应用程序接口（Application Programing Interface）；</li>\n<li>GUI，图形用户界面（Graphical User Interface）；通过图形化工具来使用 Redis</li>\n</ul>\n<p>redis 中的数据是以键值对的形式存储的</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 字符串 String</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">set</span> key value      \t\t<span class=\"token comment\"># 设置键值对（key, value）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>get key \t        \t<span class=\"token comment\"># 获取 key 对应的 value 值，大小写敏感</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># redis 内默认都是使用字符串来存储数据的，而且是二进制安全的（redis-cli --raw）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>del key\t\t\t   \t    <span class=\"token comment\"># 删除 key 对应的（key，value）键值对</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>exists key\t\t    \t<span class=\"token comment\"># 判断是否存在 key 对应的键值对</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>keys pattern\t\t\t<span class=\"token comment\"># 查看与 pattern 匹配的键，* 表示所以 key</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>flushall\t\t    \t<span class=\"token comment\"># 清空数据库，即删除所以的键值对</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">clear</span>\t\t\t    \t<span class=\"token comment\"># 清空屏幕</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 设置一个带过期时间的键值对</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>TTL key\t\t\t   \t\t<span class=\"token comment\"># 查看 key 的过期时间，返回 - 1 表示没有设置过期时间，返回 - 2 表示设置了过期时间同时该键值对已经过期，返回正数表示过期时间</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>expire key seconds\t\t<span class=\"token comment\"># 为 key 对应的键值对设置过期时间 seconds</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>setex key seconds value  <span class=\"token comment\"># 设置（key，value）键值对的过期时间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>setnx key value\t\t\t<span class=\"token comment\"># 当键 key 不存在时，插入（key, value）, 否则不插入</span></pre></td></tr></table></figure><p>list 也叫列表，一般用来存储和操作一组有顺序的数据，和数组的概念比较类似</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># lish 操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lpush key value \t\t<span class=\"token comment\"># 往列表 key 的左边插入一个 value 的元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rpush key value\t\t\t<span class=\"token comment\"># 往列表 key 的右边插入一个 value 的元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>lpush key value1 value2 value3 <span class=\"token punctuation\">..</span>.  <span class=\"token comment\"># 一次性添加多个元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lrange key start stop\t<span class=\"token comment\"># 获取列表 key 左边 [start, stop] 的所以元素索引 0 开始</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>lpop key \t\t\t   <span class=\"token comment\"># 删除列表 key 最左边的元素，返回删除的元素值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>lpop key count\t\t   <span class=\"token comment\"># 删除列表 key 最左边的 count 个元素（版本 >=6.0.2），返回删除的元素值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>llen key\t\t\t   <span class=\"token comment\"># 获取列表 key 的长度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ltrim key start stop    <span class=\"token comment\"># 保留列表 key 从左开始 [stop, stop] 内的元素，范围之外的元素均会被删除（索引均是从 0 开始）</span></pre></td></tr></table></figure><p>set 是一种无序集合，它和列表的区别是列表中的元素都是可以重复的，而 set 中的元素不可以重复，而且 set 中的元素并不像列表中的元素那样都是具有顺序的。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># set 操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sadd key member\t\t\t<span class=\"token comment\"># 往无序集合 key 内添加 member 元素，若无序集合 key 内已经存在该 member，则添加失败</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sadd key memeber1 member2 <span class=\"token punctuation\">..</span>.   <span class=\"token comment\"># 往无序集合 key 内添加多个元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>smembers key\t\t\t<span class=\"token comment\"># 查看无序集合 key 的元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sismember key member\t <span class=\"token comment\"># 查看 member 是否是无序集合 key 内的元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>srem key memeber\t\t<span class=\"token comment\"># 删除无序集合 key 内的 member</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>srem key member1 member2 <span class=\"token punctuation\">..</span>.   <span class=\"token comment\"># 删除无序集合 key 内的多个元素</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 集合运算操作</span></pre></td></tr></table></figure><p>sortedset 是一种有序集合，又名 zset，其和集合的区别在于有序集合的每个元素都会关联一个浮点类型的分数，然后按照这个分数来对集合中的元素进行从小到大的顺序排序，有序集合的成员是唯一的，但是分数是可以重复的。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># sortedset 操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>zadd key score1 member1 score2 member2 <span class=\"token punctuation\">..</span>.  <span class=\"token comment\"># 往有序集合 key 中插入 member1,member2，其对应的分数为 score1, scores2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>zrange key start stop\t\t\t\t<span class=\"token comment\"># 查看有序集合 key 内 [start, stop] 内的元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>zrange key start stop withscores     <span class=\"token comment\"># 查看有序集合 key 内 [start, stop] 内的元素和其对应的分数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>zscore key member\t\t\t\t    <span class=\"token comment\"># 获取有序集合 key 内 member 的分数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>zrank key member\t\t\t\t    <span class=\"token comment\"># 获取有序集合 key 内 member 的排名（从小到大排序，分数越小排名越高）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>zrevrank key member\t\t\t\t    <span class=\"token comment\"># 获取有序集合 key 内 member 的排名（从大到小排序，分数越高排名越高）</span></pre></td></tr></table></figure><p>哈希 hash 是一个字符类型的字段和值的映射表，简单来说就是一个键值对的集合，特别适合用来存储对象。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># hash 操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hset key field value\t\t<span class=\"token comment\"># 往哈希 key 内插入 (field, value) 键值对</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hget key field\t\t\t    <span class=\"token comment\"># 获取哈希 key 内 field 对应的值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hgetall key\t\t\t\t   <span class=\"token comment\"># 获取哈希 key 内所以的键值对</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hdel key field  \t\t   <span class=\"token comment\"># 删除哈希 key 内 field 对应的键值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>hexists key field \t\t    <span class=\"token comment\"># 查看哈希 key 内是否存在 field 对应的键值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>hkeys key\t\t\t\t   <span class=\"token comment\"># 获取哈希 key 内所以的键</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>hlen key\t\t\t\t   <span class=\"token comment\"># 获取哈希 key 内所以键值对的数目</span></pre></td></tr></table></figure><p>redis 提供了发布订阅的功能，可以通过 <code>publish</code>  将消息发布到指定的频道，然后通过 <code>subscribe</code>  命令来订阅这个频道。但是这样的简单的发布和订阅功能具有一些局限性，比如消息无法持久化，无法记录历史消息等等</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>subscribe channel\t\t\t<span class=\"token comment\"># 订阅频道 channel</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>publish channel message\t\t<span class=\"token comment\"># 像频道 channe 发布消息 message</span></pre></td></tr></table></figure><p>消息队列 Stream，是 redis5.0 引入的一个新的数据结构，他是一个轻量级的消息队列，可以实现消息的持久化、记录历史消息等。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Stream 操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>xadd key <span class=\"token function\">id</span> field value\t\t\t\t<span class=\"token comment\"># 往消息队列 key 内添加一条消息（消息的 id，消息的内容 (field, value)）， id 为 *，则 redis 则会自动生成，id 为 (时间戳 - 序号) 的形式；redis 自动生成的 id 保证其为递增，如果手动指定 id 需要自己保证插入消息 id 为递增的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>xlen key\t\t\t\t\t\t   <span class=\"token comment\"># 获取消息队列 key 的消息数目</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>xrange key - + \t\t\t\t\t    <span class=\"token comment\"># 获取消息队列 key 内的所以消息信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>xrange key start end\t\t\t\t<span class=\"token comment\"># 获取消息队列 key 内 id 在 [start, end] 范围内的消息信息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>xdel key <span class=\"token function\">id</span>\t\t\t\t\t\t    <span class=\"token comment\"># 删除消息队列 key 内 ID 为 id 的消息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>xtrim key maxlen count\t\t\t\t<span class=\"token comment\"># 删除消息队列 kye 内的消息，直到消息队列长度为 count（可能比 count 多）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>xread <span class=\"token punctuation\">[</span>count count_num<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>block milliseconds<span class=\"token punctuation\">]</span> streams key <span class=\"token function\">id</span>   <span class=\"token comment\"># 读取消息队列可以内 count_num 条消息，ID>id，若没有则堵塞 milliseconds 毫秒，如果 id 为 $, 表示获取当前时刻之后的 count_num 条消息</span></pre></td></tr></table></figure><p>地理空间 <code>Genspatial</code>  是 redis3.2 版本的新特性，它提供了一种存储空间位置信息的数据结构，同时支持对地理位置进行的各种计算操作。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 地理空间 genspatial</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>geoadd key longitude latitude member \t<span class=\"token comment\"># 往空间地理位置 key 内添加名称为 member 的地理位置信息（经度，纬度）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>geopos key member\t\t\t\t\t  <span class=\"token comment\"># 获取空间地理位置 key 内 member 的位置信息 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>geodist key member1 member2 <span class=\"token punctuation\">[</span>km<span class=\"token punctuation\">]</span>\t\t\t   <span class=\"token comment\"># 获取空间地理位置 key 内 member1 与 member2 之间的距离，默认为 m</span></pre></td></tr></table></figure><p><code>HyperLogLog</code>  是一种用来做基数统计的算法，它并不是 redis 特有的算法。基数：集合中元素数目（去重之后）。它的原理是使用随机算法来计算，通过牺牲一定的精度来换取更小的内存消耗。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># hyperloglog 操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pfadd key element1 element2 <span class=\"token punctuation\">..</span>.        <span class=\"token comment\"># 往基数容器 key 内添加 element1，element2... 元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pfcount key\t\t\t\t\t\t\t<span class=\"token comment\"># 获取基数容器 key 内元素的数目</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pfmerge destkey sourcekey1 sourcekey2  <span class=\"token comment\"># 合并多个基数容器，最终存放于 destkey 基数容器内</span></pre></td></tr></table></figure><p>位图是字符串类型的扩展，可以使用一个 string 类型来模拟一个 Bit 数组，数组的下标就是偏移量，值只有 0 和 1，也支持一些位运算，比如与、或、非和异或等等。他们的运用非常广泛，比如用来记录用户的签到情况，在线状态，点赞状态。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># bitmap 操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>setbit key offset value\t\t\t\t<span class=\"token comment\"># 设置位图 key 偏移量为 offset 的位置为 value (0/1)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>getbit key offset\t\t\t\t    <span class=\"token comment\"># 获取位图 key 偏移量为 offset 的位置的值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> key value\t\t\t\t\t   <span class=\"token comment\"># 位图本质是 string，可以通过设置 string 的方法来设置位图，value 转化为二进制即为对应位图的值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bitcount key \t\t\t\t\t   <span class=\"token comment\"># 获取位图 key 内 1 的个数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bitpos key bit\t\t\t\t\t   <span class=\"token comment\"># 获取位图 key 内第一次出现 bit 的下标 (0 开始)</span></pre></td></tr></table></figure><p>位域能够将很多小的整数存储到一个较大的位图中，这样就可以更加高效的使用内存</p>\n<p>redis 支持事务，也就是可以在一次请求中执行多个命令；redis 中的事务主要通过 <code>multi</code>  和 <code>exec</code>  这两个命令来实现的； <code>multi</code>  命令用来开启一个事务，事务开启之后所以的命令都会被放进一个队列中，最后通过一个 <code>exec</code>  命令来执行所以的命令。redis 中是事务和 mysql 或者 oracle 中的数据库的事务不太一样，在关系型数据库中，事务一般是一个原子操作，要么全部执行成功，要么全部执行失败；而在 redis 中，事务并不能保证所以命令都会执行成功，它的执行结果取决于事务中的命令，但是 redis 可以保证如下三点：</p>\n<ul>\n<li>在发送 <code>exec</code>  命令之前，所以的命令都会被放入到一个队列中缓存起来，不会立即执行</li>\n<li>在收到 <code>exec</code>  命令之后事务开始执行，事务中的任何一个命令执行失败其他命令依然会被执行（不会以为其中的命令执行失败而影响后续的命令的执行）</li>\n<li>在事务的执行过程中，其他客户端提交的命令请求并不会被插入到执行命令序列中</li>\n</ul>\n<p>持久化的 redis 一个非常重要的功能，因为 redis 是一个基于内存的数据库，如果没有持久化的话，那么一旦服务器重启或者断点，那么之前的所以数据都会丢失，这对于一个数据库来说是非常致命的。redis 中的持久化主要由两种方式：</p>\n<ul>\n<li>RDB 方式（redis databse），在指定的时间间隔内，将内存中的数据快照写入磁盘，他是某一时间点上数据的完整副本</li>\n<li>AOF 方式（Append-Only File），追加文件，每次在执行写命令的时候，不仅将命令写入到内存中，还会将命令写入到一个追加的文件中，这个文件就是 AOF 文件，它会以日志的形式来记录每一个写操作，当 redis 重启的时候，就会通过重新执行 AOF 文件中的命令来在内存中重建整个数据库的内容</li>\n</ul>\n<p>主从复制是指将一台服务器（主节点）的数据复制到其他 redis 服务器中（从节点）。一个主节点可以有多个从节点，而每个从节点只可以有一个主节点，数据的复制是单向的，只能由主节点到从节点；一般来说主节点负责写操作，从节点负责读操作，主节点会将自己的数据变化通过异步的方式发送给从节点，从节点接收到主节点的数据之后，更新自己的数据，这样就达到的了数据一致性的目的。</p>\n",
            "tags": [
                "数据库",
                "Redis"
            ]
        }
    ]
}