{
    "version": "https://jsonfeed.org/version/1",
    "title": "繁華落盡 似水流年 • All posts by \"leetcode双周赛\" tag",
    "description": "编程日记 & 随笔",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/value/Leetcode/%E7%AC%AC%20126%20%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3",
            "url": "http://example.com/value/Leetcode/%E7%AC%AC%20126%20%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3",
            "title": "第 126 场双周赛",
            "date_published": "2024-03-17T01:43:37.085Z",
            "content_html": "<h2 id=\"求出加密整数的和\"><a class=\"anchor\" href=\"#求出加密整数的和\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9maW5kLXRoZS1zdW0tb2YtZW5jcnlwdGVkLWludGVnZXJzLw==\">求出加密整数的和</span></h2>\n<p>给你一个整数数组  <code>nums</code>  ，数组中的元素都是 <strong>正</strong> 整数。定义一个加密函数  <code>encrypt</code>  ， <code>encrypt(x)</code>  将一个整数  <code>x</code>  中 <strong>每一个</strong> 数位都用  <code>x</code>  中的 <strong>最大</strong> 数位替换。比方说  <code>encrypt(523) = 555</code>  且  <code>encrypt(213) = 333</code>  。</p>\n<p>请你返回数组中所有元素加密后的 <strong>和</strong> 。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>** 输入：**nums = [1,2,3]</p>\n<p>** 输出：**6</p>\n<p>** 解释：** 加密后的元素位  <code>[1,2,3]</code>  。加密元素的和为  <code>1 + 2 + 3 == 6</code>  。</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>** 输入：**nums = [10,21,31]</p>\n<p>** 输出：**66</p>\n<p>** 解释：** 加密后的元素为  <code>[11,22,33]</code>  。加密元素的和为  <code>11 + 22 + 33 == 66</code>  。</p>\n</blockquote>\n<p><strong>数据范围：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n<div class=\"note info\">\n<p><strong>思路：</strong> 遍历每个元素，计算最大位 <code>maxv</code> ，遍历的同时计算 <code>111...</code>  的值 <code>base</code> ，把 <code>base * maxv</code>  即为转化后的值</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">deal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> maxv <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            base <span class=\"token operator\">=</span> base <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            maxv <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxv<span class=\"token punctuation\">,</span> x <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            x <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> base <span class=\"token operator\">*</span> maxv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">sumOfEncryptedInt</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> res <span class=\"token operator\">+=</span> <span class=\"token function\">deal</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note primary\">\n<p><strong>复杂度分析</strong></p>\n<ol>\n<li>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogU)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span>，其中 <code>n</code>  为 <code>nums</code>  的长度， <code>U=max(nums)</code></li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n</ol>\n</div>\n<h2 id=\"执行操作标记数组中的元素\"><a class=\"anchor\" href=\"#执行操作标记数组中的元素\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9tYXJrLWVsZW1lbnRzLW9uLWFycmF5LWJ5LXBlcmZvcm1pbmctcXVlcmllcy8=\">执行操作标记数组中的元素</span></h2>\n<p>给你一个长度为  <code>n</code>  下标从 <strong>0</strong> 开始的正整数数组  <code>nums</code>  。</p>\n<p>同时给你一个长度为  <code>m</code>  的二维操作数组  <code>queries</code>  ，其中  <code>queries[i] = [indexi, ki]</code>  。</p>\n<p>一开始，数组中的所有元素都 <strong>未标记</strong> 。</p>\n<p>你需要依次对数组执行  <code>m</code>  次操作，第  <code>i</code>  次操作中，你需要执行：</p>\n<ul>\n<li>如果下标  <code>indexi</code>  对应的元素还没标记，那么标记这个元素。</li>\n<li>然后标记  <code>ki</code>  个数组中还没有标记的 <strong>最小</strong> 元素。如果有元素的值相等，那么优先标记它们中下标较小的。如果少于  <code>ki</code>  个未标记元素存在，那么将它们全部标记。</li>\n</ul>\n<p>请你返回一个长度为  <code>m</code>  的数组  <code>answer</code>  ，其中  <code>answer[i]</code>  是第  <code>i</code>  次操作后数组中还没标记元素的 <strong>和</strong> 。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>** 输入：**nums = [1,2,2,1,2,3,1], queries = [[1,2],[3,3],[4,2]]</p>\n<p><strong>输出：</strong>[8,3,0]</p>\n<p><strong>解释：</strong></p>\n<p>我们依次对数组做以下操作：</p>\n<ul>\n<li>标记下标为  <code>1</code>  的元素，同时标记  <code>2</code>  个未标记的最小元素。标记完后数组为  <code>nums = [***1***,***2***,2,***1***,2,3,1]</code>  。未标记元素的和为  <code>2 + 2 + 3 + 1 = 8</code>  。</li>\n<li>标记下标为  <code>3</code>  的元素，由于它已经被标记过了，所以我们忽略这次标记，同时标记最靠前的  <code>3</code>  个未标记的最小元素。标记完后数组为 nums = [<em><strong>1</strong></em>,<strong>2</strong>,<em><strong>2</strong></em>,<em><strong>1</strong></em>,<em><strong>2</strong></em>,3,<em><strong>1</strong></em>] 。未标记元素的和为  <code>3</code>  。</li>\n<li>标记下标为  <code>4</code>  的元素，由于它已经被标记过了，所以我们忽略这次标记，同时标记最靠前的  <code>2</code>  个未标记的最小元素。标记完后数组为 nums = [<em><strong>1</strong></em>,<em><strong>2</strong></em>,<em><strong>2</strong></em>,<em><strong>1</strong></em>,<em><strong>2</strong></em>,<em><strong>3</strong></em>,<em><strong>1</strong></em>] 。未标记元素的和为  <code>0</code>  。</li>\n</ul>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>** 输入：**nums = [1,4,2,3], queries = [[0,1]]</p>\n<p><strong>输出：</strong>[7]</p>\n<p>** 解释：** 我们执行一次操作，将下标为  <code>0</code>  处的元素标记，并且标记最靠前的  <code>1</code>  个未标记的最小元素。标记完后数组为  <code>nums = [***1***,4,***2***,3]</code>  。未标记元素的和为  <code>4 + 3 = 7</code>  。</p>\n</blockquote>\n<p><strong>数据范围：</strong></p>\n<ul>\n<li><code>n == nums.length</code></li>\n<li><code>m == queries.length</code></li>\n<li><code>1 &lt;= m &lt;= n &lt;= 105</code></li>\n<li><code>1 &lt;= n &lt;= 105</code></li>\n<li><code>queries[i].length == 2</code></li>\n<li><code>0 &lt;= indexi, ki &lt;= n - 1</code></li>\n</ul>\n<div class=\"note info\">\n<p><strong>思路：</strong> 由于需要从小到大标记，首先对元素进行排序，第一排序关键字为 <code>nums[i]</code>  的大小，第二关键字为下标 <code>index</code> 。使用一个哈希表来存储未标记的元素集合。每次操作，首先检查从哈希表中检查 <code>query[i][0]</code>  是否存在，存在说明未标记，并从哈希表中移除。其次从排序队列中选取 <code>query[i][1]</code>  个有效的元素并从哈希表中删除.</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> pii<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token operator\">></span> <span class=\"token function\">unmarkedSumArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> queries<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> S<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>pii<span class=\"token operator\">></span> <span class=\"token function\">tp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ll sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>    S<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>tp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> queries<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">auto</span> item <span class=\"token operator\">=</span> queries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    S<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> cnt <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                pii cur <span class=\"token operator\">=</span> tp<span class=\"token punctuation\">[</span>k <span class=\"token operator\">++</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">-</span> cur<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                S<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                cnt <span class=\"token operator\">--</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note primary\">\n<p><strong>复杂度分析</strong></p>\n<ol>\n<li>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，其中 <code>n</code>  为 <code>nums</code>  的长度</li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n</ol>\n</div>\n<h2 id=\"替换字符串中的问号使分数最小\"><a class=\"anchor\" href=\"#替换字符串中的问号使分数最小\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZXBsYWNlLXF1ZXN0aW9uLW1hcmtzLWluLXN0cmluZy10by1taW5pbWl6ZS1pdHMtdmFsdWUv\">替换字符串中的问号使分数最小</span></h2>\n<p>给你一个字符串  <code>s</code>  。 <code>s[i]</code>  要么是小写英文字母，要么是问号  <code>'?'</code>  。</p>\n<p>对于长度为  <code>m</code>  且 <strong>只</strong> 含有小写英文字母的字符串  <code>t</code>  ，我们定义函数  <code>cost(i)</code>  为下标  <code>i</code>  之前（也就是范围  <code>[0, i - 1]</code>  中）出现过与  <code>t[i]</code>  <strong>相同</strong> 字符出现的次数。</p>\n<p>字符串  <code>t</code>  的 <strong>分数</strong> 为所有下标  <code>i</code>  的  <code>cost(i)</code>  之 <strong>和</strong> 。</p>\n<p>比方说，字符串  <code>t = &quot;aab&quot;</code>  ：</p>\n<ul>\n<li><code>cost(0) = 0</code></li>\n<li><code>cost(1) = 1</code></li>\n<li><code>cost(2) = 0</code></li>\n<li>所以，字符串  <code>&quot;aab&quot;</code>  的分数为  <code>0 + 1 + 0 = 1</code>  。</li>\n</ul>\n<p>你的任务是用小写英文字母 <strong>替换</strong>  <code>s</code>  中 <strong>所有</strong> 问号，使  <code>s</code>  的 <strong>分数 **** 最小</strong> 。</p>\n<p>请你返回替换所有问号  <code>'?'</code>  之后且分数最小的字符串。如果有多个字符串的 <strong>分数最小</strong> ，那么返回字典序最小的一个。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>** 输入：**s = &quot;???&quot;</p>\n<p><strong>输出：</strong> &quot;abc&quot;</p>\n<p>** 解释：** 这个例子中，我们将  <code>s</code>  中的问号  <code>'?'</code>  替换得到  <code>&quot;abc&quot;</code>  。</p>\n<p>对于字符串  <code>&quot;abc&quot;</code>  ， <code>cost(0) = 0</code>  ， <code>cost(1) = 0</code>  和  <code>cost(2) = 0</code>  。</p>\n<p><code>&quot;abc&quot;</code>  的分数为  <code>0</code>  。</p>\n<p>其他修改  <code>s</code>  得到分数  <code>0</code>  的字符串为  <code>&quot;cba&quot;</code>  ， <code>&quot;abz&quot;</code>  和  <code>&quot;hey&quot;</code>  。</p>\n<p>这些字符串中，我们返回字典序最小的。</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p><strong>输入：</strong> s = &quot;a?a?&quot;</p>\n<p><strong>输出：</strong> &quot;abac&quot;</p>\n<p>** 解释：** 这个例子中，我们将  <code>s</code>  中的问号  <code>'?'</code>  替换得到  <code>&quot;abac&quot;</code>  。</p>\n<p>对于字符串  <code>&quot;abac&quot;</code>  ， <code>cost(0) = 0</code>  ， <code>cost(1) = 0</code>  ， <code>cost(2) = 1</code>  和  <code>cost(3) = 0</code>  。</p>\n<p><code>&quot;abac&quot;</code>  的分数为  <code>1</code>  。</p>\n</blockquote>\n",
            "tags": [
                "Leetcode双周赛"
            ]
        }
    ]
}