{
    "version": "https://jsonfeed.org/version/1",
    "title": "繁華落盡 似水流年 • All posts by \"leetcode周赛\" tag",
    "description": "编程日记 & 随笔",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/value/Leetcode/%E7%AC%AC390%E5%9C%BA%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3",
            "url": "http://example.com/value/Leetcode/%E7%AC%AC390%E5%9C%BA%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3",
            "title": "第 390 场周赛",
            "date_published": "2024-03-24T03:18:05.453Z",
            "content_html": "<h1 id=\"第-390-场周赛\"><a class=\"anchor\" href=\"#第-390-场周赛\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9jb250ZXN0L3dlZWtseS1jb250ZXN0LTM5MA==\">第 390 场周赛</span></h1>\n<p><img data-src=\"https://raw.githubusercontent.com/Special-JiaHao/images/main/390%E5%91%A8%E8%B5%9B.png\" alt=\"\" /></p>\n<blockquote>\n<p>第一题写的匆匆忙，都使用暴力，居然 <code>WA</code> , 单纯就是粗心写快了<br />\n第二题也没有分析太多，上来直接给它写了一个 bfs，果不其然，超时了。后来仔细分析了一些，就贪过去了<br />\n第三题这种懒更新的手法之前也遇到过，思维算是比较简单（之前遇到过的话）<br />\n第四题感觉就是裸的哈希题，就是复制粘贴出现了问题，没有改长度（输入的两个数组分别取长度 n 和 m）</p>\n</blockquote>\n<h2 id=\"每个字符最多出现两次的最长子字符串\"><a class=\"anchor\" href=\"#每个字符最多出现两次的最长子字符串\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9tYXhpbXVtLWxlbmd0aC1zdWJzdHJpbmctd2l0aC10d28tb2NjdXJyZW5jZXMv\">每个字符最多出现两次的最长子字符串</span></h2>\n<p>给你一个字符串  <code>s</code>  ，请找出满足每个字符最多出现两次的最长子字符串，并返回该子字符串的 <strong>最大</strong> 长度。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p><strong>输入：</strong> s = &quot;bcbbbcba&quot;</p>\n<p><strong>输出：</strong> 4</p>\n</blockquote>\n<p><strong>解释：</strong></p>\n<blockquote>\n<p>以下子字符串长度为 4，并且每个字符最多出现两次： <code>&quot;bcbbbcba&quot;</code> 。</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p><strong>输入：</strong> s = &quot;aaaa&quot;</p>\n<p><strong>输出：</strong> 2</p>\n</blockquote>\n<p><strong>解释：</strong></p>\n<blockquote>\n<p>以下子字符串长度为 2，并且每个字符最多出现两次： <code>&quot;aaaa&quot;</code> 。</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= s.length &lt;= 100</code></li>\n<li><code>s</code>  仅由小写英文字母组成</li>\n</ul>\n<h3 id=\"思路一暴力枚举\"><a class=\"anchor\" href=\"#思路一暴力枚举\">#</a> 思路一（暴力枚举）</h3>\n<div class=\"note info\">\n<p>暴力枚举每个字段，统计其中出现的字母出现次数，最后做一次判断，更新到最终的答案中</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maximumLengthSubstring</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">;</span> k <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>   mp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">bool</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item <span class=\"token operator\">:</span> mp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>second <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>    maxv <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxv<span class=\"token punctuation\">,</span> j <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> maxv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note primary\">\n<p><strong>复杂度分析</strong></p>\n<ol>\n<li>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，其中 <code>n</code>  为 <code>s</code>  的长度</li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，每次统计只需要使用 <code>26</code>  空间大小的数组</li>\n</ol>\n</div>\n<h3 id=\"思路二双指针\"><a class=\"anchor\" href=\"#思路二双指针\">#</a> 思路二（双指针）</h3>\n<div class=\"note info\">\n<p>不难看出使用暴力枚举，其中会涉及到一些重复统计的操作：比如当需要统计从 i 开始的字符串，判断长度为 4 和长度为 5 的字符串是否满足条件时，使用暴力的方法会以此重新遍历，而一个更好的方法的在统计长度为 4 的子串的基础之上，得出长度为 5 的子串的字符出现次数.</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maximumLengthSubstring</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            cnt<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> cnt<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">++</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">--</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            maxv <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxv<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> maxv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note primary\">\n<p><strong>复杂度分析</strong></p>\n<ol>\n<li>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，其中 <code>n</code>  为 <code>s</code>  的长度</li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，每次统计只需要使用 <code>26</code>  空间大小的数组</li>\n</ol>\n</div>\n<h2 id=\"执行操作使数据元素之和大于等于-k\"><a class=\"anchor\" href=\"#执行操作使数据元素之和大于等于-k\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9hcHBseS1vcGVyYXRpb25zLXRvLW1ha2Utc3VtLW9mLWFycmF5LWdyZWF0ZXItdGhhbi1vci1lcXVhbC10by1rLw==\">执行操作使数据元素之和大于等于 K</span></h2>\n<p>给你一个<strong>正整数</strong>  <code>k</code>  。最初，你有一个数组  <code>nums = [1]</code>  。</p>\n<p>你可以对数组执行以下 <strong>任意</strong> 操作 <strong>任意</strong> 次数（<strong>可能为零</strong>）：</p>\n<ul>\n<li>选择数组中的任何一个元素，然后将它的值 <strong>增加</strong>  <code>1</code>  。</li>\n<li>复制数组中的任何一个元素，然后将它附加到数组的末尾。</li>\n</ul>\n<p>返回使得最终数组元素之 <strong>和</strong> 大于或等于  <code>k</code>  所需的 <strong>最少</strong> 操作次数。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p><strong>输入：</strong> k=11</p>\n<p><strong>输出：</strong> 5</p>\n</blockquote>\n<p><strong>解释：</strong></p>\n<blockquote>\n<p>可以对数组  <code>nums = [1]</code>  执行以下操作：</p>\n<ul>\n<li>将元素的值增加  <code>1</code>  三次。结果数组为  <code>nums = [4]</code>  。</li>\n<li>复制元素两次。结果数组为  <code>nums = [4,4,4]</code></li>\n</ul>\n<p>最终数组的和为  <code>4 + 4 + 4 = 12</code>  ，大于等于  <code>k = 11</code>  。<br />\n执行的总操作次数为  <code>3 + 2 = 5</code>  。</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p><strong>输入：</strong> k=1</p>\n<p><strong>输出：</strong> 0</p>\n</blockquote>\n<p><strong>解释：</strong></p>\n<blockquote>\n<p>原始数组的和已经大于等于  <code>1</code>  ，因此不需要执行操作。</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= k &lt;= 100000</code></li>\n</ul>\n<h3 id=\"思路贪心数学\"><a class=\"anchor\" href=\"#思路贪心数学\">#</a> 思路 (贪心 / 数学)</h3>\n<div class=\"note info\">\n<p>最小操作次数必定可以变换为：先做加法，后做乘法（加最大值）</p>\n<p>为了使得最终数组的和尽快达到 <code>k</code> ，做加法时应该让最大值 <code>+1</code> ，做乘法应该加上最大值</p>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">minOperations</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> minv <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> k<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            minv <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>minv<span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> minv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note primary\">\n<p><strong>复杂度分析</strong></p>\n<ol>\n<li>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n</ol>\n</div>\n<h2 id=\"最高频率的-id\"><a class=\"anchor\" href=\"#最高频率的-id\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9tb3N0LWZyZXF1ZW50LWlkcy8=\">最高频率的 ID</span></h2>\n<p>你需要在一个集合里动态记录 ID 的出现频率。给你两个长度都为  <code>n</code>  的整数数组  <code>nums</code>  和  <code>freq</code>  ， <code>nums</code>  中每一个元素表示一个 ID ，对应的  <code>freq</code>  中的元素表示这个 ID 在集合中此次操作后需要增加或者减少的数目。</p>\n<ul>\n<li><strong>增加 ID 的数目：</strong> 如果  <code>freq[i]</code>  是正数，那么  <code>freq[i]</code>  个 ID 为  <code>nums[i]</code>  的元素在第  <code>i</code>  步操作后会添加到集合中。</li>\n<li>** 减少 ID 的数目：** 如果  <code>freq[i]</code>  是负数，那么  <code>-freq[i]</code>  个 ID 为  <code>nums[i]</code>  的元素在第  <code>i</code>  步操作后会从集合中删除。</li>\n</ul>\n<p>请你返回一个长度为  <code>n</code>  的数组  <code>ans</code>  ，其中  <code>ans[i]</code>  表示第  <code>i</code>  步操作后出现频率最高的 ID <strong>数目</strong> ，如果在某次操作后集合为空，那么  <code>ans[i]</code>  为 0 。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p><strong>输入：</strong> nums = [2,3,2,1], freq = [3,2,-3,1]</p>\n<p><strong>输出：</strong> [3,3,2,2]</p>\n</blockquote>\n<p><strong>解释：</strong></p>\n<blockquote>\n<p>第 0 步操作后，有 3 个 ID 为 2 的元素，所以  <code>ans[0] = 3</code>  。<br />\n第 1 步操作后，有 3 个 ID 为 2 的元素和 2 个 ID 为 3 的元素，所以  <code>ans[1] = 3</code>  。<br />\n第 2 步操作后，有 2 个 ID 为 3 的元素，所以  <code>ans[2] = 2</code>  。<br />\n第 3 步操作后，有 2 个 ID 为 3 的元素和 1 个 ID 为 1 的元素，所以  <code>ans[3] = 2</code>  。</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>** 输入：**nums = [5,5,3], freq = [2,-2,1]</p>\n<p><strong>输出：</strong>[2,0,1]</p>\n</blockquote>\n<p><strong>解释：</strong></p>\n<blockquote>\n<p>第 0 步操作后，有 2 个 ID 为 5 的元素，所以  <code>ans[0] = 2</code>  。<br />\n第 1 步操作后，集合中没有任何元素，所以  <code>ans[1] = 0</code>  。<br />\n第 2 步操作后，有 1 个 ID 为 3 的元素，所以  <code>ans[2] = 1</code>  。</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length == freq.length &lt;= 100000</code></li>\n<li><code>1 &lt;= nums[i] &lt;= 100000</code></li>\n<li><code>-105 &lt;= freq[i] &lt;= 100000</code></li>\n<li><code>freq[i] != 0</code></li>\n<li>输入保证任何操作后，集合中的元素出现次数不会为负数</li>\n</ul>\n<h3 id=\"思路优先队列\"><a class=\"anchor\" href=\"#思路优先队列\">#</a> 思路（优先队列）</h3>\n<div class=\"note info\">\n<ol>\n<li>维护一个堆，堆中保存一个值和出现次数的 <code>pair</code> ，堆顶元素的出现次数最大.</li>\n<li>维护一个哈希表，用于统计每个数组出现的次数</li>\n<li>每次进行删除或增加操作时，都将最新的 pair 存入到堆中</li>\n<li>对于堆中的元素，可能是失效的，每次取出现频率最大的元素时区哈希表内检查其是否有效</li>\n</ol>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span>ll<span class=\"token punctuation\">,</span> ll<span class=\"token operator\">></span> pii<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cmp</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pii<span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> pii <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token operator\">></span> <span class=\"token function\">mostFrequentIDs</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> freq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        unordered_map<span class=\"token operator\">&lt;</span>ll<span class=\"token punctuation\">,</span> ll<span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        priority_queue<span class=\"token operator\">&lt;</span>pii<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>pii<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> cmp<span class=\"token operator\">></span> qu<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            mp<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> freq<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>    qu<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mp<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>qu<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">auto</span> tp <span class=\"token operator\">=</span> qu<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">[</span>tp<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> tp<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    qu<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>qu<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">else</span>    res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> qu<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note primary\">\n<p><strong>复杂度分析</strong></p>\n<ol>\n<li>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，其中 <code>n</code>  指数组 <code>nums</code>  的长度</li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，其中 <code>n</code>  指数组 <code>nums</code>  的长度</li>\n</ol>\n</div>\n<h2 id=\"最长公共后缀查询\"><a class=\"anchor\" href=\"#最长公共后缀查询\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LWNvbW1vbi1zdWZmaXgtcXVlcmllcy8=\">最长公共后缀查询</span></h2>\n<p>给你两个字符串数组  <code>wordsContainer</code>  和  <code>wordsQuery</code>  。</p>\n<p>对于每个  <code>wordsQuery[i]</code>  ，你需要从  <code>wordsContainer</code>  中找到一个与  <code>wordsQuery[i]</code>  有 <strong>最长公共后缀</strong> 的字符串。如果  <code>wordsContainer</code>  中有两个或者更多字符串有最长公共后缀，那么答案为长度 <strong>最短</strong> 的。如果有超过两个字符串有 <strong>相同</strong> 最短长度，那么答案为它们在  <code>wordsContainer</code>  中出现 <strong>更早</strong> 的一个。</p>\n<p>请你返回一个整数数组  <code>ans</code>  ，其中  <code>ans[i]</code>  是  <code>wordsContainer</code>  中与  <code>wordsQuery[i]</code>  有 <strong>最长公共后缀</strong> 字符串的下标。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>** 输入：**wordsContainer = [&quot;abcd&quot;,&quot;bcd&quot;,&quot;xbcd&quot;], wordsQuery = [&quot;cd&quot;,&quot;bcd&quot;,&quot;xyz&quot;]</p>\n<p><strong>输出：</strong>[1,1,1]</p>\n</blockquote>\n<p><strong>解释：</strong></p>\n<blockquote>\n<p>我们分别来看每一个  <code>wordsQuery[i]</code>  ：</p>\n<ul>\n<li>对于  <code>wordsQuery[0] = &quot;cd&quot;</code>  ， <code>wordsContainer</code>  中有最长公共后缀  <code>&quot;cd&quot;</code>  的字符串下标分别为 0 ，1 和 2 。这些字符串中，答案是下标为 1 的字符串，因为它的长度为 3 ，是最短的字符串。</li>\n<li>对于  <code>wordsQuery[1] = &quot;bcd&quot;</code>  ， <code>wordsContainer</code>  中有最长公共后缀  <code>&quot;bcd&quot;</code>  的字符串下标分别为 0 ，1 和 2 。这些字符串中，答案是下标为 1 的字符串，因为它的长度为 3 ，是最短的字符串。</li>\n<li>对于  <code>wordsQuery[2] = &quot;xyz&quot;</code>  ， <code>wordsContainer</code>  中没有字符串跟它有公共后缀，所以最长公共后缀为  <code>&quot;&quot;</code>  ，下标为 0 ，1 和 2 的字符串都得到这一公共后缀。这些字符串中， 答案是下标为 1 的字符串，因为它的长度为 3 ，是最短的字符串。</li>\n</ul>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>** 输入：**wordsContainer = [&quot;abcdefgh&quot;,&quot;poiuygh&quot;,&quot;ghghgh&quot;], wordsQuery = [&quot;gh&quot;,&quot;acbfgh&quot;,&quot;acbfegh&quot;]</p>\n<p><strong>输出：</strong>[2,0,2]</p>\n</blockquote>\n<p><strong>解释：</strong></p>\n<blockquote>\n<p>我们分别来看每一个  <code>wordsQuery[i]</code>  ：</p>\n<ul>\n<li>对于  <code>wordsQuery[0] = &quot;gh&quot;</code>  ， <code>wordsContainer</code>  中有最长公共后缀  <code>&quot;gh&quot;</code>  的字符串下标分别为 0 ，1 和 2 。这些字符串中，答案是下标为 2 的字符串，因为它的长度为 6 ，是最短的字符串。</li>\n<li>对于  <code>wordsQuery[1] = &quot;acbfgh&quot;</code>  ，只有下标为 0 的字符串有最长公共后缀  <code>&quot;fgh&quot;</code>  。所以尽管下标为 2 的字符串是最短的字符串，但答案是 0 。</li>\n<li>对于  <code>wordsQuery[2] = &quot;acbfegh&quot;</code>  ， <code>wordsContainer</code>  中有最长公共后缀  <code>&quot;gh&quot;</code>  的字符串下标分别为 0 ，1 和 2 。这些字符串中，答案是下标为 2 的字符串，因为它的长度为 6 ，是最短的字符串。</li>\n</ul>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= wordsContainer.length, wordsQuery.length &lt;= 10000</code></li>\n<li><code>1 &lt;= wordsContainer[i].length &lt;= 5 * 1000</code></li>\n<li><code>1 &lt;= wordsQuery[i].length &lt;= 5 * 1000</code></li>\n<li><code>wordsContainer[i]</code>  只包含小写英文字母。</li>\n<li><code>wordsQuery[i]</code>  只包含小写英文字母。</li>\n<li><code>wordsContainer[i].length</code>  的和至多为  <code>5 * 100000</code>  。</li>\n<li><code>wordsQuery[i].length</code>  的和至多为  <code>5 * 100000</code>  。</li>\n</ul>\n<h3 id=\"思路字符串哈希\"><a class=\"anchor\" href=\"#思路字符串哈希\">#</a> 思路（字符串哈希）</h3>\n<div class=\"note info\">\n<ol>\n<li>将 <code>wordsContainer</code>  中的每个元素 <code>wordsContainer[i]</code>  的后缀都通过哈希保存起来，其哈希值作为 <code>哈希map</code>  的 <code>key</code> ，值指定为点字符串的长度和下标 i.</li>\n<li>每次添加操作实现检查当前的哈希值之前是否存在，如若不存在直接添加进哈希表，否则按照题中规则进行更新（保存长度最短，下标最小）</li>\n</ol>\n</div>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ull<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> pii<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    unordered_map<span class=\"token operator\">&lt;</span>ull<span class=\"token punctuation\">,</span> pii<span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">stringIndices</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> wordsContainer<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> wordsQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> wordsContainer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> minLength <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> minIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> wordsContainer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">&lt;</span> minLength<span class=\"token punctuation\">)</span>   minLength <span class=\"token operator\">=</span> length<span class=\"token punctuation\">,</span> minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            ull hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">--</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                hash <span class=\"token operator\">=</span> hash <span class=\"token operator\">*</span> <span class=\"token number\">131</span> <span class=\"token operator\">+</span> wordsContainer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   mp<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>length<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token keyword\">auto</span> item <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>first <span class=\"token operator\">></span> length<span class=\"token punctuation\">)</span> mp<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>length<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> wordsQuery<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> wordsQuery<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            ull hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">bool</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">--</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                hash <span class=\"token operator\">=</span> hash <span class=\"token operator\">*</span> <span class=\"token number\">131</span> <span class=\"token operator\">+</span> wordsQuery<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span>   res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note primary\">\n<p><strong>复杂度分析</strong></p>\n<ol>\n<li>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(max(n, m))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>，其中 <code>n</code>  指数组 <code>wordsContainer</code>  内所以元素的长度和， <code>m</code>  指数组 <code>wordsQuery</code>  内所以元素的长度和</li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(max(n, m))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>，其中 <code>n</code>  指数组 <code>wordsContainer</code>  内所以元素的长度和， <code>m</code>  指数组 <code>wordsQuery</code>  内所以元素的长度和</li>\n</ol>\n</div>\n",
            "tags": [
                "Leetcode周赛"
            ]
        }
    ]
}