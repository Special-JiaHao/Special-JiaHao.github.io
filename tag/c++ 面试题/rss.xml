<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>繁華落盡 似水流年 • Posts by &#34;c++ 面试题&#34; tag</title>
        <link>http://example.com</link>
        <description>编程日记 &amp; 随笔</description>
        <language>en</language>
        <pubDate>Wed, 06 Mar 2024 21:54:10 +0800</pubDate>
        <lastBuildDate>Wed, 06 Mar 2024 21:54:10 +0800</lastBuildDate>
        <category>mathematics</category>
        <category>语法</category>
        <category>C++</category>
        <category>VMware</category>
        <category>项目构建工具</category>
        <category>install</category>
        <category>数据库</category>
        <category>STL</category>
        <category>CNN</category>
        <category>Project</category>
        <category>C++ 面试题</category>
        <item>
            <guid isPermalink="true">http://example.com/value/C++%E9%9D%A2%E8%AF%95%E9%A2%98</guid>
            <title>C++面试题</title>
            <link>http://example.com/value/C++%E9%9D%A2%E8%AF%95%E9%A2%98</link>
            <category>C++ 面试题</category>
            <pubDate>Wed, 06 Mar 2024 21:54:10 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;程序编译过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序编译过程&#34;&gt;#&lt;/a&gt; 程序编译过程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;预处理：把 &lt;code&gt;#include&lt;/code&gt;  文件内容复制到 &lt;code&gt;.cpp&lt;/code&gt;  文件中，同时还会完成宏定义 &lt;code&gt;#define&lt;/code&gt;  内容替换&lt;/li&gt;
&lt;li&gt;编译：转化为汇编代码，主要工作是检查一些语法规则，不检查逻辑&lt;/li&gt;
&lt;li&gt;汇编：将汇编代码转化为二进制格式的文件（机器码）&lt;/li&gt;
&lt;li&gt;链接：将多个目标文件以及库文件链接成最终的可执行文件
&lt;ol&gt;
&lt;li&gt;静态链接：将&lt;/li&gt;
&lt;li&gt;动态链接：&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c语言内存空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言内存空间&#34;&gt;#&lt;/a&gt; C 语言内存空间&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;栈：&lt;/li&gt;
&lt;li&gt;堆：&lt;/li&gt;
&lt;li&gt;代码区：&lt;/li&gt;
&lt;li&gt;全局 / 静态存储区：&lt;/li&gt;
&lt;li&gt;常量存储区&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;堆与栈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#堆与栈&#34;&gt;#&lt;/a&gt; 堆与栈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;栈内存是由编译器自动管理的，堆可由程序员控制，对于开辟的内存需要主动释放，否则容易产生内存泄漏&lt;/li&gt;
&lt;li&gt;栈的内存增长方向是向着地址空间减小的方向，堆内存的增长方向是朝着地址空间增大的方向.&lt;/li&gt;
&lt;li&gt;栈分配的内存都是连续空间，同时是一个先进后出的数据结构，其不存在内存碎片的问题。堆所分配的内存空间不一定连续，会存在内存碎片的问题&lt;/li&gt;
&lt;li&gt;栈的分配效率要高于堆的分配效率。操作系统内有专门的寄存器用于存储栈的地址和栈顶指针地址。堆的内存分配是调用 C/C++ 的库函数，分配空间时还需要按照不同的算法去搜索足够大的空间进行分配。同时由于内存碎片问题，操作系统会进行内存紧缩的操作，需要额外的系统开销.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;static&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#static&#34;&gt;#&lt;/a&gt; static&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在函数中申明变量时，被 &lt;code&gt;static&lt;/code&gt;  修饰的变量只会被初始化一次，改变了变量的存储位置（原来存储在栈区，现在存储在静态 / 全局存储区），延长了变量的生命周期&lt;/li&gt;
&lt;li&gt;被 &lt;code&gt;static&lt;/code&gt;  修饰的变量默认初始化为 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;  修饰全局变量
&lt;ol&gt;
&lt;li&gt;全局变量：既可以在源文件中使用，也可以在其他文件中使用（使用 &lt;code&gt;extern&lt;/code&gt;  修饰）&lt;/li&gt;
&lt;li&gt;静态全局变量：只能在源文件中使用，使得全局变量的作用域变小&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;  所修饰的成员变量为所以对象共享，不占用具体实例的空间.&lt;/li&gt;
&lt;li&gt;静态成员变量必须在类外定义，定义时不加 &lt;code&gt;static&lt;/code&gt;  关键字&lt;/li&gt;
&lt;li&gt;静态成员函数没有隐藏的 &lt;code&gt;this&lt;/code&gt;  指针，不能访问非静态成员&lt;/li&gt;
&lt;li&gt;访问静态成员变量的方法：
&lt;ol&gt;
&lt;li&gt;静态成员变量为 &lt;code&gt;public&lt;/code&gt; （对象，类，匿名对象）&lt;/li&gt;
&lt;li&gt;静态成员变量为 &lt;code&gt;private&lt;/code&gt; （对象的静态成员函数，类的静态成员函数，匿名对象的静态成员函数）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c三大特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c三大特性&#34;&gt;#&lt;/a&gt; C++ 三大特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;封装、继承、多态（封装和继承可以实现 &lt;code&gt;代码的重用&lt;/code&gt; ，多态可以实现 &lt;code&gt;接口的重用&lt;/code&gt; ）
&lt;ol&gt;
&lt;li&gt;封装：将数据和实现过程包裹起来，隐藏代码的实现细节，通过定义的接口来访问数据成员，使代码模块化. (直接体现面向对象，代码重用，权限控制)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt; ：公有权限，类内可以访问，类外也可以访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt; ：保护权限，类内可以访问，类外不可以访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt; ：私有权限，类内可以访问，类外不可以访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;继承：无需重新编写代码而可以直接使用现有类的所以功能，同时可以对现有类进行功能上的扩展，是一个从一般到特殊的过程.
&lt;ul&gt;
&lt;li&gt;权限继承：表示基类在子类中的最高权限（破坏继承： &lt;code&gt;friend&lt;/code&gt; ，  &lt;code&gt;using&lt;/code&gt; ）&lt;/li&gt;
&lt;li&gt;多继承&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多态：一个接口有多种形态；多态是在不同继承关系的类对象，可以通过父类指针去指向子类对象，通过父类指针调用同一函数，可以产生了不同的行为.（父类的指针可以具有多种形态，称之为多态）（用父类型别的指针指向其子类的实例，然后通过父类指针调用实际的子类的成员函数）
&lt;ul&gt;
&lt;li&gt;虚函数（函数地址在运行阶段确定）（每个包含虚函数的类实例化出的对象除了成员变量之外，最前面会存储虚函数指针；当发生继承时，派生类的虚表和父类一致，若子类中自身包含虚函数，则会添加到后面，若子类虚函数重写了父类的虚函数，则虚表中的地址也会发生响应的改变）&lt;/li&gt;
&lt;li&gt;编译器在编译阶段会为类（含义虚函数的类）生成虚函数表&lt;/li&gt;
&lt;li&gt;协变：基类和派生类虚函数的返回值不同（基类返回基类对象的指针或引用，派生类返回派生类对象的指针或引用）&lt;/li&gt;
&lt;li&gt;虚析构函数：基类中析构函数前使用 &lt;code&gt;virtual&lt;/code&gt;  修饰。当基类指针指向派生类对象时，使用基类指针去释放空间时，则会去先调用派生类的析构函数，再去调用基类的析构函数；若不加 &lt;code&gt;virtual&lt;/code&gt;  则不会触发动态绑定（多态），只会调用基类的析构函数，导致内存泄漏. (虽然虚构函数名不一样，其实也是一种重写，系统内部对析构函数做了特殊处理，将析构函数名称都改成了 &lt;code&gt;destructor&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;虚函数地址在运行时绑定，使用了虚函数表的机制，所以在调用的时候会增加一次内存开销.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么c默认析构函数不是虚函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么c默认析构函数不是虚函数&#34;&gt;#&lt;/a&gt; 为什么 C++ 默认析构函数不是虚函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;虚函数需要虚函数表和虚函数表指针，会占用内存空间。如果一个类没有子类，那么就没有必要讲析构函数设置为虚函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重载-重写-重定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重载-重写-重定义&#34;&gt;#&lt;/a&gt; 重载、重写、重定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;重载：多个同名函数，他们的参数个数或者参数类型不同；（编译器根据函数不同的参数表，对同名函数的名称做修饰，然后这些同名函数就变成了不同的函数），也可以称之为静态多态，函数地址在编译器就已经确定了&lt;/li&gt;
&lt;li&gt;重定义：继承中的同名隐藏，当派生类中有一个函数与基类的函数名相同，不管参数是否相同，只要该函数不为虚函数，发生了重定义.&lt;/li&gt;
&lt;li&gt;重写：派生类中重写了基类的虚函数，其中函数名、参数列表和返回值都相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;final和override&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#final和override&#34;&gt;#&lt;/a&gt; final 和 override&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt; ：修饰虚函数，表示该虚函数不能再被继承，通俗来讲就是一旦加上 final 关键字，则在派生类中就无法被重写；修饰类，表示该类不可以被继承&lt;/li&gt;
&lt;li&gt;&lt;code&gt;override&lt;/code&gt; ：检查派生类虚函数是否重写了基类的某个虚函数，如果没有则编译器报错&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;struct-与class&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#struct-与class&#34;&gt;#&lt;/a&gt; struct 与 class&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++ 中的 &lt;code&gt;struct&lt;/code&gt;  默认 &lt;code&gt;public&lt;/code&gt;  共有权限， &lt;code&gt;class&lt;/code&gt;  默认 &lt;code&gt;private&lt;/code&gt;  私有权限&lt;/li&gt;
&lt;li&gt;C 语言中的 &lt;code&gt;struct&lt;/code&gt;  只是一个变量的集合体，只可以用于封装数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;new-和-malloc的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#new-和-malloc的区别&#34;&gt;#&lt;/a&gt; new 和 malloc 的区别&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;new&lt;/code&gt;  和 &lt;code&gt;malloc&lt;/code&gt;  都是用于分配内存的，其中 &lt;code&gt;new&lt;/code&gt;  是 C++ 中的操作符，可以被重载， &lt;code&gt;malloc&lt;/code&gt;  是 C 语言中的库函数，不可以被重载&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参数不同；new 可以自动计算所分配的对象的内存大小，同时返回值为指向该对象的指针. malloc 则需要传入需要分配的内存的字节数，返回一个 &lt;code&gt;void *&lt;/code&gt;  指针&lt;/li&gt;
&lt;li&gt;new 分配失败会抛出异常 &lt;code&gt;bac_alloc&lt;/code&gt; ，malloc 分配失败会返回 &lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;new 分配的内存在 &lt;code&gt;free store&lt;/code&gt; （自由存储区）上，malloc 分配的内存在堆上（其中自由存储区是 C++ 中的一个抽象的概念，new 的底层调用的逻辑是先调用 &lt;code&gt;operator new&lt;/code&gt;  分配内存，由系统决定或者用户重载 &lt;code&gt;operator new&lt;/code&gt;  决定，其次是调用对象的构造函数，初始化成员变量）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;malloc&lt;/code&gt;  分配的内存是虚拟内存，而 &lt;code&gt;new&lt;/code&gt;  分配的内存是物理内存。因为 new 调用了对象的构造函数，对对象成员进行了初始化（发生了缺页中断，使得虚拟内存映射到了物理内存）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;delete-与-free&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#delete-与-free&#34;&gt;#&lt;/a&gt; delete 与 free&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;delete&lt;/code&gt;  和 &lt;code&gt;free&lt;/code&gt;  都是用于释放内存的，其中 &lt;code&gt;delete&lt;/code&gt;  是 C++ 中的操作符，可以被重载，free 是 C 语言中的库函数，不可以被重载&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参数不同；delete 需要给出释放的对象的类型指针，free 可以是 &lt;code&gt;void *&lt;/code&gt;  类型的指针（delete 底层调用的逻辑是先调用对象的析构函数，再调用 &lt;code&gt;operator delete&lt;/code&gt;  释放对象所占内存）（free 只需要提供 &lt;code&gt;void *&lt;/code&gt;  就可以释放申请的所以内存： &lt;code&gt;malloc&lt;/code&gt;  在分配内存时，不仅仅是分配了用户所需要的内存空间的大小，还会在该空间上部分配额外的一部分空间用于存储此次分配的内存的描述信息）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;C++11&lt;/strong&gt; is the second major version of C++ and the most important update since C&lt;ins&gt;98. A large number of changes were introduced to both standardize existing practices and improve the abstractions available to the C&lt;/ins&gt; programmers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意： &lt;code&gt;delete&lt;/code&gt;  和 &lt;code&gt;free&lt;/code&gt;  被调用后，指针也不会指向空，如果没有其他用途，需要把它设置为 &lt;code&gt;nullptr&lt;/code&gt; ，否则会出现野指针.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;explicit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#explicit&#34;&gt;#&lt;/a&gt; explicit&lt;/h2&gt;
&lt;h2 id=&#34;c强制类型转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c强制类型转换&#34;&gt;#&lt;/a&gt; C++ 强制类型转换&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;static_cast&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用于层次结构中基类与派生类间指针的转换&lt;/p&gt;
&lt;p&gt;a. 上行转换（派生类指针转化为基类指针），安全&lt;/p&gt;
&lt;p&gt;b. 下行转化（基类指针转化为派生类指针），不安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本数据类型的转化&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dynamic_cast&lt;/code&gt; ：运行时处理（动态类型转换），只能针对指针或引用，专门用于派生类与基类之间的转换，会进行类型的检查，较安全（转换失败，指针为 &lt;code&gt;nullptr&lt;/code&gt; ，和多态一起使用）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt; ：转化过程仅仅是简单的比特位拷贝，不安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;const_cast&amp;lt;T&amp;gt;()&lt;/code&gt; ：用于修改变量的 &lt;code&gt;const&lt;/code&gt;  或 &lt;code&gt;volatile&lt;/code&gt;  属性，变量类型与转换后的类型一致&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;指针与引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指针与引用&#34;&gt;#&lt;/a&gt; 指针与引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;指针是一个实体，占用内存空间，含义是一个地址；而引用只是变量的别名，不占用内存空间.&lt;/li&gt;
&lt;li&gt;指针可不进行初始化，也可以指向空，并且指向可以改变；引用必须初始化，且只可绑定一个变量。这也导致了在使用指针时，往往需要判空操作，而引用是一种安全的指针，一定不为空（引用的底层是通过指针来实现）.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常引用&#34;&gt;#&lt;/a&gt; 常引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;保护传递给函数的数据在函数内不背改变.  &lt;code&gt;const 类型&amp;amp; 引用名&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 C++ 中，临时对象都是 &lt;code&gt;const&lt;/code&gt;  类型的，const 类型的对象转换为非 const 类型是非法的.&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string &lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;string &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	    &lt;span class=&#34;token comment&#34;&gt;//  非法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello world&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 非法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;将引用作为函数返回值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将引用作为函数返回值&#34;&gt;#&lt;/a&gt; 将引用作为函数返回值&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;好处：在内存中不会产生返回值副本&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：不能返回局部变量的引用，不能返回函数内部 new 的内存空间的引用（无法释放）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;野指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#野指针&#34;&gt;#&lt;/a&gt; 野指针&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;野指针：指向已被释放的内存空间或者指向没有访问权限的内存空间&lt;/li&gt;
&lt;li&gt;指针未被初始化、内存释放后未将指针设置为 &lt;code&gt;nullptr&lt;/code&gt; 、指针超过了变量的作用范围（越界）都可能导致野指针的产生&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常量指针与指针常量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常量指针与指针常量&#34;&gt;#&lt;/a&gt; 常量指针与指针常量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;常量指针： &lt;code&gt;int const* p = a&lt;/code&gt; ，指针的指向可以改变，而不能通过该指针去改变所指向的内容&lt;/li&gt;
&lt;li&gt;指针常量： &lt;code&gt;int *const p = a&lt;/code&gt; ，指针的指向不可改变，可以通过指针去改变指向的内容.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;const与define&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#const与define&#34;&gt;#&lt;/a&gt; const 与 define&lt;/h2&gt;
&lt;h2 id=&#34;inline内联函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#inline内联函数&#34;&gt;#&lt;/a&gt; inline 内联函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;把 inline 函数体复制到函数调用处（避免了函数调用所需要的压栈和出栈操作，提高了程序运行效率）&lt;/li&gt;
&lt;li&gt;特性类似于宏定义，但 inline 会做类型的检查&lt;/li&gt;
&lt;li&gt;不能包含循环、递归复杂操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;  函数有多个返回点，会使用 &lt;code&gt;goto&lt;/code&gt;  跳转&lt;/li&gt;
&lt;li&gt;在类中定义的成员函数，除了虚函数，往往会自动转化为内联函数&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ol&gt;
&lt;li&gt;代码膨胀，占用代码区的内存空间&lt;/li&gt;
&lt;li&gt;是否内敛由编译器决定，不可控.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;this指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#this指针&#34;&gt;#&lt;/a&gt; this 指针&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;this 是一个隐含于每一个非静态成员函数中的特殊指针，指向被实例化的对象。当调用对象成员函数时，会将对象的地址赋值给 &lt;code&gt;this&lt;/code&gt;  指针，并会隐式的将 &lt;code&gt;this&lt;/code&gt;  指针传入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tihs&lt;/code&gt;  为一个右值，并由 &lt;code&gt;const&lt;/code&gt;  修饰&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;初始化列表c11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始化列表c11&#34;&gt;#&lt;/a&gt; 初始化列表（C++11）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通过花括号来进行初始化。直接在变量名后面跟上初始化列表来进行对象的初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;using定义别名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#using定义别名&#34;&gt;#&lt;/a&gt; using 定义别名&lt;/h2&gt;
&lt;h2 id=&#34;autoc11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autoc11&#34;&gt;#&lt;/a&gt; auto（C++11）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;类型推导，通过变量值编译器自动的进行类型的推导，相当于一个占位符（使用 &lt;code&gt;auto&lt;/code&gt;  时，必须进行变量的初始化）&lt;/li&gt;
&lt;li&gt;不能在函数的参数中使用，不能用于定义数组，不能用于类的非静态成员&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;decltypec11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#decltypec11&#34;&gt;#&lt;/a&gt; decltype（C++11）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;推断表达式类型作为变量的定义类型&lt;/li&gt;
&lt;li&gt;推断函数返回值（实际不会调用，仅推断）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;范围for循环c11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#范围for循环c11&#34;&gt;#&lt;/a&gt; 范围 for 循环（C++11）&lt;/h2&gt;
&lt;h2 id=&#34;nullptr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nullptr&#34;&gt;#&lt;/a&gt; nullptr&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;代替了 &lt;code&gt;NULL&lt;/code&gt; ,  &lt;code&gt;NULL&lt;/code&gt;  有时存在二义性.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lambda表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lambda表达式&#34;&gt;#&lt;/a&gt; lambda 表达式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;匿名函数。一个 &lt;code&gt;lambda&lt;/code&gt;  表达式具有一个返回值、一个参数列表和一个函数体。与函数不同的是， &lt;code&gt;lambda&lt;/code&gt;  表达式可以定义在函数体内部，格式为： &lt;code&gt;[capture list](parameter list)-&amp;gt;return type &amp;#123;function body&amp;#125;&lt;/code&gt; ，不能用默认参数.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;capture list&lt;/code&gt; ：捕获列表
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt; ：不捕获任何变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;amp;]&lt;/code&gt; ：捕获外部作用域中的所有变量，并作为引用在函数体内使用（按引用捕获）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[=]&lt;/code&gt; ：捕获外部作用域中的所有变量，并作为副本在函数体内使用（按值捕获）&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;左值引用与右值引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#左值引用与右值引用&#34;&gt;#&lt;/a&gt; 左值引用与右值引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;左值引用：对左值的引用（可以出现在等式的左边，也可以出现在等式的右边，是具名的，同时可以取地址， &lt;code&gt;const左值引用&lt;/code&gt; 可以引用右值）; 避免对象的拷贝，在一定程度上让程序脱离了危险的指针&lt;/li&gt;
&lt;li&gt;右值引用：右值（只能出现在等式的右边，不能取地址，纯右值 [字面值，返回的非引用的函数调用，后置自增 / 减，算术表达式，逻辑表达式，比较表达式], 将亡值 [C++11 引入，会触发移动构造或者移动赋值，并进行资源转移]）往往是没有名称，在实际开发中我们可能需要对右值进行修改，需要借助右值引用（ &lt;code&gt;类型&amp;amp;&amp;amp; 变量名=右值&lt;/code&gt; ）
&lt;ol&gt;
&lt;li&gt;移动语义：将一个临时对象（将亡值）的资源转移到另外一个对象中去，可以减少不必要的资源的销毁和开辟，提高运行效率&lt;/li&gt;
&lt;li&gt;&lt;code&gt;move()&lt;/code&gt; ：将左值强制转化为右值引用，通过右值引用来使用，实现移动语义.&lt;/li&gt;
&lt;li&gt;完美转发&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数组指针与指针数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组指针与指针数组&#34;&gt;#&lt;/a&gt; 数组指针与指针数组&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数组指针： &lt;code&gt;int (*p)[n]&lt;/code&gt; ，指向一个整形的一维数组，这个数组的长度是 n，在执行 &lt;code&gt;p+1&lt;/code&gt;  操作时， &lt;code&gt;p&lt;/code&gt;  要跨越 n 个整形数据长度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针数组： &lt;code&gt;int *p[n]&lt;/code&gt; ， &lt;code&gt;[]&lt;/code&gt;  优先级高于 &lt;code&gt;*&lt;/code&gt; ，是一个具有 n 个指针类型的数组.&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//a 理解成一个一维数组，元素为 a [0], a [1], a [2]， 其中 a [0] 的类型为 (int *), a 与 &amp; amp;a [0] 等价，类型为 int (*p)[4]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stl六大组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stl六大组件&#34;&gt;#&lt;/a&gt; STL 六大组件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;容器、算法、迭代器、适配器、仿函数、空间分配器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么stack的pop和top要分离&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么stack的pop和top要分离&#34;&gt;#&lt;/a&gt; 为什么 stack 的 pop () 和 top () 要分离&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;pop()&lt;/code&gt;  来弹出并返回栈顶值这种方式不安全，可能导致原始数据丢失；pop () 在函数返回时，会发生对象的拷贝，如果弹出对象比较大，同时堆内内存比较紧张，可能无法分配住够的内存会抛出异常，无法正确的返回栈顶元素，但是此时栈顶元素已经弹出.&lt;/li&gt;
&lt;li&gt;通过引用或者指针可以解决这个问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;map-set-multimap-multiset关联容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#map-set-multimap-multiset关联容器&#34;&gt;#&lt;/a&gt; map、set、multimap、multiset（关联容器）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;底层实现是 &lt;code&gt;红黑树&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;  和 &lt;code&gt;multiset&lt;/code&gt;  会对元素进行排序， &lt;code&gt;set&lt;/code&gt;  不存储重复元素， &lt;code&gt;multiset&lt;/code&gt;  可以存储重复元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;  和 &lt;code&gt;multimap&lt;/code&gt;  存储的元素为 k-v 键值对，会更加 key 进行排序， &lt;code&gt;map&lt;/code&gt;  中不允许重复 key， &lt;code&gt;multimap&lt;/code&gt;  可以重复 key&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;unordered_set与set&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unordered_set与set&#34;&gt;#&lt;/a&gt; unordered_set 与 set&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unordered_set&lt;/code&gt;  内部无序，通过哈希来实现，对于非标准类型需要提供判等函数，插入，查询，删除的时间复杂度都是 &lt;code&gt;O(1)&lt;/code&gt; ，但是不稳定，当数据量大冲突大时，时间复杂度最坏退化为 &lt;code&gt;O(n)&lt;/code&gt; ； &lt;code&gt;set&lt;/code&gt;  内部有序，通过红黑树来实现，对于非标准类型需要提供比较函数，插入，查询，删除的时间复杂度比较稳定 &lt;code&gt;log2(n)&lt;/code&gt; .&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;哈希函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈希函数&#34;&gt;#&lt;/a&gt; 哈希函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;平方取中发：去关键字的平方值的中间几位作为哈希地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;哈希冲突&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈希冲突&#34;&gt;#&lt;/a&gt; 哈希冲突&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;开放地址法（再散列）：线性探测，再平方探测、伪随机探测&lt;/li&gt;
&lt;li&gt;拉链法&lt;/li&gt;
&lt;li&gt;再哈希&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vector的扩容机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vector的扩容机制&#34;&gt;#&lt;/a&gt; vector 的扩容机制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;  是一个动态数组，当插入元素使，若 &lt;code&gt;capacity&lt;/code&gt;  和 &lt;code&gt;size&lt;/code&gt;  相等，则会发生扩容； &lt;code&gt;vector&lt;/code&gt;  扩容并不是在原有空间进行扩充，而是在堆内申请一块更大空间的区域，将原来的数据复制过去，同时释放原有空间。至于这个扩容系数，得看具体的实现，得看取舍（内存和效率的取舍）， &lt;code&gt;GCC&lt;/code&gt;  下的扩容系数是 2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vectorclear-swap-shrink_to_fit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vectorclear-swap-shrink_to_fit&#34;&gt;#&lt;/a&gt; vector（clear(), swap(), shrink_to_fit()）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clear()&lt;/code&gt; ：清空内容，不释放内存（capacity 不变，size 变成 0）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap()&lt;/code&gt; ：清空内容，释放内存 (capacity，size 均变成 0)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shrink_to_fit()&lt;/code&gt; ：可能会释放内存，使 capacity 与 size 适配（capacity 与 size 相等）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vector与list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vector与list&#34;&gt;#&lt;/a&gt; vector 与 list&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;  的内存空间是连续的，可以在 &lt;code&gt;o(1)&lt;/code&gt;  内实现随机存取，但是需要再内部进行插入和删除时，需要 &lt;code&gt;O(n)&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt;  是双向链表，内存空间不一定连续，往往是离散的， &lt;code&gt;O(n)&lt;/code&gt;  完成随机存取，但是可以 &lt;code&gt;O(1)&lt;/code&gt;  实现删除和插入操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;clear的时间复杂度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#clear的时间复杂度&#34;&gt;#&lt;/a&gt; clear 的时间复杂度&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;无论是顺序容器还是关联容器在使用 &lt;code&gt;clear()&lt;/code&gt;  时，时间复杂度都是 &lt;code&gt;O(n)&lt;/code&gt; ；因为执行 &lt;code&gt;clear()&lt;/code&gt;  需要调用元素的析构函数，这个析构函数会逐个进行。不过当存储的数据类型是基本数据类型的时候，不需要虚构，系统可能会做一些优化， &lt;code&gt;vector&lt;/code&gt;  容器可以使得复杂度降为常数级.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c智能指针c11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c智能指针c11&#34;&gt;#&lt;/a&gt; C&lt;ins&gt; 智能指针（C&lt;/ins&gt;11）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;更加安全且容易的管理动态内存，防止内存泄漏&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;auto_ptr&lt;/code&gt; ：C&lt;ins&gt;98 引入，由于其不够安全，被 &lt;code&gt;unique_ptr&lt;/code&gt;  取代，C&lt;/ins&gt;11 废弃；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unique_ptr&lt;/code&gt; ：与 &lt;code&gt;auto_ptr&lt;/code&gt;  一样采用所有权模式，同一时间只能有一个指针可以指向某个对象，但是 &lt;code&gt;unique_ptr&lt;/code&gt;  禁止了拷贝操作， &lt;code&gt;unique_ptr&lt;/code&gt;  采用了移动赋值 &lt;code&gt;move()&lt;/code&gt;  函数来进行控制权转移.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;share_ptr&lt;/code&gt; ：共享所有权的一个智能指针。允许多个指针指针指向同一个对象，并使用引用计数来管理指向对象的指针（成员函数 &lt;code&gt;use_count()&lt;/code&gt;  可获得引用计数），该对象和相关资源会在最后一个引用被销毁时释放&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;  循环计数问题：创建了两个 &lt;code&gt;shared_ptr&lt;/code&gt;  分别指向两个对象，而这两个对象内的一个共享指针分别又指向了对方，造成了循环计数，使得两个对象的空间都无法被释放.&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ListNode&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; _data&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	shared_ptr&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ListNode&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; ptr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;ListNode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;_data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ListNode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;~ListNode()&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	shared_ptr&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ListNode&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;node1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ListNode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	shared_ptr&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ListNode&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;node2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ListNode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; node1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use_count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; node2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use_count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	node1&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;ptr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; node2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	node2&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;ptr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; node1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; node1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use_count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; node2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use_count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 常用的解决方案是讲成员函数内的 shared_pre 改成弱指针 weak_ptr&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;weak_ptr&lt;/code&gt; ：一种不控制对象生命周期的智能指针，不会影响 &lt;code&gt;share_ptr&lt;/code&gt;  的引用计数，只是提供一种访问其管理对象的方式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内存泄漏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存泄漏&#34;&gt;#&lt;/a&gt; 内存泄漏&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;堆内存泄漏（ &lt;code&gt;Heap leak&lt;/code&gt; ）&lt;/li&gt;
&lt;li&gt;在释放对象数组时没有使用 &lt;code&gt;delete []&lt;/code&gt;  而使用 &lt;code&gt;delete&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;没有将基类的析构函数定义为虚函数&lt;/li&gt;
&lt;li&gt;缺少拷贝构造函数和重载赋值运算法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深拷贝与浅拷贝&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#深拷贝与浅拷贝&#34;&gt;#&lt;/a&gt; 深拷贝与浅拷贝&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;浅拷贝：C++ 默认的方式（如果程序员不主动编写拷贝构造函数和赋值构造，编译器将以浅拷贝的方式生成缺省的函数），简单的将成员函数值进行复制. （当成员变量出现指针时，则会导致多个指针指向同一片内存空间，新旧对象共享内存，当其中一个对象释放内存，再调释放其他对象时就会出现问题，同一片内存空间被释放了多次）&lt;/li&gt;
&lt;li&gt;深拷贝：必须显示的提供拷贝构造函数和赋值构造，新旧对象不共享内存&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c类默认生成的函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c类默认生成的函数&#34;&gt;#&lt;/a&gt; C++ 类默认生成的函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;无参构造函数、拷贝构造函数、析构函数、重载赋值运算符、重载取地址符，均是 &lt;code&gt;public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stl内存优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stl内存优化&#34;&gt;#&lt;/a&gt; STL 内存优化&lt;/h2&gt;
&lt;h2 id=&#34;const&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#const&#34;&gt;#&lt;/a&gt;  &lt;code&gt;const&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当以编译初始化的方式定义了一个 &lt;code&gt;const&lt;/code&gt;  对象时，例如 &lt;code&gt;const int bufsize=512&lt;/code&gt; ，编译器将在编译过程中把用到该变量的地方都替换成对应的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;const&lt;/code&gt;  对象被设定为仅在文件内有效，当多个文件中出现了同名的 &lt;code&gt;const&lt;/code&gt;  变量时，其实等同于在不同文件下分别定义了独立的变量；当某一个 &lt;code&gt;const&lt;/code&gt;  对象需要再多个文件间共享时，我们需要对于 &lt;code&gt;const&lt;/code&gt;  变量不管是声明还是定义都添加 &lt;code&gt;extern&lt;/code&gt;  关键字。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对常量的引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对常量的引用&#34;&gt;#&lt;/a&gt; 对常量的引用&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; dval &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.14&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;r &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dval&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;等价于&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; temp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dval&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;r &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; temp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;系统在内部会将对常数的引用绑定在一个临时对象上，实际并未绑定 &lt;code&gt;dval&lt;/code&gt; ；通过这种设计可以防止非法的操作。&lt;/p&gt;
&lt;h2 id=&#34;顺序容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序容器&#34;&gt;#&lt;/a&gt; 顺序容器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt; ：可变长数组。支持快速随机访问。在尾部之外的其他位置插入或者删除元素可能比较慢&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque&lt;/code&gt; ：双端队列。支持快速随机访问。在头部或者尾部插入、删除元素速度很快&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; ：双向列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forward_list&lt;/code&gt; ：单向列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt; ：固定大小数组。支持快速随机访问。不能添加或者删除元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt; ：与 &lt;code&gt;vector&lt;/code&gt;  类似，但专门用于存储字符&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原始字面量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原始字面量&#34;&gt;#&lt;/a&gt; 原始字面量&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定义方式&lt;/strong&gt;：&lt;em&gt;R×××(原始字符串)×××&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;()&lt;/code&gt;  两侧的字符串 &lt;code&gt;×××&lt;/code&gt;  可以省略，原始字面量 &lt;code&gt;R&lt;/code&gt;  可以直接表示字符串的实际含义（不进行转义）&lt;/p&gt;
&lt;h2 id=&#34;指针空值类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指针空值类型&#34;&gt;#&lt;/a&gt; 指针空值类型&lt;/h2&gt;
&lt;p&gt;C 与 C&lt;ins&gt; 内定义的 &lt;code&gt;NULL&lt;/code&gt;  含义不同；C&lt;/ins&gt; 内定义： &lt;code&gt;#define NULL 0&lt;/code&gt; , 而 C 内的定义： &lt;code&gt;#define NULL ((void *)0)&lt;/code&gt; .C 与 C&lt;ins&gt; 都是强类型语言，从 C 到 C&lt;/ins&gt; 语言的类型定义变的更加严格，C++ 内不允许 &lt;code&gt;void( *)&lt;/code&gt;  类型的变量隐式转化为其他类型。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 宏定义&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;ifndef&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token constant&#34;&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;ifdef&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;__cplusplus&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;NULL&lt;/span&gt;  &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;nullptr&lt;/code&gt;  无法隐式的转化为整形，但是可以隐式匹配指针类型&lt;/p&gt;
&lt;h2 id=&#34;constexpr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#constexpr&#34;&gt;#&lt;/a&gt; constexpr&lt;/h2&gt;
&lt;p&gt;const 的双重语义：&lt;em&gt;变量只读&lt;/em&gt;和&lt;em&gt;修饰常量&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;c++ 程序从编写完成到执行分为四个阶段：&lt;em&gt;预处理&lt;/em&gt;、&lt;em&gt;编译&lt;/em&gt;、&lt;em&gt;汇编&lt;/em&gt;和&lt;em&gt;链接&lt;/em&gt;。非常量表达式只能在运行阶段计算出结果，但常量表达式计算发生程序编译阶段，这可以大大提高程序的执行效率。&lt;/p&gt;
&lt;p&gt;为了提高 C++ 程序的执行效率，我们可以将程序中值不需要发生变化的变量定义为常量，也可以使用 &lt;code&gt;constexpr&lt;/code&gt;  修饰函数返回值，这种函数被称作常量表达式函数，这写函数主要包括一下几种：普通函数、类成员函数、类构造函数、模版函数。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数必须要用返回值，并且 &lt;code&gt;return&lt;/code&gt;  返回的表达式必须是常量表达式&lt;/li&gt;
&lt;li&gt;函数在使用之前，必须有对应的定义语句&lt;/li&gt;
&lt;li&gt;整个函数的函数体中，不能出现非常量表达式之外的语句（ &lt;code&gt;using, typedef, static_assert, return&lt;/code&gt;  语句除外）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C++11 语法中， &lt;code&gt;constexpr&lt;/code&gt;  可以修饰模版函数，但由于模版中类型的不确定性，因此模版函数实例化后的函数是否符合常量表达式函数的要求也是不确定的。如果 &lt;code&gt;constexpr&lt;/code&gt;  修饰的模版函数实例化结果不满足常量表达式函数的要求，则 &lt;code&gt;constexpr&lt;/code&gt;  会被自动忽略，即该函数就等同于一个普通函数&lt;/p&gt;
&lt;h2 id=&#34;volatile&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#volatile&#34;&gt;#&lt;/a&gt; volatile&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用于修饰变量，表示其值随时可能发送变化，编译器不会对访问该变量的代码进行优化，可以保证访问变量的稳定（从内存中读取）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volatile&lt;/code&gt;  指针&lt;/li&gt;
&lt;li&gt;多线程下的 &lt;code&gt;volatile&lt;/code&gt; ：当多个线程都需要用到某一个变量时，应该用 &lt;code&gt;volatile&lt;/code&gt; ，防止编译器把变量从内存装入 CPU 寄存器中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;auto&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#auto&#34;&gt;#&lt;/a&gt; auto&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;auto&lt;/code&gt;  可以自动推导变量类型；使用 &lt;code&gt;auto&lt;/code&gt;  声明的变量必须要进行初始化，以让编译器推导出它的实际类型，在编译阶段将 &lt;code&gt;auto&lt;/code&gt;  占位符替换成其真正的类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当变量不是指针或者引用类型时，推导的结果中不会保留 &lt;code&gt;const和、volatile&lt;/code&gt;  关键字&lt;/li&gt;
&lt;li&gt;当变量是指针或者引用类型时，推导的结果中会保留 &lt;code&gt;const和、volatile&lt;/code&gt;  关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;auto的限制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#auto的限制&#34;&gt;#&lt;/a&gt; auto 的限制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不能作为函数参数使用。因为只有在函数被调用的时候才会给函数参数传递实参， &lt;code&gt;auto&lt;/code&gt;  要求必须给修饰的变量赋值。&lt;/li&gt;
&lt;li&gt;不能用于类的非静态成员变量的初始化（类的非静态成员不属于类，而属于对象，只有对象被创建出来之后，才能给非静态成员变量赋值）&lt;/li&gt;
&lt;li&gt;不能使用 &lt;code&gt;auto&lt;/code&gt;  关键字定义数组&lt;/li&gt;
&lt;li&gt;无法使用 &lt;code&gt;auto&lt;/code&gt;  推导出模版&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用结构化绑定来解包绑定的返回值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用结构化绑定来解包绑定的返回值&#34;&gt;#&lt;/a&gt; 使用结构化绑定来解包绑定的返回值&lt;/h2&gt;
&lt;p&gt;结构化绑定是 C++17 新特性，其可以结合语法糖自动推导类型，并可以从组对、元祖和结构体中提取单独的变量（解包）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用结构化绑定是为了能过更加简单的为绑定的多个变量进行赋值&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//  对 pair 的结构化绑定&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;pair&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;divide_remainder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; dividend&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; divisor&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;divide_remainder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//  对 tuple 进行结构化绑定&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;tuple&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;chrono&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;system_clock&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;time_point&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; valid_time&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; price&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;stock_info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;INTC&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//  对自定义结构体进行结构化绑定&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;employee&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    string name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    string role&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; salary&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;employee&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; employees&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 注意：在适当时候使用引用，尽量减少不必要的复制 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; role&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; salary&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; employees&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Name: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Role: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; role&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Salary: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; salary &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;STL&lt;/code&gt;  中的基础数据结构都能通过结构化绑定来直接进行访问&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;map&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size_t&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; animal_population&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;species&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; animal_population&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;There are &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; count &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; species&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; on this planet.\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Node：与 C 的语法特征不同，将复杂结构体作为返回值传回会耗费大量的时间，因为对象需要在返回函数中进行初始化，之后将这个对象拷贝到相应容器中返回给调用端。现代编译器支持&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%98%E5%8C%96&#34;&gt;&lt;strong&gt;返回值优化&lt;/strong&gt;&lt;/a&gt; (RVO, &lt;em&gt;return value optimization&lt;/em&gt;) 技术，这项技术可以省略中间副本的拷贝。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;带初始化的if和switch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#带初始化的if和switch&#34;&gt;#&lt;/a&gt; 带初始化的 if 和 switch&lt;/h2&gt;
&lt;h2 id=&#34;括号初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#括号初始化&#34;&gt;#&lt;/a&gt; 括号初始化&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;C++11&lt;/code&gt;  引入了新的括号初始化语法 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt; ，其不仅允许集合式的初始化，而且还是对常规构造函数的调用。遗憾的是，当与 &lt;code&gt;auto&lt;/code&gt;  类型变量结合使用时，这种方式很容易出现错误， &lt;code&gt;c++17&lt;/code&gt;  增强了这一系列初始化规则。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
